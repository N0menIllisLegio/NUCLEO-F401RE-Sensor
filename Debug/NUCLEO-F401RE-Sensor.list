
NUCLEO-F401RE-Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fdc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800817c  0800817c  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e4  080086e4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086ec  080086ec  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086ec  080086ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080086f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027f4  20000088  0800877c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000287c  0800877c  0002287c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a10  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d2c  00000000  00000000  00035ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  000387f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  00039930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019814  00000000  00000000  0003a900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb53  00000000  00000000  00054114  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097e4a  00000000  00000000  00063c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fbab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad0  00000000  00000000  000fbb2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008164 	.word	0x08008164

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08008164 	.word	0x08008164

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <SELECT>:
#define SD_CS_GPIO_Port GPIOC
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <SELECT+0x14>)
 800059a:	f002 f995 	bl	80028c8 <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020800 	.word	0x40020800

080005a8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <DESELECT+0x14>)
 80005b2:	f002 f989 	bl	80028c8 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020800 	.word	0x40020800

080005c0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80005ca:	bf00      	nop
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <SPI_TxByte+0x30>)
 80005ce:	f003 fd1d 	bl	800400c <HAL_SPI_GetState>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d1f9      	bne.n	80005cc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80005d8:	1df9      	adds	r1, r7, #7
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	2201      	movs	r2, #1
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <SPI_TxByte+0x30>)
 80005e2:	f003 fa3d 	bl	8003a60 <HAL_SPI_Transmit>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000308 	.word	0x20000308

080005f4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80005fa:	23ff      	movs	r3, #255	; 0xff
 80005fc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000602:	bf00      	nop
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <SPI_RxByte+0x38>)
 8000606:	f003 fd01 	bl	800400c <HAL_SPI_GetState>
 800060a:	4603      	mov	r3, r0
 800060c:	2b01      	cmp	r3, #1
 800060e:	d1f9      	bne.n	8000604 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000610:	1dba      	adds	r2, r7, #6
 8000612:	1df9      	adds	r1, r7, #7
 8000614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <SPI_RxByte+0x38>)
 800061e:	f003 fb53 	bl	8003cc8 <HAL_SPI_TransmitReceive>

  return data;
 8000622:	79bb      	ldrb	r3, [r7, #6]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000308 	.word	0x20000308

08000630 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000638:	f7ff ffdc 	bl	80005f4 <SPI_RxByte>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	701a      	strb	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <SD_ReadyWait+0x34>)
 8000654:	2232      	movs	r2, #50	; 0x32
 8000656:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000658:	f7ff ffcc 	bl	80005f4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800065c:	f7ff ffca 	bl	80005f4 <SPI_RxByte>
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2bff      	cmp	r3, #255	; 0xff
 8000668:	d004      	beq.n	8000674 <SD_ReadyWait+0x28>
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <SD_ReadyWait+0x34>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f3      	bne.n	800065c <SD_ReadyWait+0x10>

  return res;
 8000674:	79fb      	ldrb	r3, [r7, #7]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000800 	.word	0x20000800

08000684 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800068a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800068e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000690:	f7ff ff8a 	bl	80005a8 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	e005      	b.n	80006a6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800069a:	20ff      	movs	r0, #255	; 0xff
 800069c:	f7ff ff90 	bl	80005c0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	3301      	adds	r3, #1
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	2b09      	cmp	r3, #9
 80006aa:	ddf6      	ble.n	800069a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80006ac:	f7ff ff70 	bl	8000590 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80006c4:	2395      	movs	r3, #149	; 0x95
 80006c6:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e009      	b.n	80006e2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80006ce:	1d3a      	adds	r2, r7, #4
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff72 	bl	80005c0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3301      	adds	r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b05      	cmp	r3, #5
 80006e6:	ddf2      	ble.n	80006ce <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80006e8:	e002      	b.n	80006f0 <SD_PowerOn+0x6c>
  {
    Count--;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80006f0:	f7ff ff80 	bl	80005f4 <SPI_RxByte>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d002      	beq.n	8000700 <SD_PowerOn+0x7c>
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f4      	bne.n	80006ea <SD_PowerOn+0x66>
  }

  DESELECT();
 8000700:	f7ff ff52 	bl	80005a8 <DESELECT>
  SPI_TxByte(0XFF);
 8000704:	20ff      	movs	r0, #255	; 0xff
 8000706:	f7ff ff5b 	bl	80005c0 <SPI_TxByte>

  PowerFlag = 1;
 800070a:	4b03      	ldr	r3, [pc, #12]	; (8000718 <SD_PowerOn+0x94>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000a5 	.word	0x200000a5

0800071c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <SD_PowerOff+0x14>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	200000a5 	.word	0x200000a5

08000734 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <SD_CheckPower+0x14>)
 800073a:	781b      	ldrb	r3, [r3, #0]
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	200000a5 	.word	0x200000a5

0800074c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <SD_RxDataBlock+0x68>)
 8000758:	220a      	movs	r2, #10
 800075a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800075c:	f7ff ff4a 	bl	80005f4 <SPI_RxByte>
 8000760:	4603      	mov	r3, r0
 8000762:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2bff      	cmp	r3, #255	; 0xff
 8000768:	d104      	bne.n	8000774 <SD_RxDataBlock+0x28>
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <SD_RxDataBlock+0x68>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1f3      	bne.n	800075c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2bfe      	cmp	r3, #254	; 0xfe
 8000778:	d001      	beq.n	800077e <SD_RxDataBlock+0x32>
    return FALSE;
 800077a:	2300      	movs	r3, #0
 800077c:	e016      	b.n	80007ac <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff53 	bl	8000630 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff4d 	bl	8000630 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	3b02      	subs	r3, #2
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1ed      	bne.n	800077e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80007a2:	f7ff ff27 	bl	80005f4 <SPI_RxByte>
  SPI_RxByte();
 80007a6:	f7ff ff25 	bl	80005f4 <SPI_RxByte>

  return TRUE;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000801 	.word	0x20000801

080007b8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007c8:	f7ff ff40 	bl	800064c <SD_ReadyWait>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2bff      	cmp	r3, #255	; 0xff
 80007d0:	d001      	beq.n	80007d6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e040      	b.n	8000858 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fef1 	bl	80005c0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	2bfd      	cmp	r3, #253	; 0xfd
 80007e2:	d031      	beq.n	8000848 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fee5 	bl	80005c0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fede 	bl	80005c0 <SPI_TxByte>
    } while (--wc);
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	3b01      	subs	r3, #1
 8000808:	73bb      	strb	r3, [r7, #14]
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1eb      	bne.n	80007e8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000810:	f7ff fef0 	bl	80005f4 <SPI_RxByte>
    SPI_RxByte();
 8000814:	f7ff feee 	bl	80005f4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000818:	e00b      	b.n	8000832 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800081a:	f7ff feeb 	bl	80005f4 <SPI_RxByte>
 800081e:	4603      	mov	r3, r0
 8000820:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	f003 031f 	and.w	r3, r3, #31
 8000828:	2b05      	cmp	r3, #5
 800082a:	d006      	beq.n	800083a <SD_TxDataBlock+0x82>
        break;

      i++;
 800082c:	7b7b      	ldrb	r3, [r7, #13]
 800082e:	3301      	adds	r3, #1
 8000830:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000832:	7b7b      	ldrb	r3, [r7, #13]
 8000834:	2b40      	cmp	r3, #64	; 0x40
 8000836:	d9f0      	bls.n	800081a <SD_TxDataBlock+0x62>
 8000838:	e000      	b.n	800083c <SD_TxDataBlock+0x84>
        break;
 800083a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800083c:	bf00      	nop
 800083e:	f7ff fed9 	bl	80005f4 <SPI_RxByte>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0fa      	beq.n	800083e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	f003 031f 	and.w	r3, r3, #31
 800084e:	2b05      	cmp	r3, #5
 8000850:	d101      	bne.n	8000856 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000852:	2301      	movs	r3, #1
 8000854:	e000      	b.n	8000858 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800086c:	f7ff feee 	bl	800064c <SD_ReadyWait>
 8000870:	4603      	mov	r3, r0
 8000872:	2bff      	cmp	r3, #255	; 0xff
 8000874:	d001      	beq.n	800087a <SD_SendCmd+0x1a>
    return 0xFF;
 8000876:	23ff      	movs	r3, #255	; 0xff
 8000878:	e040      	b.n	80008fc <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe9f 	bl	80005c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	0e1b      	lsrs	r3, r3, #24
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fe99 	bl	80005c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	0c1b      	lsrs	r3, r3, #16
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe93 	bl	80005c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe8d 	bl	80005c0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe88 	bl	80005c0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b40      	cmp	r3, #64	; 0x40
 80008b8:	d101      	bne.n	80008be <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80008ba:	2395      	movs	r3, #149	; 0x95
 80008bc:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b48      	cmp	r3, #72	; 0x48
 80008c2:	d101      	bne.n	80008c8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80008c4:	2387      	movs	r3, #135	; 0x87
 80008c6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe78 	bl	80005c0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b4c      	cmp	r3, #76	; 0x4c
 80008d4:	d101      	bne.n	80008da <SD_SendCmd+0x7a>
    SPI_RxByte();
 80008d6:	f7ff fe8d 	bl	80005f4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80008da:	230a      	movs	r3, #10
 80008dc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80008de:	f7ff fe89 	bl	80005f4 <SPI_RxByte>
 80008e2:	4603      	mov	r3, r0
 80008e4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	da05      	bge.n	80008fa <SD_SendCmd+0x9a>
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	73bb      	strb	r3, [r7, #14]
 80008f4:	7bbb      	ldrb	r3, [r7, #14]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f1      	bne.n	80008de <SD_SendCmd+0x7e>

  return res;
 80008fa:	7b7b      	ldrb	r3, [r7, #13]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000914:	2301      	movs	r3, #1
 8000916:	e0d5      	b.n	8000ac4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000918:	4b6c      	ldr	r3, [pc, #432]	; (8000acc <SD_disk_initialize+0x1c8>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d003      	beq.n	800092e <SD_disk_initialize+0x2a>
    return Stat;
 8000926:	4b69      	ldr	r3, [pc, #420]	; (8000acc <SD_disk_initialize+0x1c8>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	e0ca      	b.n	8000ac4 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800092e:	f7ff fea9 	bl	8000684 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000932:	f7ff fe2d 	bl	8000590 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800093a:	2100      	movs	r1, #0
 800093c:	2040      	movs	r0, #64	; 0x40
 800093e:	f7ff ff8f 	bl	8000860 <SD_SendCmd>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	f040 80a5 	bne.w	8000a94 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800094a:	4b61      	ldr	r3, [pc, #388]	; (8000ad0 <SD_disk_initialize+0x1cc>)
 800094c:	2264      	movs	r2, #100	; 0x64
 800094e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000950:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000954:	2048      	movs	r0, #72	; 0x48
 8000956:	f7ff ff83 	bl	8000860 <SD_SendCmd>
 800095a:	4603      	mov	r3, r0
 800095c:	2b01      	cmp	r3, #1
 800095e:	d158      	bne.n	8000a12 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e00c      	b.n	8000980 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000966:	7bfc      	ldrb	r4, [r7, #15]
 8000968:	f7ff fe44 	bl	80005f4 <SPI_RxByte>
 800096c:	4603      	mov	r3, r0
 800096e:	461a      	mov	r2, r3
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	4423      	add	r3, r4
 8000976:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	3301      	adds	r3, #1
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d9ef      	bls.n	8000966 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000986:	7abb      	ldrb	r3, [r7, #10]
 8000988:	2b01      	cmp	r3, #1
 800098a:	f040 8083 	bne.w	8000a94 <SD_disk_initialize+0x190>
 800098e:	7afb      	ldrb	r3, [r7, #11]
 8000990:	2baa      	cmp	r3, #170	; 0xaa
 8000992:	d17f      	bne.n	8000a94 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000994:	2100      	movs	r1, #0
 8000996:	2077      	movs	r0, #119	; 0x77
 8000998:	f7ff ff62 	bl	8000860 <SD_SendCmd>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d807      	bhi.n	80009b2 <SD_disk_initialize+0xae>
 80009a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009a6:	2069      	movs	r0, #105	; 0x69
 80009a8:	f7ff ff5a 	bl	8000860 <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d005      	beq.n	80009be <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80009b2:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <SD_disk_initialize+0x1cc>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1eb      	bne.n	8000994 <SD_disk_initialize+0x90>
 80009bc:	e000      	b.n	80009c0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80009be:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009c0:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <SD_disk_initialize+0x1cc>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d064      	beq.n	8000a94 <SD_disk_initialize+0x190>
 80009ca:	2100      	movs	r1, #0
 80009cc:	207a      	movs	r0, #122	; 0x7a
 80009ce:	f7ff ff47 	bl	8000860 <SD_SendCmd>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d15d      	bne.n	8000a94 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	e00c      	b.n	80009f8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80009de:	7bfc      	ldrb	r4, [r7, #15]
 80009e0:	f7ff fe08 	bl	80005f4 <SPI_RxByte>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4423      	add	r3, r4
 80009ee:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	3301      	adds	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d9ef      	bls.n	80009de <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80009fe:	7a3b      	ldrb	r3, [r7, #8]
 8000a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SD_disk_initialize+0x108>
 8000a08:	2306      	movs	r3, #6
 8000a0a:	e000      	b.n	8000a0e <SD_disk_initialize+0x10a>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	73bb      	strb	r3, [r7, #14]
 8000a10:	e040      	b.n	8000a94 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a12:	2100      	movs	r1, #0
 8000a14:	2077      	movs	r0, #119	; 0x77
 8000a16:	f7ff ff23 	bl	8000860 <SD_SendCmd>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d808      	bhi.n	8000a32 <SD_disk_initialize+0x12e>
 8000a20:	2100      	movs	r1, #0
 8000a22:	2069      	movs	r0, #105	; 0x69
 8000a24:	f7ff ff1c 	bl	8000860 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d801      	bhi.n	8000a32 <SD_disk_initialize+0x12e>
 8000a2e:	2302      	movs	r3, #2
 8000a30:	e000      	b.n	8000a34 <SD_disk_initialize+0x130>
 8000a32:	2301      	movs	r3, #1
 8000a34:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000a36:	7bbb      	ldrb	r3, [r7, #14]
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d10e      	bne.n	8000a5a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2077      	movs	r0, #119	; 0x77
 8000a40:	f7ff ff0e 	bl	8000860 <SD_SendCmd>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d80e      	bhi.n	8000a68 <SD_disk_initialize+0x164>
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2069      	movs	r0, #105	; 0x69
 8000a4e:	f7ff ff07 	bl	8000860 <SD_SendCmd>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d107      	bne.n	8000a68 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000a58:	e00d      	b.n	8000a76 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2041      	movs	r0, #65	; 0x41
 8000a5e:	f7ff feff 	bl	8000860 <SD_SendCmd>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d005      	beq.n	8000a74 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <SD_disk_initialize+0x1cc>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1e1      	bne.n	8000a36 <SD_disk_initialize+0x132>
 8000a72:	e000      	b.n	8000a76 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000a74:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <SD_disk_initialize+0x1cc>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d007      	beq.n	8000a90 <SD_disk_initialize+0x18c>
 8000a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a84:	2050      	movs	r0, #80	; 0x50
 8000a86:	f7ff feeb 	bl	8000860 <SD_SendCmd>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000a94:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <SD_disk_initialize+0x1d0>)
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000a9a:	f7ff fd85 	bl	80005a8 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000a9e:	f7ff fda9 	bl	80005f4 <SPI_RxByte>

  if (type)
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d008      	beq.n	8000aba <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <SD_disk_initialize+0x1c8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	f023 0301 	bic.w	r3, r3, #1
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SD_disk_initialize+0x1c8>)
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	e001      	b.n	8000abe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000aba:	f7ff fe2f 	bl	800071c <SD_PowerOff>
  }

  return Stat;
 8000abe:	4b03      	ldr	r3, [pc, #12]	; (8000acc <SD_disk_initialize+0x1c8>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000801 	.word	0x20000801
 8000ad4:	200000a4 	.word	0x200000a4

08000ad8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SD_disk_status+0x14>
    return STA_NOINIT;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e002      	b.n	8000af2 <SD_disk_status+0x1a>

  return Stat;
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SD_disk_status+0x28>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000

08000b04 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <SD_disk_read+0x1c>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b20:	2304      	movs	r3, #4
 8000b22:	e051      	b.n	8000bc8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <SD_disk_read+0xcc>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e048      	b.n	8000bc8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <SD_disk_read+0xd0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b48:	f7ff fd22 	bl	8000590 <SELECT>

  if (count == 1)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d111      	bne.n	8000b76 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2051      	movs	r0, #81	; 0x51
 8000b56:	f7ff fe83 	bl	8000860 <SD_SendCmd>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d129      	bne.n	8000bb4 <SD_disk_read+0xb0>
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	68b8      	ldr	r0, [r7, #8]
 8000b66:	f7ff fdf1 	bl	800074c <SD_RxDataBlock>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d021      	beq.n	8000bb4 <SD_disk_read+0xb0>
      count = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	e01e      	b.n	8000bb4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2052      	movs	r0, #82	; 0x52
 8000b7a:	f7ff fe71 	bl	8000860 <SD_SendCmd>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d117      	bne.n	8000bb4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f7ff fddf 	bl	800074c <SD_RxDataBlock>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00a      	beq.n	8000baa <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b9a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1ed      	bne.n	8000b84 <SD_disk_read+0x80>
 8000ba8:	e000      	b.n	8000bac <SD_disk_read+0xa8>
          break;
 8000baa:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	204c      	movs	r0, #76	; 0x4c
 8000bb0:	f7ff fe56 	bl	8000860 <SD_SendCmd>
    }
  }

  DESELECT();
 8000bb4:	f7ff fcf8 	bl	80005a8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000bb8:	f7ff fd1c 	bl	80005f4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf14      	ite	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	2300      	moveq	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	200000a4 	.word	0x200000a4

08000bd8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <SD_disk_write+0x1c>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <SD_disk_write+0x20>
    return RES_PARERR;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e06b      	b.n	8000cd0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <SD_disk_write+0x100>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e062      	b.n	8000cd0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <SD_disk_write+0x100>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SD_disk_write+0x44>
    return RES_WRPRT;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e059      	b.n	8000cd0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <SD_disk_write+0x104>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	025b      	lsls	r3, r3, #9
 8000c2c:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c2e:	f7ff fcaf 	bl	8000590 <SELECT>

  if (count == 1)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d110      	bne.n	8000c5a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2058      	movs	r0, #88	; 0x58
 8000c3c:	f7ff fe10 	bl	8000860 <SD_SendCmd>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d13a      	bne.n	8000cbc <SD_disk_write+0xe4>
 8000c46:	21fe      	movs	r1, #254	; 0xfe
 8000c48:	68b8      	ldr	r0, [r7, #8]
 8000c4a:	f7ff fdb5 	bl	80007b8 <SD_TxDataBlock>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d033      	beq.n	8000cbc <SD_disk_write+0xe4>
      count = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	e030      	b.n	8000cbc <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <SD_disk_write+0x104>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2077      	movs	r0, #119	; 0x77
 8000c6a:	f7ff fdf9 	bl	8000860 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	2057      	movs	r0, #87	; 0x57
 8000c72:	f7ff fdf5 	bl	8000860 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2059      	movs	r0, #89	; 0x59
 8000c7a:	f7ff fdf1 	bl	8000860 <SD_SendCmd>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d11b      	bne.n	8000cbc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000c84:	21fc      	movs	r1, #252	; 0xfc
 8000c86:	68b8      	ldr	r0, [r7, #8]
 8000c88:	f7ff fd96 	bl	80007b8 <SD_TxDataBlock>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00a      	beq.n	8000ca8 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c98:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1ee      	bne.n	8000c84 <SD_disk_write+0xac>
 8000ca6:	e000      	b.n	8000caa <SD_disk_write+0xd2>
          break;
 8000ca8:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000caa:	21fd      	movs	r1, #253	; 0xfd
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fd83 	bl	80007b8 <SD_TxDataBlock>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <SD_disk_write+0xe4>
      {
        count = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000cbc:	f7ff fc74 	bl	80005a8 <DESELECT>
  SPI_RxByte();
 8000cc0:	f7ff fc98 	bl	80005f4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	200000a4 	.word	0x200000a4

08000ce0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08b      	sub	sp, #44	; 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	603a      	str	r2, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	460b      	mov	r3, r1
 8000cee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e117      	b.n	8000f2e <SD_disk_ioctl+0x24e>

  res = RES_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d126      	bne.n	8000d58 <SD_disk_ioctl+0x78>
  {
    switch (*ptr)
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d00e      	beq.n	8000d30 <SD_disk_ioctl+0x50>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d012      	beq.n	8000d3c <SD_disk_ioctl+0x5c>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d11a      	bne.n	8000d50 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8000d1a:	f7ff fd0b 	bl	8000734 <SD_CheckPower>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8000d24:	f7ff fcfa 	bl	800071c <SD_PowerOff>
      res = RES_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d2e:	e0fc      	b.n	8000f2a <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d30:	f7ff fca8 	bl	8000684 <SD_PowerOn>
      res = RES_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d3a:	e0f6      	b.n	8000f2a <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	1c5c      	adds	r4, r3, #1
 8000d40:	f7ff fcf8 	bl	8000734 <SD_CheckPower>
 8000d44:	4603      	mov	r3, r0
 8000d46:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d4e:	e0ec      	b.n	8000f2a <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8000d50:	2304      	movs	r3, #4
 8000d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d56:	e0e8      	b.n	8000f2a <SD_disk_ioctl+0x24a>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000d58:	4b77      	ldr	r3, [pc, #476]	; (8000f38 <SD_disk_ioctl+0x258>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e0e1      	b.n	8000f2e <SD_disk_ioctl+0x24e>

    SELECT();
 8000d6a:	f7ff fc11 	bl	8000590 <SELECT>

    switch (ctrl)
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	2b0d      	cmp	r3, #13
 8000d72:	f200 80cb 	bhi.w	8000f0c <SD_disk_ioctl+0x22c>
 8000d76:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <SD_disk_ioctl+0x9c>)
 8000d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7c:	08000e77 	.word	0x08000e77
 8000d80:	08000db5 	.word	0x08000db5
 8000d84:	08000e67 	.word	0x08000e67
 8000d88:	08000f0d 	.word	0x08000f0d
 8000d8c:	08000f0d 	.word	0x08000f0d
 8000d90:	08000f0d 	.word	0x08000f0d
 8000d94:	08000f0d 	.word	0x08000f0d
 8000d98:	08000f0d 	.word	0x08000f0d
 8000d9c:	08000f0d 	.word	0x08000f0d
 8000da0:	08000f0d 	.word	0x08000f0d
 8000da4:	08000f0d 	.word	0x08000f0d
 8000da8:	08000e89 	.word	0x08000e89
 8000dac:	08000ead 	.word	0x08000ead
 8000db0:	08000ed1 	.word	0x08000ed1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000db4:	2100      	movs	r1, #0
 8000db6:	2049      	movs	r0, #73	; 0x49
 8000db8:	f7ff fd52 	bl	8000860 <SD_SendCmd>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 80a8 	bne.w	8000f14 <SD_disk_ioctl+0x234>
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2110      	movs	r1, #16
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fcbe 	bl	800074c <SD_RxDataBlock>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 809e 	beq.w	8000f14 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1)
 8000dd8:	7b3b      	ldrb	r3, [r7, #12]
 8000dda:	099b      	lsrs	r3, r3, #6
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d10e      	bne.n	8000e00 <SD_disk_ioctl+0x120>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000de2:	7d7b      	ldrb	r3, [r7, #21]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	7d3b      	ldrb	r3, [r7, #20]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	3301      	adds	r3, #1
 8000df4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000df6:	8bfb      	ldrh	r3, [r7, #30]
 8000df8:	029a      	lsls	r2, r3, #10
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e02e      	b.n	8000e5e <SD_disk_ioctl+0x17e>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e00:	7c7b      	ldrb	r3, [r7, #17]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	7dbb      	ldrb	r3, [r7, #22]
 8000e0a:	09db      	lsrs	r3, r3, #7
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	7d7b      	ldrb	r3, [r7, #21]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 0306 	and.w	r3, r3, #6
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4413      	add	r3, r2
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3302      	adds	r3, #2
 8000e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e28:	7d3b      	ldrb	r3, [r7, #20]
 8000e2a:	099b      	lsrs	r3, r3, #6
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	7cfb      	ldrb	r3, [r7, #19]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	7cbb      	ldrb	r3, [r7, #18]
 8000e3e:	029b      	lsls	r3, r3, #10
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e50:	8bfa      	ldrh	r2, [r7, #30]
 8000e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e56:	3b09      	subs	r3, #9
 8000e58:	409a      	lsls	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e64:	e056      	b.n	8000f14 <SD_disk_ioctl+0x234>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e74:	e055      	b.n	8000f22 <SD_disk_ioctl+0x242>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000e76:	f7ff fbe9 	bl	800064c <SD_ReadyWait>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2bff      	cmp	r3, #255	; 0xff
 8000e7e:	d14b      	bne.n	8000f18 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e86:	e047      	b.n	8000f18 <SD_disk_ioctl+0x238>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2049      	movs	r0, #73	; 0x49
 8000e8c:	f7ff fce8 	bl	8000860 <SD_SendCmd>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d142      	bne.n	8000f1c <SD_disk_ioctl+0x23c>
 8000e96:	2110      	movs	r1, #16
 8000e98:	6a38      	ldr	r0, [r7, #32]
 8000e9a:	f7ff fc57 	bl	800074c <SD_RxDataBlock>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d03b      	beq.n	8000f1c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eaa:	e037      	b.n	8000f1c <SD_disk_ioctl+0x23c>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000eac:	2100      	movs	r1, #0
 8000eae:	204a      	movs	r0, #74	; 0x4a
 8000eb0:	f7ff fcd6 	bl	8000860 <SD_SendCmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d132      	bne.n	8000f20 <SD_disk_ioctl+0x240>
 8000eba:	2110      	movs	r1, #16
 8000ebc:	6a38      	ldr	r0, [r7, #32]
 8000ebe:	f7ff fc45 	bl	800074c <SD_RxDataBlock>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d02b      	beq.n	8000f20 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ece:	e027      	b.n	8000f20 <SD_disk_ioctl+0x240>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	207a      	movs	r0, #122	; 0x7a
 8000ed4:	f7ff fcc4 	bl	8000860 <SD_SendCmd>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d116      	bne.n	8000f0c <SD_disk_ioctl+0x22c>
      {
        for (n = 0; n < 4; n++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ee4:	e00b      	b.n	8000efe <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8000ee6:	6a3c      	ldr	r4, [r7, #32]
 8000ee8:	1c63      	adds	r3, r4, #1
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	f7ff fb82 	bl	80005f4 <SPI_RxByte>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ef4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ef8:	3301      	adds	r3, #1
 8000efa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000efe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d9ef      	bls.n	8000ee6 <SD_disk_ioctl+0x206>
        }

        res = RES_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f12:	e006      	b.n	8000f22 <SD_disk_ioctl+0x242>
      break;
 8000f14:	bf00      	nop
 8000f16:	e004      	b.n	8000f22 <SD_disk_ioctl+0x242>
      break;
 8000f18:	bf00      	nop
 8000f1a:	e002      	b.n	8000f22 <SD_disk_ioctl+0x242>
      break;
 8000f1c:	bf00      	nop
 8000f1e:	e000      	b.n	8000f22 <SD_disk_ioctl+0x242>
      break;
 8000f20:	bf00      	nop
    }

    DESELECT();
 8000f22:	f7ff fb41 	bl	80005a8 <DESELECT>
    SPI_RxByte();
 8000f26:	f7ff fb65 	bl	80005f4 <SPI_RxByte>
  }

  return res;
 8000f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	372c      	adds	r7, #44	; 0x2c
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000000 	.word	0x20000000

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//TIM1 set to 30 seconds repeat

	// Inital date/time
	Day = 15;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <main+0x58>)
 8000f42:	220f      	movs	r2, #15
 8000f44:	701a      	strb	r2, [r3, #0]
	Month = RTC_MONTH_SEPTEMBER;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <main+0x5c>)
 8000f48:	2209      	movs	r2, #9
 8000f4a:	701a      	strb	r2, [r3, #0]
	Year = 20;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <main+0x60>)
 8000f4e:	2214      	movs	r2, #20
 8000f50:	701a      	strb	r2, [r3, #0]
	Hour = 0;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <main+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
	Minute = 20;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <main+0x68>)
 8000f5a:	2214      	movs	r2, #20
 8000f5c:	701a      	strb	r2, [r3, #0]
	Second = 14;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <main+0x6c>)
 8000f60:	220e      	movs	r2, #14
 8000f62:	701a      	strb	r2, [r3, #0]
	Weekday = RTC_WEEKDAY_TUESDAY;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <main+0x70>)
 8000f66:	2202      	movs	r2, #2
 8000f68:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f000 fe0d 	bl	8001b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f821 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 f9eb 	bl	800134c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f76:	f000 f8a1 	bl	80010bc <MX_ADC1_Init>
  MX_SPI2_Init();
 8000f7a:	f000 f95f 	bl	800123c <MX_SPI2_Init>
  MX_FATFS_Init();
 8000f7e:	f003 fcdb 	bl	8004938 <MX_FATFS_Init>
  MX_RTC_Init();
 8000f82:	f000 f8ed 	bl	8001160 <MX_RTC_Init>
  MX_TIM1_Init();
 8000f86:	f000 f98f 	bl	80012a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000f8a:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <main+0x74>)
 8000f8c:	f003 f923 	bl	80041d6 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <main+0x54>
 8000f92:	bf00      	nop
 8000f94:	200003d0 	.word	0x200003d0
 8000f98:	20000415 	.word	0x20000415
 8000f9c:	20000414 	.word	0x20000414
 8000fa0:	20000360 	.word	0x20000360
 8000fa4:	200003ac 	.word	0x200003ac
 8000fa8:	20000304 	.word	0x20000304
 8000fac:	20000361 	.word	0x20000361
 8000fb0:	200003d4 	.word	0x200003d4

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b098      	sub	sp, #96	; 0x60
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fbe:	2230      	movs	r2, #48	; 0x30
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f006 fc94 	bl	80078f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <SystemClock_Config+0x100>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a30      	ldr	r2, [pc, #192]	; (80010b4 <SystemClock_Config+0x100>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <SystemClock_Config+0x100>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001004:	2300      	movs	r3, #0
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <SystemClock_Config+0x104>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <SystemClock_Config+0x104>)
 8001012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <SystemClock_Config+0x104>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001024:	2306      	movs	r3, #6
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001030:	2310      	movs	r3, #16
 8001032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001038:	2300      	movs	r3, #0
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800103c:	2310      	movs	r3, #16
 800103e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001040:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001044:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001046:	2304      	movs	r3, #4
 8001048:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800104a:	2307      	movs	r3, #7
 800104c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fc52 	bl	80028fc <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800105e:	f000 fb77 	bl	8001750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f001 feac 	bl	8002ddc <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800108a:	f000 fb61 	bl	8001750 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800108e:	2302      	movs	r3, #2
 8001090:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001096:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4618      	mov	r0, r3
 800109e:	f002 f85b 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80010a8:	f000 fb52 	bl	8001750 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3760      	adds	r7, #96	; 0x60
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC1_Init+0x98>)
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <MX_ADC1_Init+0x9c>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC1_Init+0x98>)
 80010d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC1_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_ADC1_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_ADC1_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC1_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_ADC1_Init+0x98>)
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_ADC1_Init+0xa0>)
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC1_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_ADC1_Init+0x98>)
 800110a:	2201      	movs	r2, #1
 800110c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_ADC1_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC1_Init+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC1_Init+0x98>)
 800111e:	f000 fda5 	bl	8001c6c <HAL_ADC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001128:	f000 fb12 	bl	8001750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800112c:	230f      	movs	r3, #15
 800112e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_ADC1_Init+0x98>)
 800113e:	f000 ff11 	bl	8001f64 <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001148:	f000 fb02 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000364 	.word	0x20000364
 8001158:	40012000 	.word	0x40012000
 800115c:	0f000001 	.word	0x0f000001

08001160 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <MX_RTC_Init+0xb0>)
 8001166:	4a2b      	ldr	r2, [pc, #172]	; (8001214 <MX_RTC_Init+0xb4>)
 8001168:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <MX_RTC_Init+0xb0>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <MX_RTC_Init+0xb0>)
 8001172:	227f      	movs	r2, #127	; 0x7f
 8001174:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <MX_RTC_Init+0xb0>)
 8001178:	22ff      	movs	r2, #255	; 0xff
 800117a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <MX_RTC_Init+0xb0>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001182:	4b23      	ldr	r3, [pc, #140]	; (8001210 <MX_RTC_Init+0xb0>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_RTC_Init+0xb0>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800118e:	4820      	ldr	r0, [pc, #128]	; (8001210 <MX_RTC_Init+0xb0>)
 8001190:	f002 f8d0 	bl	8003334 <HAL_RTC_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800119a:	f000 fad9 	bl	8001750 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = Hour;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_RTC_Init+0xb8>)
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <MX_RTC_Init+0xbc>)
 80011a4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = Minute;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <MX_RTC_Init+0xc0>)
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_RTC_Init+0xbc>)
 80011ac:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = Second;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_RTC_Init+0xc4>)
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_RTC_Init+0xbc>)
 80011b4:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_RTC_Init+0xbc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_RTC_Init+0xbc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80011c2:	2200      	movs	r2, #0
 80011c4:	4915      	ldr	r1, [pc, #84]	; (800121c <MX_RTC_Init+0xbc>)
 80011c6:	4812      	ldr	r0, [pc, #72]	; (8001210 <MX_RTC_Init+0xb0>)
 80011c8:	f002 f945 	bl	8003456 <HAL_RTC_SetTime>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_RTC_Init+0x76>
  {
    Error_Handler();
 80011d2:	f000 fabd 	bl	8001750 <Error_Handler>
  }
  sDate.WeekDay = Weekday;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_RTC_Init+0xc8>)
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_RTC_Init+0xcc>)
 80011dc:	701a      	strb	r2, [r3, #0]
  sDate.Month = Month;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_RTC_Init+0xd0>)
 80011e0:	781a      	ldrb	r2, [r3, #0]
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_RTC_Init+0xcc>)
 80011e4:	705a      	strb	r2, [r3, #1]
  sDate.Date = Day;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_RTC_Init+0xd4>)
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_RTC_Init+0xcc>)
 80011ec:	709a      	strb	r2, [r3, #2]
  sDate.Year = Year;
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_RTC_Init+0xd8>)
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_RTC_Init+0xcc>)
 80011f4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011f6:	2200      	movs	r2, #0
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <MX_RTC_Init+0xcc>)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_RTC_Init+0xb0>)
 80011fc:	f002 fa46 	bl	800368c <HAL_RTC_SetDate>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001206:	f000 faa3 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200003b0 	.word	0x200003b0
 8001214:	40002800 	.word	0x40002800
 8001218:	20000360 	.word	0x20000360
 800121c:	200000a8 	.word	0x200000a8
 8001220:	200003ac 	.word	0x200003ac
 8001224:	20000304 	.word	0x20000304
 8001228:	20000361 	.word	0x20000361
 800122c:	200000bc 	.word	0x200000bc
 8001230:	20000415 	.word	0x20000415
 8001234:	200003d0 	.word	0x200003d0
 8001238:	20000414 	.word	0x20000414

0800123c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <MX_SPI2_Init+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001248:	f44f 7282 	mov.w	r2, #260	; 0x104
 800124c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_SPI2_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_SPI2_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001288:	220a      	movs	r2, #10
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_SPI2_Init+0x64>)
 800128e:	f002 fb83 	bl	8003998 <HAL_SPI_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001298:	f000 fa5a 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000308 	.word	0x20000308
 80012a4:	40003800 	.word	0x40003800

080012a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_TIM1_Init+0x9c>)
 80012c6:	4a20      	ldr	r2, [pc, #128]	; (8001348 <MX_TIM1_Init+0xa0>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 55999;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_TIM1_Init+0x9c>)
 80012cc:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 80012d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_TIM1_Init+0x9c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 44999;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_TIM1_Init+0x9c>)
 80012da:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80012de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM1_Init+0x9c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_TIM1_Init+0x9c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  //htim1.Init.RepetitionCounter = 240;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_TIM1_Init+0x9c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f2:	4814      	ldr	r0, [pc, #80]	; (8001344 <MX_TIM1_Init+0x9c>)
 80012f4:	f002 ff44 	bl	8004180 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80012fe:	f000 fa27 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_TIM1_Init+0x9c>)
 8001310:	f003 f88d 	bl	800442e <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800131a:	f000 fa19 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_TIM1_Init+0x9c>)
 800132c:	f003 fa82 	bl	8004834 <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001336:	f000 fa0b 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200003d4 	.word	0x200003d4
 8001348:	40010000 	.word	0x40010000

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <MX_GPIO_Init+0x114>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <MX_GPIO_Init+0x114>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <MX_GPIO_Init+0x114>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <MX_GPIO_Init+0x114>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <MX_GPIO_Init+0x114>)
 8001388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <MX_GPIO_Init+0x114>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <MX_GPIO_Init+0x114>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <MX_GPIO_Init+0x114>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <MX_GPIO_Init+0x114>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <MX_GPIO_Init+0x114>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a28      	ldr	r2, [pc, #160]	; (8001460 <MX_GPIO_Init+0x114>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <MX_GPIO_Init+0x114>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2120      	movs	r1, #32
 80013d6:	4823      	ldr	r0, [pc, #140]	; (8001464 <MX_GPIO_Init+0x118>)
 80013d8:	f001 fa76 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	4821      	ldr	r0, [pc, #132]	; (8001468 <MX_GPIO_Init+0x11c>)
 80013e2:	f001 fa71 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_GPIO_Init+0x120>)
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	481b      	ldr	r0, [pc, #108]	; (8001468 <MX_GPIO_Init+0x11c>)
 80013fc:	f001 f8e2 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001400:	230c      	movs	r3, #12
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001410:	2307      	movs	r3, #7
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4812      	ldr	r0, [pc, #72]	; (8001464 <MX_GPIO_Init+0x118>)
 800141c:	f001 f8d2 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001420:	2320      	movs	r3, #32
 8001422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	480b      	ldr	r0, [pc, #44]	; (8001464 <MX_GPIO_Init+0x118>)
 8001438:	f001 f8c4 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800143c:	2310      	movs	r3, #16
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_GPIO_Init+0x11c>)
 8001454:	f001 f8b6 	bl	80025c4 <HAL_GPIO_Init>

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020800 	.word	0x40020800
 800146c:	10210000 	.word	0x10210000

08001470 <GetSensorValue>:

/* USER CODE BEGIN 4 */

uint16_t GetSensorValue(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
	  uint16_t sensorValue = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	80fb      	strh	r3, [r7, #6]
	  HAL_ADC_Start(&hadc1);
 800147a:	4809      	ldr	r0, [pc, #36]	; (80014a0 <GetSensorValue+0x30>)
 800147c:	f000 fc3a 	bl	8001cf4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <GetSensorValue+0x30>)
 8001486:	f000 fcdb 	bl	8001e40 <HAL_ADC_PollForConversion>
	  sensorValue = HAL_ADC_GetValue(&hadc1);
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <GetSensorValue+0x30>)
 800148c:	f000 fd5c 	bl	8001f48 <HAL_ADC_GetValue>
 8001490:	4603      	mov	r3, r0
 8001492:	80fb      	strh	r3, [r7, #6]
	  return sensorValue;
 8001494:	88fb      	ldrh	r3, [r7, #6]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000364 	.word	0x20000364

080014a4 <FormatOutputLine>:

void FormatOutputLine(char *line, uint16_t sensorValue)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80014b0:	2200      	movs	r2, #0
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <FormatOutputLine+0x44>)
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <FormatOutputLine+0x48>)
 80014b6:	f002 f88b 	bl	80035d0 <HAL_RTC_GetTime>
	 snprintf(line, 63, "%d:%d:%d - %d\n", sTime.Hours, sTime.Minutes, sTime.Seconds, sensorValue);
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <FormatOutputLine+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <FormatOutputLine+0x44>)
 80014c2:	785b      	ldrb	r3, [r3, #1]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <FormatOutputLine+0x44>)
 80014c8:	789b      	ldrb	r3, [r3, #2]
 80014ca:	4619      	mov	r1, r3
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	9101      	str	r1, [sp, #4]
 80014d2:	9200      	str	r2, [sp, #0]
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <FormatOutputLine+0x4c>)
 80014d8:	213f      	movs	r1, #63	; 0x3f
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f006 fa10 	bl	8007900 <sniprintf>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200000a8 	.word	0x200000a8
 80014ec:	200003b0 	.word	0x200003b0
 80014f0:	0800817c 	.word	0x0800817c

080014f4 <GetFileName>:

void GetFileName(char *fileName)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80014fc:	2200      	movs	r2, #0
 80014fe:	490c      	ldr	r1, [pc, #48]	; (8001530 <GetFileName+0x3c>)
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <GetFileName+0x40>)
 8001502:	f002 f96a 	bl	80037da <HAL_RTC_GetDate>
	snprintf(fileName, 63, "%d-%d-20%d.txt", sDate.Date, sDate.Month, sDate.Year);
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <GetFileName+0x3c>)
 8001508:	789b      	ldrb	r3, [r3, #2]
 800150a:	4619      	mov	r1, r3
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <GetFileName+0x3c>)
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	461a      	mov	r2, r3
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <GetFileName+0x3c>)
 8001514:	78db      	ldrb	r3, [r3, #3]
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	9200      	str	r2, [sp, #0]
 800151a:	460b      	mov	r3, r1
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <GetFileName+0x44>)
 800151e:	213f      	movs	r1, #63	; 0x3f
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f006 f9ed 	bl	8007900 <sniprintf>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200000bc 	.word	0x200000bc
 8001534:	200003b0 	.word	0x200003b0
 8001538:	0800818c 	.word	0x0800818c

0800153c <AddLineToFile>:

uint16_t AddLineToFile(const char *fileName, const char *line)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8001542:	b08e      	sub	sp, #56	; 0x38
 8001544:	af00      	add	r7, sp, #0
 8001546:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800154a:	3b34      	subs	r3, #52	; 0x34
 800154c:	6018      	str	r0, [r3, #0]
 800154e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001552:	3b38      	subs	r3, #56	; 0x38
 8001554:	6019      	str	r1, [r3, #0]
	FATFS fs;
	FRESULT fResult;
	FIL file;
	UINT bWriten;

	fResult = f_mount(&fs, "/", 1);
 8001556:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800155a:	f103 0318 	add.w	r3, r3, #24
 800155e:	3b1c      	subs	r3, #28
 8001560:	2201      	movs	r2, #1
 8001562:	4974      	ldr	r1, [pc, #464]	; (8001734 <AddLineToFile+0x1f8>)
 8001564:	4618      	mov	r0, r3
 8001566:	f005 fc29 	bl	8006dbc <f_mount>
 800156a:	4603      	mov	r3, r0
 800156c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001570:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8001574:	7013      	strb	r3, [r2, #0]

	if(fResult != FR_OK)
 8001576:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800157a:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d014      	beq.n	80015ae <AddLineToFile+0x72>
	{
		strcpy(ErrorMessage, "Failed to mount SD");
 8001584:	4a6c      	ldr	r2, [pc, #432]	; (8001738 <AddLineToFile+0x1fc>)
 8001586:	4b6d      	ldr	r3, [pc, #436]	; (800173c <AddLineToFile+0x200>)
 8001588:	4615      	mov	r5, r2
 800158a:	461c      	mov	r4, r3
 800158c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158e:	6028      	str	r0, [r5, #0]
 8001590:	6069      	str	r1, [r5, #4]
 8001592:	60aa      	str	r2, [r5, #8]
 8001594:	60eb      	str	r3, [r5, #12]
 8001596:	8823      	ldrh	r3, [r4, #0]
 8001598:	78a2      	ldrb	r2, [r4, #2]
 800159a:	822b      	strh	r3, [r5, #16]
 800159c:	4613      	mov	r3, r2
 800159e:	74ab      	strb	r3, [r5, #18]
		return fResult;
 80015a0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015a4:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	e0bc      	b.n	8001728 <AddLineToFile+0x1ec>
	}

	fResult = f_open(&file, fileName, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 80015ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015b2:	3b34      	subs	r3, #52	; 0x34
 80015b4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80015b8:	382c      	subs	r0, #44	; 0x2c
 80015ba:	2233      	movs	r2, #51	; 0x33
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	f005 fc43 	bl	8006e48 <f_open>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80015c8:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80015cc:	7013      	strb	r3, [r2, #0]

	if(fResult != FR_OK)
 80015ce:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015d2:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d017      	beq.n	800160c <AddLineToFile+0xd0>
	{
		strcpy(ErrorMessage, strcat("Failed to open file: ", fileName));
 80015dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015e0:	3b34      	subs	r3, #52	; 0x34
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	4856      	ldr	r0, [pc, #344]	; (8001740 <AddLineToFile+0x204>)
 80015e6:	f006 f9bf 	bl	8007968 <strcat>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4852      	ldr	r0, [pc, #328]	; (8001738 <AddLineToFile+0x1fc>)
 80015f0:	f006 f9c9 	bl	8007986 <strcpy>
		f_mount(NULL, "/", 1);
 80015f4:	2201      	movs	r2, #1
 80015f6:	494f      	ldr	r1, [pc, #316]	; (8001734 <AddLineToFile+0x1f8>)
 80015f8:	2000      	movs	r0, #0
 80015fa:	f005 fbdf 	bl	8006dbc <f_mount>
		return fResult;
 80015fe:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001602:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	e08d      	b.n	8001728 <AddLineToFile+0x1ec>
	}

	fResult = f_write(&file, line, strlen(line), &bWriten);
 800160c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001610:	3b38      	subs	r3, #56	; 0x38
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	f7fe fde4 	bl	80001e0 <strlen>
 8001618:	4602      	mov	r2, r0
 800161a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800161e:	3b30      	subs	r3, #48	; 0x30
 8001620:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001624:	3938      	subs	r1, #56	; 0x38
 8001626:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800162a:	382c      	subs	r0, #44	; 0x2c
 800162c:	6809      	ldr	r1, [r1, #0]
 800162e:	f005 fdd7 	bl	80071e0 <f_write>
 8001632:	4603      	mov	r3, r0
 8001634:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001638:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800163c:	7013      	strb	r3, [r2, #0]

	if(fResult != FR_OK)
 800163e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001642:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01d      	beq.n	8001688 <AddLineToFile+0x14c>
	{
		strcpy(ErrorMessage, strcat("Failed to write in file: ", fileName));
 800164c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001650:	3b34      	subs	r3, #52	; 0x34
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	483b      	ldr	r0, [pc, #236]	; (8001744 <AddLineToFile+0x208>)
 8001656:	f006 f987 	bl	8007968 <strcat>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	4836      	ldr	r0, [pc, #216]	; (8001738 <AddLineToFile+0x1fc>)
 8001660:	f006 f991 	bl	8007986 <strcpy>
		f_close(&file);
 8001664:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001668:	3b2c      	subs	r3, #44	; 0x2c
 800166a:	4618      	mov	r0, r3
 800166c:	f005 ffca 	bl	8007604 <f_close>
		f_mount(NULL, "/", 1);
 8001670:	2201      	movs	r2, #1
 8001672:	4930      	ldr	r1, [pc, #192]	; (8001734 <AddLineToFile+0x1f8>)
 8001674:	2000      	movs	r0, #0
 8001676:	f005 fba1 	bl	8006dbc <f_mount>
		return fResult;
 800167a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800167e:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	e04f      	b.n	8001728 <AddLineToFile+0x1ec>
	}

	fResult = f_close(&file);
 8001688:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800168c:	3b2c      	subs	r3, #44	; 0x2c
 800168e:	4618      	mov	r0, r3
 8001690:	f005 ffb8 	bl	8007604 <f_close>
 8001694:	4603      	mov	r3, r0
 8001696:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800169a:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800169e:	7013      	strb	r3, [r2, #0]

	if(fResult != FR_OK)
 80016a0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80016a4:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d017      	beq.n	80016de <AddLineToFile+0x1a2>
	{
		strcpy(ErrorMessage, strcat("Failed to close file: ", fileName));
 80016ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016b2:	3b34      	subs	r3, #52	; 0x34
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	4824      	ldr	r0, [pc, #144]	; (8001748 <AddLineToFile+0x20c>)
 80016b8:	f006 f956 	bl	8007968 <strcat>
 80016bc:	4603      	mov	r3, r0
 80016be:	4619      	mov	r1, r3
 80016c0:	481d      	ldr	r0, [pc, #116]	; (8001738 <AddLineToFile+0x1fc>)
 80016c2:	f006 f960 	bl	8007986 <strcpy>
		f_mount(NULL, "/", 1);
 80016c6:	2201      	movs	r2, #1
 80016c8:	491a      	ldr	r1, [pc, #104]	; (8001734 <AddLineToFile+0x1f8>)
 80016ca:	2000      	movs	r0, #0
 80016cc:	f005 fb76 	bl	8006dbc <f_mount>
		return fResult;
 80016d0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80016d4:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	e024      	b.n	8001728 <AddLineToFile+0x1ec>
	}

	fResult = f_mount(NULL, "/", 1);
 80016de:	2201      	movs	r2, #1
 80016e0:	4914      	ldr	r1, [pc, #80]	; (8001734 <AddLineToFile+0x1f8>)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f005 fb6a 	bl	8006dbc <f_mount>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80016ee:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80016f2:	7013      	strb	r3, [r2, #0]

	if(fResult != FR_OK)
 80016f4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80016f8:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00c      	beq.n	800171c <AddLineToFile+0x1e0>
	{
		strcpy(ErrorMessage, "Failed to unmount SD");
 8001702:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <AddLineToFile+0x1fc>)
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <AddLineToFile+0x210>)
 8001706:	4615      	mov	r5, r2
 8001708:	461c      	mov	r4, r3
 800170a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170c:	6028      	str	r0, [r5, #0]
 800170e:	6069      	str	r1, [r5, #4]
 8001710:	60aa      	str	r2, [r5, #8]
 8001712:	60eb      	str	r3, [r5, #12]
 8001714:	6820      	ldr	r0, [r4, #0]
 8001716:	6128      	str	r0, [r5, #16]
 8001718:	7923      	ldrb	r3, [r4, #4]
 800171a:	752b      	strb	r3, [r5, #20]
	}

	return fResult;
 800171c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001720:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3

  //fResult = f_open(&file, fileName, FA_READ);
  //f_read (&file, buffer, f_size(&file), &br);
  //f_close(&file);
}
 8001728:	4618      	mov	r0, r3
 800172a:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 800172e:	3738      	adds	r7, #56	; 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bdb0      	pop	{r4, r5, r7, pc}
 8001734:	0800819c 	.word	0x0800819c
 8001738:	20000418 	.word	0x20000418
 800173c:	080081a0 	.word	0x080081a0
 8001740:	080081b4 	.word	0x080081b4
 8001744:	080081cc 	.word	0x080081cc
 8001748:	080081e8 	.word	0x080081e8
 800174c:	08008200 	.word	0x08008200

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_MspInit+0x4c>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_MspInit+0x4c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_MspInit+0x4c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_MspInit+0x4c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800179e:	2007      	movs	r0, #7
 80017a0:	f000 fece 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_ADC_MspInit+0x7c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d127      	bne.n	8001822 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_ADC_MspInit+0x80>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a15      	ldr	r2, [pc, #84]	; (8001830 <HAL_ADC_MspInit+0x80>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_ADC_MspInit+0x80>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_ADC_MspInit+0x80>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_ADC_MspInit+0x80>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_ADC_MspInit+0x80>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GasSensor_Pin;
 800180a:	2320      	movs	r3, #32
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180e:	2303      	movs	r3, #3
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GasSensor_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_ADC_MspInit+0x84>)
 800181e:	f000 fed1 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	; 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40012000 	.word	0x40012000
 8001830:	40023800 	.word	0x40023800
 8001834:	40020800 	.word	0x40020800

08001838 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a05      	ldr	r2, [pc, #20]	; (800185c <HAL_RTC_MspInit+0x24>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d102      	bne.n	8001850 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_RTC_MspInit+0x28>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40002800 	.word	0x40002800
 8001860:	42470e3c 	.word	0x42470e3c

08001864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_SPI_MspInit+0x84>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d12c      	bne.n	80018e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_SPI_MspInit+0x88>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_SPI_MspInit+0x88>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_SPI_MspInit+0x88>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_SPI_MspInit+0x88>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_SPI_MspInit+0x88>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_SPI_MspInit+0x88>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d0:	2305      	movs	r3, #5
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <HAL_SPI_MspInit+0x8c>)
 80018dc:	f000 fe72 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40003800 	.word	0x40003800
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020400 	.word	0x40020400

080018f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_TIM_Base_MspInit+0x48>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d115      	bne.n	8001932 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_TIM_Base_MspInit+0x4c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_TIM_Base_MspInit+0x4c>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_TIM_Base_MspInit+0x4c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	2019      	movs	r0, #25
 8001928:	f000 fe15 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800192c:	2019      	movs	r0, #25
 800192e:	f000 fe2e 	bl	800258e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40010000 	.word	0x40010000
 8001940:	40023800 	.word	0x40023800

08001944 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <SDTimer_Handler+0x40>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <SDTimer_Handler+0x1c>
	{
		Timer1--;
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <SDTimer_Handler+0x40>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <SDTimer_Handler+0x40>)
 800195e:	701a      	strb	r2, [r3, #0]
	}

	if(Timer2 > 0)
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <SDTimer_Handler+0x44>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d006      	beq.n	8001978 <SDTimer_Handler+0x34>
	{
		Timer2--;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <SDTimer_Handler+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3b01      	subs	r3, #1
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SDTimer_Handler+0x44>)
 8001976:	701a      	strb	r2, [r3, #0]
	}
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000801 	.word	0x20000801
 8001988:	20000800 	.word	0x20000800

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <SysTick_Handler+0x30>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <SysTick_Handler+0x30>)
 80019ec:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <SysTick_Handler+0x30>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d904      	bls.n	8001a02 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Handler+0x30>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80019fe:	f7ff ffa1 	bl	8001944 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a02:	f000 f913 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200000c0 	.word	0x200000c0

08001a10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0a2      	sub	sp, #136	; 0x88
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8001a16:	2201      	movs	r2, #1
 8001a18:	2120      	movs	r1, #32
 8001a1a:	481e      	ldr	r0, [pc, #120]	; (8001a94 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8001a1c:	f000 ff54 	bl	80028c8 <HAL_GPIO_WritePin>

	uint16_t sensorValue = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	char fileName[64] = "";
 8001a26:	2300      	movs	r3, #0
 8001a28:	647b      	str	r3, [r7, #68]	; 0x44
 8001a2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a2e:	223c      	movs	r2, #60	; 0x3c
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 ff5c 	bl	80078f0 <memset>
	char line[64] = "";
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	223c      	movs	r2, #60	; 0x3c
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f005 ff53 	bl	80078f0 <memset>

	sensorValue = GetSensorValue();
 8001a4a:	f7ff fd11 	bl	8001470 <GetSensorValue>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	FormatOutputLine(line, sensorValue);
 8001a54:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fd21 	bl	80014a4 <FormatOutputLine>
	GetFileName(fileName);
 8001a62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fd44 	bl	80014f4 <GetFileName>
	AddLineToFile(fileName, line);
 8001a6c:	1d3a      	adds	r2, r7, #4
 8001a6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fd61 	bl	800153c <AddLineToFile>

	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8001a80:	f000 ff22 	bl	80028c8 <HAL_GPIO_WritePin>

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8001a86:	f002 fbca 	bl	800421e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3788      	adds	r7, #136	; 0x88
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40020000 	.word	0x40020000
 8001a98:	200003d4 	.word	0x200003d4

08001a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <_sbrk+0x5c>)
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <_sbrk+0x60>)
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <_sbrk+0x64>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <_sbrk+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001acc:	f005 fee6 	bl	800789c <__errno>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	e009      	b.n	8001af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <_sbrk+0x64>)
 8001aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20018000 	.word	0x20018000
 8001afc:	00000400 	.word	0x00000400
 8001b00:	200000c4 	.word	0x200000c4
 8001b04:	20002880 	.word	0x20002880

08001b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <SystemInit+0x28>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <SystemInit+0x28>)
 8001b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SystemInit+0x28>)
 8001b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b22:	609a      	str	r2, [r3, #8]
#endif
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b3a:	e003      	b.n	8001b44 <LoopCopyDataInit>

08001b3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b42:	3104      	adds	r1, #4

08001b44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b44:	480b      	ldr	r0, [pc, #44]	; (8001b74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b4c:	d3f6      	bcc.n	8001b3c <CopyDataInit>
  ldr  r2, =_sbss
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b50:	e002      	b.n	8001b58 <LoopFillZerobss>

08001b52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b54:	f842 3b04 	str.w	r3, [r2], #4

08001b58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b5c:	d3f9      	bcc.n	8001b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b5e:	f7ff ffd3 	bl	8001b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f005 fea1 	bl	80078a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b66:	f7ff f9e9 	bl	8000f3c <main>
  bx  lr    
 8001b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b6c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001b70:	080086f4 	.word	0x080086f4
  ldr  r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b78:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001b7c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001b80:	2000287c 	.word	0x2000287c

08001b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC_IRQHandler>
	...

08001b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <HAL_Init+0x40>)
 8001b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_Init+0x40>)
 8001b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_Init+0x40>)
 8001baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 fcc5 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 f808 	bl	8001bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbc:	f7ff fdd0 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x54>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x58>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fcdd 	bl	80025aa <HAL_SYSTICK_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00e      	b.n	8001c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d80a      	bhi.n	8001c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f000 fca5 	bl	8002556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c0c:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <HAL_InitTick+0x5c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000004 	.word	0x20000004
 8001c24:	2000000c 	.word	0x2000000c
 8001c28:	20000008 	.word	0x20000008

08001c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x20>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x24>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_IncTick+0x24>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000000c 	.word	0x2000000c
 8001c50:	20000804 	.word	0x20000804

08001c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_GetTick+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000804 	.word	0x20000804

08001c6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e033      	b.n	8001cea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fd90 	bl	80017b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cb2:	f023 0302 	bic.w	r3, r3, #2
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fa72 	bl	80021a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cda:	e001      	b.n	8001ce0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Start+0x1a>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e08a      	b.n	8001e24 <HAL_ADC_Start+0x130>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d018      	beq.n	8001d56 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d34:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <HAL_ADC_Start+0x13c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a3e      	ldr	r2, [pc, #248]	; (8001e34 <HAL_ADC_Start+0x140>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9a      	lsrs	r2, r3, #18
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d48:	e002      	b.n	8001d50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f9      	bne.n	8001d4a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d15e      	bne.n	8001e22 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da2:	d106      	bne.n	8001db2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	f023 0206 	bic.w	r2, r3, #6
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44
 8001db0:	e002      	b.n	8001db8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_ADC_Start+0x144>)
 8001dc2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dcc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d11c      	bne.n	8001e22 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	e013      	b.n	8001e22 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <HAL_ADC_Start+0x148>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d10e      	bne.n	8001e22 <HAL_ADC_Start+0x12e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d107      	bne.n	8001e22 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e20:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	20000004 	.word	0x20000004
 8001e34:	431bde83 	.word	0x431bde83
 8001e38:	40012300 	.word	0x40012300
 8001e3c:	40012000 	.word	0x40012000

08001e40 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5c:	d113      	bne.n	8001e86 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6c:	d10b      	bne.n	8001e86 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f043 0220 	orr.w	r2, r3, #32
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e05c      	b.n	8001f40 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e86:	f7ff fee5 	bl	8001c54 <HAL_GetTick>
 8001e8a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e8c:	e01a      	b.n	8001ec4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d016      	beq.n	8001ec4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_ADC_PollForConversion+0x6c>
 8001e9c:	f7ff feda 	bl	8001c54 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d20b      	bcs.n	8001ec4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f043 0204 	orr.w	r2, r3, #4
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e03d      	b.n	8001f40 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d1dd      	bne.n	8001e8e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f06f 0212 	mvn.w	r2, #18
 8001eda:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d123      	bne.n	8001f3e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d11f      	bne.n	8001f3e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d111      	bne.n	8001f3e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1c>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e105      	b.n	800218c <HAL_ADC_ConfigChannel+0x228>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b09      	cmp	r3, #9
 8001f8e:	d925      	bls.n	8001fdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68d9      	ldr	r1, [r3, #12]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b1e      	subs	r3, #30
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43da      	mvns	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68d9      	ldr	r1, [r3, #12]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	4603      	mov	r3, r0
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4403      	add	r3, r0
 8001fce:	3b1e      	subs	r3, #30
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	e022      	b.n	8002022 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6919      	ldr	r1, [r3, #16]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6919      	ldr	r1, [r3, #16]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	4618      	mov	r0, r3
 8002012:	4603      	mov	r3, r0
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4403      	add	r3, r0
 8002018:	409a      	lsls	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b06      	cmp	r3, #6
 8002028:	d824      	bhi.n	8002074 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b05      	subs	r3, #5
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b05      	subs	r3, #5
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	635a      	str	r2, [r3, #52]	; 0x34
 8002072:	e04c      	b.n	800210e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b0c      	cmp	r3, #12
 800207a:	d824      	bhi.n	80020c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	3b23      	subs	r3, #35	; 0x23
 800208e:	221f      	movs	r2, #31
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43da      	mvns	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	400a      	ands	r2, r1
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	4618      	mov	r0, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b23      	subs	r3, #35	; 0x23
 80020b8:	fa00 f203 	lsl.w	r2, r0, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
 80020c4:	e023      	b.n	800210e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	3b41      	subs	r3, #65	; 0x41
 80020d8:	221f      	movs	r2, #31
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	400a      	ands	r2, r1
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	4618      	mov	r0, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	3b41      	subs	r3, #65	; 0x41
 8002102:	fa00 f203 	lsl.w	r2, r0, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_ADC_ConfigChannel+0x234>)
 8002110:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a21      	ldr	r2, [pc, #132]	; (800219c <HAL_ADC_ConfigChannel+0x238>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d109      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x1cc>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b12      	cmp	r3, #18
 8002122:	d105      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a19      	ldr	r2, [pc, #100]	; (800219c <HAL_ADC_ConfigChannel+0x238>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d123      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x21e>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b10      	cmp	r3, #16
 8002140:	d003      	beq.n	800214a <HAL_ADC_ConfigChannel+0x1e6>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b11      	cmp	r3, #17
 8002148:	d11b      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b10      	cmp	r3, #16
 800215c:	d111      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_ADC_ConfigChannel+0x23c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_ADC_ConfigChannel+0x240>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	0c9a      	lsrs	r2, r3, #18
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002174:	e002      	b.n	800217c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3b01      	subs	r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f9      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40012300 	.word	0x40012300
 800219c:	40012000 	.word	0x40012000
 80021a0:	20000004 	.word	0x20000004
 80021a4:	431bde83 	.word	0x431bde83

080021a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021b0:	4b79      	ldr	r3, [pc, #484]	; (8002398 <ADC_Init+0x1f0>)
 80021b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	021a      	lsls	r2, r3, #8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	4a58      	ldr	r2, [pc, #352]	; (800239c <ADC_Init+0x1f4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d022      	beq.n	8002286 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800224e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6899      	ldr	r1, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6899      	ldr	r1, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e00f      	b.n	80022a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0202 	bic.w	r2, r2, #2
 80022b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6899      	ldr	r1, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7e1b      	ldrb	r3, [r3, #24]
 80022c0:	005a      	lsls	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01b      	beq.n	800230c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6859      	ldr	r1, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	3b01      	subs	r3, #1
 8002300:	035a      	lsls	r2, r3, #13
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	e007      	b.n	800231c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	3b01      	subs	r3, #1
 8002338:	051a      	lsls	r2, r3, #20
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6899      	ldr	r1, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800235e:	025a      	lsls	r2, r3, #9
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	029a      	lsls	r2, r3, #10
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	609a      	str	r2, [r3, #8]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40012300 	.word	0x40012300
 800239c:	0f000001 	.word	0x0f000001

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <__NVIC_EnableIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250c:	d301      	bcc.n	8002512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2301      	movs	r3, #1
 8002510:	e00f      	b.n	8002532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <SysTick_Config+0x40>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251a:	210f      	movs	r1, #15
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f7ff ff8e 	bl	8002440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <SysTick_Config+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <SysTick_Config+0x40>)
 800252c:	2207      	movs	r2, #7
 800252e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff29 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002568:	f7ff ff3e 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 800256c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff ff8e 	bl	8002494 <NVIC_EncodePriority>
 8002578:	4602      	mov	r2, r0
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff5d 	bl	8002440 <__NVIC_SetPriority>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff31 	bl	8002404 <__NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffa2 	bl	80024fc <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e159      	b.n	8002894 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 8148 	bne.w	800288e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d00b      	beq.n	800261e <HAL_GPIO_Init+0x5a>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d007      	beq.n	800261e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002612:	2b11      	cmp	r3, #17
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b12      	cmp	r3, #18
 800261c:	d130      	bne.n	8002680 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 0201 	and.w	r2, r3, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0xfc>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b12      	cmp	r3, #18
 80026be:	d123      	bne.n	8002708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80a2 	beq.w	800288e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b56      	ldr	r3, [pc, #344]	; (80028a8 <HAL_GPIO_Init+0x2e4>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a55      	ldr	r2, [pc, #340]	; (80028a8 <HAL_GPIO_Init+0x2e4>)
 8002754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_GPIO_Init+0x2e4>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002766:	4a51      	ldr	r2, [pc, #324]	; (80028ac <HAL_GPIO_Init+0x2e8>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a48      	ldr	r2, [pc, #288]	; (80028b0 <HAL_GPIO_Init+0x2ec>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d019      	beq.n	80027c6 <HAL_GPIO_Init+0x202>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a47      	ldr	r2, [pc, #284]	; (80028b4 <HAL_GPIO_Init+0x2f0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_GPIO_Init+0x1fe>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a46      	ldr	r2, [pc, #280]	; (80028b8 <HAL_GPIO_Init+0x2f4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00d      	beq.n	80027be <HAL_GPIO_Init+0x1fa>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a45      	ldr	r2, [pc, #276]	; (80028bc <HAL_GPIO_Init+0x2f8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d007      	beq.n	80027ba <HAL_GPIO_Init+0x1f6>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a44      	ldr	r2, [pc, #272]	; (80028c0 <HAL_GPIO_Init+0x2fc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_GPIO_Init+0x1f2>
 80027b2:	2304      	movs	r3, #4
 80027b4:	e008      	b.n	80027c8 <HAL_GPIO_Init+0x204>
 80027b6:	2307      	movs	r3, #7
 80027b8:	e006      	b.n	80027c8 <HAL_GPIO_Init+0x204>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e004      	b.n	80027c8 <HAL_GPIO_Init+0x204>
 80027be:	2302      	movs	r3, #2
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_Init+0x204>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_GPIO_Init+0x204>
 80027c6:	2300      	movs	r3, #0
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	f002 0203 	and.w	r2, r2, #3
 80027ce:	0092      	lsls	r2, r2, #2
 80027d0:	4093      	lsls	r3, r2
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d8:	4934      	ldr	r1, [pc, #208]	; (80028ac <HAL_GPIO_Init+0x2e8>)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3302      	adds	r3, #2
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e6:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_GPIO_Init+0x300>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280a:	4a2e      	ldr	r2, [pc, #184]	; (80028c4 <HAL_GPIO_Init+0x300>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002810:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_GPIO_Init+0x300>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002834:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <HAL_GPIO_Init+0x300>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_GPIO_Init+0x300>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285e:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <HAL_GPIO_Init+0x300>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_GPIO_Init+0x300>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002888:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_GPIO_Init+0x300>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3301      	adds	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b0f      	cmp	r3, #15
 8002898:	f67f aea2 	bls.w	80025e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800289c:	bf00      	nop
 800289e:	3724      	adds	r7, #36	; 0x24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40020400 	.word	0x40020400
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40013c00 	.word	0x40013c00

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e4:	e003      	b.n	80028ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e25b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d075      	beq.n	8002a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800291a:	4ba3      	ldr	r3, [pc, #652]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b04      	cmp	r3, #4
 8002924:	d00c      	beq.n	8002940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002926:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800292e:	2b08      	cmp	r3, #8
 8002930:	d112      	bne.n	8002958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b9d      	ldr	r3, [pc, #628]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800293e:	d10b      	bne.n	8002958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	4b99      	ldr	r3, [pc, #612]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d05b      	beq.n	8002a04 <HAL_RCC_OscConfig+0x108>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d157      	bne.n	8002a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e236      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002960:	d106      	bne.n	8002970 <HAL_RCC_OscConfig+0x74>
 8002962:	4b91      	ldr	r3, [pc, #580]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a90      	ldr	r2, [pc, #576]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0xb0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x98>
 800297a:	4b8b      	ldr	r3, [pc, #556]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a8a      	ldr	r2, [pc, #552]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b88      	ldr	r3, [pc, #544]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a87      	ldr	r2, [pc, #540]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xb0>
 8002994:	4b84      	ldr	r3, [pc, #528]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a83      	ldr	r2, [pc, #524]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b81      	ldr	r3, [pc, #516]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a80      	ldr	r2, [pc, #512]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff f94e 	bl	8001c54 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029bc:	f7ff f94a 	bl	8001c54 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1fb      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0xc0>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff f93a 	bl	8001c54 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7ff f936 	bl	8001c54 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1e7      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	4b6c      	ldr	r3, [pc, #432]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0xe8>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d063      	beq.n	8002ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a12:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1e:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d11c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a36:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_RCC_OscConfig+0x152>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1bb      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4e:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4952      	ldr	r1, [pc, #328]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	e03a      	b.n	8002ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d020      	beq.n	8002aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCC_OscConfig+0x2b0>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7ff f8ef 	bl	8001c54 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7ff f8eb 	bl	8001c54 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e19c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8c:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a98:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4940      	ldr	r1, [pc, #256]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
 8002aac:	e015      	b.n	8002ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aae:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_RCC_OscConfig+0x2b0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7ff f8ce 	bl	8001c54 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abc:	f7ff f8ca 	bl	8001c54 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e17b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d030      	beq.n	8002b48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d016      	beq.n	8002b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aee:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <HAL_RCC_OscConfig+0x2b4>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7ff f8ae 	bl	8001c54 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002afc:	f7ff f8aa 	bl	8001c54 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e15b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x200>
 8002b1a:	e015      	b.n	8002b48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_OscConfig+0x2b4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7ff f897 	bl	8001c54 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b2a:	f7ff f893 	bl	8001c54 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e144      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f0      	bne.n	8002b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a0 	beq.w	8002c96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d121      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9e:	f7ff f859 	bl	8001c54 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e011      	b.n	8002bca <HAL_RCC_OscConfig+0x2ce>
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	42470000 	.word	0x42470000
 8002bb0:	42470e80 	.word	0x42470e80
 8002bb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb8:	f7ff f84c 	bl	8001c54 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0fd      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <HAL_RCC_OscConfig+0x4d4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d106      	bne.n	8002bec <HAL_RCC_OscConfig+0x2f0>
 8002bde:	4b7d      	ldr	r3, [pc, #500]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	4a7c      	ldr	r2, [pc, #496]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bea:	e01c      	b.n	8002c26 <HAL_RCC_OscConfig+0x32a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d10c      	bne.n	8002c0e <HAL_RCC_OscConfig+0x312>
 8002bf4:	4b77      	ldr	r3, [pc, #476]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a76      	ldr	r2, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002c00:	4b74      	ldr	r3, [pc, #464]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a73      	ldr	r2, [pc, #460]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	e00b      	b.n	8002c26 <HAL_RCC_OscConfig+0x32a>
 8002c0e:	4b71      	ldr	r3, [pc, #452]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a70      	ldr	r2, [pc, #448]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	4b6e      	ldr	r3, [pc, #440]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a6d      	ldr	r2, [pc, #436]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d015      	beq.n	8002c5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7ff f811 	bl	8001c54 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7ff f80d 	bl	8001c54 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0bc      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4c:	4b61      	ldr	r3, [pc, #388]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0ee      	beq.n	8002c36 <HAL_RCC_OscConfig+0x33a>
 8002c58:	e014      	b.n	8002c84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fffb 	bl	8001c54 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fe fff7 	bl	8001c54 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0a6      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c78:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ee      	bne.n	8002c62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d105      	bne.n	8002c96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8a:	4b52      	ldr	r3, [pc, #328]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a51      	ldr	r2, [pc, #324]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8092 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca0:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d05c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d141      	bne.n	8002d38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb4:	4b48      	ldr	r3, [pc, #288]	; (8002dd8 <HAL_RCC_OscConfig+0x4dc>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe ffcb 	bl	8001c54 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe ffc7 	bl	8001c54 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e078      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd4:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	019b      	lsls	r3, r3, #6
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	4933      	ldr	r1, [pc, #204]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0a:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_RCC_OscConfig+0x4dc>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe ffa0 	bl	8001c54 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe ff9c 	bl	8001c54 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e04d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x41c>
 8002d36:	e045      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x4dc>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7fe ff89 	bl	8001c54 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d46:	f7fe ff85 	bl	8001c54 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e036      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d58:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x44a>
 8002d64:	e02e      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e029      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <HAL_RCC_OscConfig+0x4d8>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d11c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d115      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10d      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d106      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470060 	.word	0x42470060

08002ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0cc      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df0:	4b68      	ldr	r3, [pc, #416]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d90c      	bls.n	8002e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0b8      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d020      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e30:	4b59      	ldr	r3, [pc, #356]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a58      	ldr	r2, [pc, #352]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e48:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4a52      	ldr	r2, [pc, #328]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e54:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	494d      	ldr	r1, [pc, #308]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d044      	beq.n	8002efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	4b47      	ldr	r3, [pc, #284]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d119      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e07f      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9a:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e06f      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e067      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eba:	4b37      	ldr	r3, [pc, #220]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4934      	ldr	r1, [pc, #208]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fec2 	bl	8001c54 <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7fe febe 	bl	8001c54 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e04f      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 020c 	and.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1eb      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002efc:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d20c      	bcs.n	8002f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e032      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4916      	ldr	r1, [pc, #88]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	490e      	ldr	r1, [pc, #56]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f62:	f000 f821 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f66:	4601      	mov	r1, r0
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	fa21 f303 	lsr.w	r3, r1, r3
 8002f7a:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe fe22 	bl	8001bcc <HAL_InitTick>

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023c00 	.word	0x40023c00
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	08008260 	.word	0x08008260
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	20000008 	.word	0x20000008

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fbe:	4b63      	ldr	r3, [pc, #396]	; (800314c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d007      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x32>
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d008      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x38>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 80b4 	bne.w	800313c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd4:	4b5e      	ldr	r3, [pc, #376]	; (8003150 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fd6:	60bb      	str	r3, [r7, #8]
       break;
 8002fd8:	e0b3      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fda:	4b5e      	ldr	r3, [pc, #376]	; (8003154 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002fdc:	60bb      	str	r3, [r7, #8]
      break;
 8002fde:	e0b0      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe0:	4b5a      	ldr	r3, [pc, #360]	; (800314c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fea:	4b58      	ldr	r3, [pc, #352]	; (800314c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d04a      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff6:	4b55      	ldr	r3, [pc, #340]	; (800314c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	f04f 0400 	mov.w	r4, #0
 8003000:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	ea03 0501 	and.w	r5, r3, r1
 800300c:	ea04 0602 	and.w	r6, r4, r2
 8003010:	4629      	mov	r1, r5
 8003012:	4632      	mov	r2, r6
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	f04f 0400 	mov.w	r4, #0
 800301c:	0154      	lsls	r4, r2, #5
 800301e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003022:	014b      	lsls	r3, r1, #5
 8003024:	4619      	mov	r1, r3
 8003026:	4622      	mov	r2, r4
 8003028:	1b49      	subs	r1, r1, r5
 800302a:	eb62 0206 	sbc.w	r2, r2, r6
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	f04f 0400 	mov.w	r4, #0
 8003036:	0194      	lsls	r4, r2, #6
 8003038:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800303c:	018b      	lsls	r3, r1, #6
 800303e:	1a5b      	subs	r3, r3, r1
 8003040:	eb64 0402 	sbc.w	r4, r4, r2
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	00e2      	lsls	r2, r4, #3
 800304e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003052:	00d9      	lsls	r1, r3, #3
 8003054:	460b      	mov	r3, r1
 8003056:	4614      	mov	r4, r2
 8003058:	195b      	adds	r3, r3, r5
 800305a:	eb44 0406 	adc.w	r4, r4, r6
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	0262      	lsls	r2, r4, #9
 8003068:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800306c:	0259      	lsls	r1, r3, #9
 800306e:	460b      	mov	r3, r1
 8003070:	4614      	mov	r4, r2
 8003072:	4618      	mov	r0, r3
 8003074:	4621      	mov	r1, r4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f04f 0400 	mov.w	r4, #0
 800307c:	461a      	mov	r2, r3
 800307e:	4623      	mov	r3, r4
 8003080:	f7fd f906 	bl	8000290 <__aeabi_uldivmod>
 8003084:	4603      	mov	r3, r0
 8003086:	460c      	mov	r4, r1
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e049      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308c:	4b2f      	ldr	r3, [pc, #188]	; (800314c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	f04f 0400 	mov.w	r4, #0
 8003096:	f240 11ff 	movw	r1, #511	; 0x1ff
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	ea03 0501 	and.w	r5, r3, r1
 80030a2:	ea04 0602 	and.w	r6, r4, r2
 80030a6:	4629      	mov	r1, r5
 80030a8:	4632      	mov	r2, r6
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	f04f 0400 	mov.w	r4, #0
 80030b2:	0154      	lsls	r4, r2, #5
 80030b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030b8:	014b      	lsls	r3, r1, #5
 80030ba:	4619      	mov	r1, r3
 80030bc:	4622      	mov	r2, r4
 80030be:	1b49      	subs	r1, r1, r5
 80030c0:	eb62 0206 	sbc.w	r2, r2, r6
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	f04f 0400 	mov.w	r4, #0
 80030cc:	0194      	lsls	r4, r2, #6
 80030ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030d2:	018b      	lsls	r3, r1, #6
 80030d4:	1a5b      	subs	r3, r3, r1
 80030d6:	eb64 0402 	sbc.w	r4, r4, r2
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	00e2      	lsls	r2, r4, #3
 80030e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030e8:	00d9      	lsls	r1, r3, #3
 80030ea:	460b      	mov	r3, r1
 80030ec:	4614      	mov	r4, r2
 80030ee:	195b      	adds	r3, r3, r5
 80030f0:	eb44 0406 	adc.w	r4, r4, r6
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	02a2      	lsls	r2, r4, #10
 80030fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003102:	0299      	lsls	r1, r3, #10
 8003104:	460b      	mov	r3, r1
 8003106:	4614      	mov	r4, r2
 8003108:	4618      	mov	r0, r3
 800310a:	4621      	mov	r1, r4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f04f 0400 	mov.w	r4, #0
 8003112:	461a      	mov	r2, r3
 8003114:	4623      	mov	r3, r4
 8003116:	f7fd f8bb 	bl	8000290 <__aeabi_uldivmod>
 800311a:	4603      	mov	r3, r0
 800311c:	460c      	mov	r4, r1
 800311e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	60bb      	str	r3, [r7, #8]
      break;
 800313a:	e002      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800313e:	60bb      	str	r3, [r7, #8]
      break;
 8003140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003142:	68bb      	ldr	r3, [r7, #8]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800314c:	40023800 	.word	0x40023800
 8003150:	00f42400 	.word	0x00f42400
 8003154:	007a1200 	.word	0x007a1200

08003158 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800317c:	2b00      	cmp	r3, #0
 800317e:	d035      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003180:	4b67      	ldr	r3, [pc, #412]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003186:	f7fe fd65 	bl	8001c54 <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800318e:	f7fe fd61 	bl	8001c54 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0ba      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031a0:	4b60      	ldr	r3, [pc, #384]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f0      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	019a      	lsls	r2, r3, #6
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	071b      	lsls	r3, r3, #28
 80031b8:	495a      	ldr	r1, [pc, #360]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031c0:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031c6:	f7fe fd45 	bl	8001c54 <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031ce:	f7fe fd41 	bl	8001c54 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e09a      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031e0:	4b50      	ldr	r3, [pc, #320]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8083 	beq.w	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a48      	ldr	r2, [pc, #288]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b46      	ldr	r3, [pc, #280]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003216:	4b44      	ldr	r3, [pc, #272]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a43      	ldr	r2, [pc, #268]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003220:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003222:	f7fe fd17 	bl	8001c54 <HAL_GetTick>
 8003226:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003228:	e008      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800322a:	f7fe fd13 	bl	8001c54 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e06c      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800323c:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003250:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d02f      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	429a      	cmp	r2, r3
 8003264:	d028      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003270:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003276:	4b2d      	ldr	r3, [pc, #180]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800327c:	4a29      	ldr	r2, [pc, #164]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003282:	4b28      	ldr	r3, [pc, #160]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d114      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800328e:	f7fe fce1 	bl	8001c54 <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	e00a      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe fcdd 	bl	8001c54 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e034      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ee      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032c4:	d10d      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80032c6:	4b17      	ldr	r3, [pc, #92]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	4912      	ldr	r1, [pc, #72]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	608b      	str	r3, [r1, #8]
 80032e0:	e005      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	4a0f      	ldr	r2, [pc, #60]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032ec:	6093      	str	r3, [r2, #8]
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fa:	490a      	ldr	r1, [pc, #40]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7c1a      	ldrb	r2, [r3, #16]
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003312:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	42470068 	.word	0x42470068
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000
 800332c:	42470e40 	.word	0x42470e40
 8003330:	424711e0 	.word	0x424711e0

08003334 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e083      	b.n	800344e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7f5b      	ldrb	r3, [r3, #29]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe fa6e 	bl	8001838 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	22ca      	movs	r2, #202	; 0xca
 8003368:	625a      	str	r2, [r3, #36]	; 0x24
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2253      	movs	r2, #83	; 0x53
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 faa8 	bl	80038c8 <RTC_EnterInitMode>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	22ff      	movs	r2, #255	; 0xff
 8003384:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2204      	movs	r2, #4
 800338a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e05e      	b.n	800344e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800339e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68d2      	ldr	r2, [r2, #12]
 80033ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6919      	ldr	r1, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	041a      	lsls	r2, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10e      	bne.n	800341c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fa3a 	bl	8003878 <HAL_RTC_WaitForSynchro>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	22ff      	movs	r2, #255	; 0xff
 8003410:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2204      	movs	r2, #4
 8003416:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e018      	b.n	800344e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	22ff      	movs	r2, #255	; 0xff
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800344c:	2300      	movs	r3, #0
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003456:	b590      	push	{r4, r7, lr}
 8003458:	b087      	sub	sp, #28
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	7f1b      	ldrb	r3, [r3, #28]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_RTC_SetTime+0x1c>
 800346e:	2302      	movs	r3, #2
 8003470:	e0aa      	b.n	80035c8 <HAL_RTC_SetTime+0x172>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2202      	movs	r2, #2
 800347c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d126      	bne.n	80034d2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2200      	movs	r2, #0
 8003496:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fa3f 	bl	8003920 <RTC_ByteToBcd2>
 80034a2:	4603      	mov	r3, r0
 80034a4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fa38 	bl	8003920 <RTC_ByteToBcd2>
 80034b0:	4603      	mov	r3, r0
 80034b2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034b4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	789b      	ldrb	r3, [r3, #2]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fa30 	bl	8003920 <RTC_ByteToBcd2>
 80034c0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80034c2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	78db      	ldrb	r3, [r3, #3]
 80034ca:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	e018      	b.n	8003504 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2200      	movs	r2, #0
 80034e4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80034f2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80034f8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	78db      	ldrb	r3, [r3, #3]
 80034fe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	22ca      	movs	r2, #202	; 0xca
 800350a:	625a      	str	r2, [r3, #36]	; 0x24
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2253      	movs	r2, #83	; 0x53
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f9d7 	bl	80038c8 <RTC_EnterInitMode>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	22ff      	movs	r2, #255	; 0xff
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2204      	movs	r2, #4
 800352c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e047      	b.n	80035c8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003542:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003546:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003556:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	431a      	orrs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800357e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d111      	bne.n	80035b2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f972 	bl	8003878 <HAL_RTC_WaitForSynchro>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	22ff      	movs	r2, #255	; 0xff
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2204      	movs	r2, #4
 80035a6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00a      	b.n	80035c8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	22ff      	movs	r2, #255	; 0xff
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80035c6:	2300      	movs	r3, #0
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd90      	pop	{r4, r7, pc}

080035d0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003602:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003606:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	0c1b      	lsrs	r3, r3, #16
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003622:	b2da      	uxtb	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11a      	bne.n	8003682 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f983 	bl	800395c <RTC_Bcd2ToByte>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f97a 	bl	800395c <RTC_Bcd2ToByte>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	789b      	ldrb	r3, [r3, #2]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f971 	bl	800395c <RTC_Bcd2ToByte>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	7f1b      	ldrb	r3, [r3, #28]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_RTC_SetDate+0x1c>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e094      	b.n	80037d2 <HAL_RTC_SetDate+0x146>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2202      	movs	r2, #2
 80036b2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10e      	bne.n	80036d8 <HAL_RTC_SetDate+0x4c>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	f023 0310 	bic.w	r3, r3, #16
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	330a      	adds	r3, #10
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11c      	bne.n	8003718 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	78db      	ldrb	r3, [r3, #3]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f91c 	bl	8003920 <RTC_ByteToBcd2>
 80036e8:	4603      	mov	r3, r0
 80036ea:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	785b      	ldrb	r3, [r3, #1]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f915 	bl	8003920 <RTC_ByteToBcd2>
 80036f6:	4603      	mov	r3, r0
 80036f8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036fa:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	789b      	ldrb	r3, [r3, #2]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 f90d 	bl	8003920 <RTC_ByteToBcd2>
 8003706:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003708:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e00e      	b.n	8003736 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	78db      	ldrb	r3, [r3, #3]
 800371c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003724:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800372a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	22ca      	movs	r2, #202	; 0xca
 800373c:	625a      	str	r2, [r3, #36]	; 0x24
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2253      	movs	r2, #83	; 0x53
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f8be 	bl	80038c8 <RTC_EnterInitMode>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	22ff      	movs	r2, #255	; 0xff
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2204      	movs	r2, #4
 800375e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e033      	b.n	80037d2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003774:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003778:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003788:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d111      	bne.n	80037bc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f86d 	bl	8003878 <HAL_RTC_WaitForSynchro>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	22ff      	movs	r2, #255	; 0xff
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2204      	movs	r2, #4
 80037b0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e00a      	b.n	80037d2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	22ff      	movs	r2, #255	; 0xff
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd90      	pop	{r4, r7, pc}

080037da <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b086      	sub	sp, #24
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	0b5b      	lsrs	r3, r3, #13
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d11a      	bne.n	800386e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	78db      	ldrb	r3, [r3, #3]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f88d 	bl	800395c <RTC_Bcd2ToByte>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 f884 	bl	800395c <RTC_Bcd2ToByte>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	789b      	ldrb	r3, [r3, #2]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f87b 	bl	800395c <RTC_Bcd2ToByte>
 8003866:	4603      	mov	r3, r0
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003892:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003894:	f7fe f9de 	bl	8001c54 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800389a:	e009      	b.n	80038b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800389c:	f7fe f9da 	bl	8001c54 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038aa:	d901      	bls.n	80038b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e007      	b.n	80038c0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0ee      	beq.n	800389c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d119      	bne.n	8003916 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038ec:	f7fe f9b2 	bl	8001c54 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038f2:	e009      	b.n	8003908 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80038f4:	f7fe f9ae 	bl	8001c54 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003902:	d901      	bls.n	8003908 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e007      	b.n	8003918 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0ee      	beq.n	80038f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800392e:	e005      	b.n	800393c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	3b0a      	subs	r3, #10
 800393a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	2b09      	cmp	r3, #9
 8003940:	d8f6      	bhi.n	8003930 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	b2da      	uxtb	r2, r3
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	4313      	orrs	r3, r2
 800394e:	b2db      	uxtb	r3, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	b2da      	uxtb	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	4413      	add	r3, r2
 800398a:	b2db      	uxtb	r3, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e056      	b.n	8003a58 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fd ff4d 	bl	8001864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	ea42 0103 	orr.w	r1, r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	f003 0104 	and.w	r1, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_SPI_Transmit+0x22>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e11e      	b.n	8003cc0 <HAL_SPI_Transmit+0x260>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a8a:	f7fe f8e3 	bl	8001c54 <HAL_GetTick>
 8003a8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d002      	beq.n	8003aa6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aa4:	e103      	b.n	8003cae <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_SPI_Transmit+0x52>
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ab6:	e0fa      	b.n	8003cae <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2203      	movs	r2, #3
 8003abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afe:	d107      	bne.n	8003b10 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d007      	beq.n	8003b2e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b36:	d14b      	bne.n	8003bd0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_SPI_Transmit+0xe6>
 8003b40:	8afb      	ldrh	r3, [r7, #22]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d13e      	bne.n	8003bc4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	881a      	ldrh	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	1c9a      	adds	r2, r3, #2
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b6a:	e02b      	b.n	8003bc4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d112      	bne.n	8003ba0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	881a      	ldrh	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	1c9a      	adds	r2, r3, #2
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b9e:	e011      	b.n	8003bc4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba0:	f7fe f858 	bl	8001c54 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d803      	bhi.n	8003bb8 <HAL_SPI_Transmit+0x158>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d102      	bne.n	8003bbe <HAL_SPI_Transmit+0x15e>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bc2:	e074      	b.n	8003cae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1ce      	bne.n	8003b6c <HAL_SPI_Transmit+0x10c>
 8003bce:	e04c      	b.n	8003c6a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_SPI_Transmit+0x17e>
 8003bd8:	8afb      	ldrh	r3, [r7, #22]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d140      	bne.n	8003c60 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	7812      	ldrb	r2, [r2, #0]
 8003bea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c04:	e02c      	b.n	8003c60 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d113      	bne.n	8003c3c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c3a:	e011      	b.n	8003c60 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c3c:	f7fe f80a 	bl	8001c54 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d803      	bhi.n	8003c54 <HAL_SPI_Transmit+0x1f4>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d102      	bne.n	8003c5a <HAL_SPI_Transmit+0x1fa>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c5e:	e026      	b.n	8003cae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1cd      	bne.n	8003c06 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fa44 	bl	80040fc <SPI_EndRxTxTransaction>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e000      	b.n	8003cae <HAL_SPI_Transmit+0x24e>
  }

error:
 8003cac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	; 0x30
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x26>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e18a      	b.n	8004004 <HAL_SPI_TransmitReceive+0x33c>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cf6:	f7fd ffad 	bl	8001c54 <HAL_GetTick>
 8003cfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d00f      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x70>
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1e:	d107      	bne.n	8003d30 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d103      	bne.n	8003d30 <HAL_SPI_TransmitReceive+0x68>
 8003d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d003      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
 8003d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d36:	e15b      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_SPI_TransmitReceive+0x82>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_SPI_TransmitReceive+0x82>
 8003d44:	887b      	ldrh	r3, [r7, #2]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d50:	e14e      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d003      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2205      	movs	r2, #5
 8003d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	887a      	ldrh	r2, [r7, #2]
 8003d76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	887a      	ldrh	r2, [r7, #2]
 8003d88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	887a      	ldrh	r2, [r7, #2]
 8003d8e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d007      	beq.n	8003dba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc2:	d178      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_SPI_TransmitReceive+0x10a>
 8003dcc:	8b7b      	ldrh	r3, [r7, #26]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d166      	bne.n	8003ea0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	881a      	ldrh	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003df6:	e053      	b.n	8003ea0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d11b      	bne.n	8003e3e <HAL_SPI_TransmitReceive+0x176>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d016      	beq.n	8003e3e <HAL_SPI_TransmitReceive+0x176>
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d113      	bne.n	8003e3e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d119      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x1b8>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d014      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	b292      	uxth	r2, r2
 8003e62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e80:	f7fd fee8 	bl	8001c54 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d807      	bhi.n	8003ea0 <HAL_SPI_TransmitReceive+0x1d8>
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d003      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e9e:	e0a7      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1a6      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x130>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1a1      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x130>
 8003eb4:	e07c      	b.n	8003fb0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x1fc>
 8003ebe:	8b7b      	ldrh	r3, [r7, #26]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d16b      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	7812      	ldrb	r2, [r2, #0]
 8003ed0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eea:	e057      	b.n	8003f9c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d11c      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x26c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <HAL_SPI_TransmitReceive+0x26c>
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d114      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	330c      	adds	r3, #12
 8003f14:	7812      	ldrb	r2, [r2, #0]
 8003f16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d119      	bne.n	8003f76 <HAL_SPI_TransmitReceive+0x2ae>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d014      	beq.n	8003f76 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f72:	2301      	movs	r3, #1
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f76:	f7fd fe6d 	bl	8001c54 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d803      	bhi.n	8003f8e <HAL_SPI_TransmitReceive+0x2c6>
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d102      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x2cc>
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f9a:	e029      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1a2      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x224>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d19d      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f8a1 	bl	80040fc <SPI_EndRxTxTransaction>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003fcc:	e010      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	e000      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004000:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004004:	4618      	mov	r0, r3
 8004006:	3730      	adds	r7, #48	; 0x30
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800401a:	b2db      	uxtb	r3, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004038:	e04c      	b.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004040:	d048      	beq.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004042:	f7fd fe07 	bl	8001c54 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d902      	bls.n	8004058 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d13d      	bne.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004066:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004070:	d111      	bne.n	8004096 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d004      	beq.n	8004086 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004084:	d107      	bne.n	8004096 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004094:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409e:	d10f      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e00f      	b.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d1a3      	bne.n	800403a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <SPI_EndRxTxTransaction+0x7c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1b      	ldr	r2, [pc, #108]	; (800417c <SPI_EndRxTxTransaction+0x80>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	0d5b      	lsrs	r3, r3, #21
 8004114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004126:	d112      	bne.n	800414e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff ff78 	bl	8004028 <SPI_WaitFlagStateUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e00f      	b.n	800416e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	3b01      	subs	r3, #1
 8004158:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d0f2      	beq.n	800414e <SPI_EndRxTxTransaction+0x52>
 8004168:	e000      	b.n	800416c <SPI_EndRxTxTransaction+0x70>
        break;
 800416a:	bf00      	nop
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000004 	.word	0x20000004
 800417c:	165e9f81 	.word	0x165e9f81

08004180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e01d      	b.n	80041ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd fba4 	bl	80018f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f000 fa1e 	bl	8004600 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b06      	cmp	r3, #6
 80041fe:	d007      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b02      	cmp	r3, #2
 8004232:	d122      	bne.n	800427a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b02      	cmp	r3, #2
 8004240:	d11b      	bne.n	800427a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f06f 0202 	mvn.w	r2, #2
 800424a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f9af 	bl	80045c4 <HAL_TIM_IC_CaptureCallback>
 8004266:	e005      	b.n	8004274 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f9a1 	bl	80045b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f9b2 	bl	80045d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d122      	bne.n	80042ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d11b      	bne.n	80042ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f06f 0204 	mvn.w	r2, #4
 800429e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f985 	bl	80045c4 <HAL_TIM_IC_CaptureCallback>
 80042ba:	e005      	b.n	80042c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f977 	bl	80045b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f988 	bl	80045d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d122      	bne.n	8004322 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d11b      	bne.n	8004322 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f06f 0208 	mvn.w	r2, #8
 80042f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2204      	movs	r2, #4
 80042f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f95b 	bl	80045c4 <HAL_TIM_IC_CaptureCallback>
 800430e:	e005      	b.n	800431c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f94d 	bl	80045b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f95e 	bl	80045d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b10      	cmp	r3, #16
 800432e:	d122      	bne.n	8004376 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b10      	cmp	r3, #16
 800433c:	d11b      	bne.n	8004376 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f06f 0210 	mvn.w	r2, #16
 8004346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2208      	movs	r2, #8
 800434c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f931 	bl	80045c4 <HAL_TIM_IC_CaptureCallback>
 8004362:	e005      	b.n	8004370 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f923 	bl	80045b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f934 	bl	80045d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10e      	bne.n	80043a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f06f 0201 	mvn.w	r2, #1
 800439a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f8fd 	bl	800459c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	2b80      	cmp	r3, #128	; 0x80
 80043ae:	d10e      	bne.n	80043ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d107      	bne.n	80043ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 faab 	bl	8004924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d10e      	bne.n	80043fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	2b40      	cmp	r3, #64	; 0x40
 80043e8:	d107      	bne.n	80043fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f8f9 	bl	80045ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b20      	cmp	r3, #32
 8004406:	d10e      	bne.n	8004426 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b20      	cmp	r3, #32
 8004414:	d107      	bne.n	8004426 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f06f 0220 	mvn.w	r2, #32
 800441e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fa75 	bl	8004910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_TIM_ConfigClockSource+0x18>
 8004442:	2302      	movs	r3, #2
 8004444:	e0a6      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x166>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004464:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b40      	cmp	r3, #64	; 0x40
 800447c:	d067      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x120>
 800447e:	2b40      	cmp	r3, #64	; 0x40
 8004480:	d80b      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x6c>
 8004482:	2b10      	cmp	r3, #16
 8004484:	d073      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x140>
 8004486:	2b10      	cmp	r3, #16
 8004488:	d802      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x62>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d06f      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800448e:	e078      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004490:	2b20      	cmp	r3, #32
 8004492:	d06c      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x140>
 8004494:	2b30      	cmp	r3, #48	; 0x30
 8004496:	d06a      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004498:	e073      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800449a:	2b70      	cmp	r3, #112	; 0x70
 800449c:	d00d      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x8c>
 800449e:	2b70      	cmp	r3, #112	; 0x70
 80044a0:	d804      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x7e>
 80044a2:	2b50      	cmp	r3, #80	; 0x50
 80044a4:	d033      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xe0>
 80044a6:	2b60      	cmp	r3, #96	; 0x60
 80044a8:	d041      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044aa:	e06a      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b0:	d066      	beq.n	8004580 <HAL_TIM_ConfigClockSource+0x152>
 80044b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b6:	d017      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044b8:	e063      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f000 f993 	bl	80047f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	609a      	str	r2, [r3, #8]
      break;
 80044e6:	e04c      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f000 f97c 	bl	80047f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450a:	609a      	str	r2, [r3, #8]
      break;
 800450c:	e039      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	461a      	mov	r2, r3
 800451c:	f000 f8f0 	bl	8004700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2150      	movs	r1, #80	; 0x50
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f949 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 800452c:	e029      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	461a      	mov	r2, r3
 800453c:	f000 f90f 	bl	800475e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2160      	movs	r1, #96	; 0x60
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f939 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 800454c:	e019      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	461a      	mov	r2, r3
 800455c:	f000 f8d0 	bl	8004700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2140      	movs	r1, #64	; 0x40
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f929 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 800456c:	e009      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 f920 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 800457e:	e000      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004580:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a34      	ldr	r2, [pc, #208]	; (80046e4 <TIM_Base_SetConfig+0xe4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00f      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d00b      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a31      	ldr	r2, [pc, #196]	; (80046e8 <TIM_Base_SetConfig+0xe8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a30      	ldr	r2, [pc, #192]	; (80046ec <TIM_Base_SetConfig+0xec>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a2f      	ldr	r2, [pc, #188]	; (80046f0 <TIM_Base_SetConfig+0xf0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d108      	bne.n	800464a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <TIM_Base_SetConfig+0xe4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01b      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d017      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a22      	ldr	r2, [pc, #136]	; (80046e8 <TIM_Base_SetConfig+0xe8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a21      	ldr	r2, [pc, #132]	; (80046ec <TIM_Base_SetConfig+0xec>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00f      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a20      	ldr	r2, [pc, #128]	; (80046f0 <TIM_Base_SetConfig+0xf0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00b      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <TIM_Base_SetConfig+0xf4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d007      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <TIM_Base_SetConfig+0xf8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <TIM_Base_SetConfig+0xfc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d108      	bne.n	800469c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a08      	ldr	r2, [pc, #32]	; (80046e4 <TIM_Base_SetConfig+0xe4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d103      	bne.n	80046d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	615a      	str	r2, [r3, #20]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800

08004700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f023 0201 	bic.w	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800472a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f023 030a 	bic.w	r3, r3, #10
 800473c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800475e:	b480      	push	{r7}
 8004760:	b087      	sub	sp, #28
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0210 	bic.w	r2, r3, #16
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	031b      	lsls	r3, r3, #12
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800479a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	f043 0307 	orr.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800480e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	021a      	lsls	r2, r3, #8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	431a      	orrs	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	609a      	str	r2, [r3, #8]
}
 8004828:	bf00      	nop
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004848:	2302      	movs	r3, #2
 800484a:	e050      	b.n	80048ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d018      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d013      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a18      	ldr	r2, [pc, #96]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00e      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a16      	ldr	r2, [pc, #88]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a15      	ldr	r2, [pc, #84]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a13      	ldr	r2, [pc, #76]	; (800490c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d10c      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40014000 	.word	0x40014000

08004910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800493c:	4904      	ldr	r1, [pc, #16]	; (8004950 <MX_FATFS_Init+0x18>)
 800493e:	4805      	ldr	r0, [pc, #20]	; (8004954 <MX_FATFS_Init+0x1c>)
 8004940:	f002 fed6 	bl	80076f0 <FATFS_LinkDriver>
 8004944:	4603      	mov	r3, r0
 8004946:	461a      	mov	r2, r3
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <MX_FATFS_Init+0x20>)
 800494a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800494c:	bf00      	nop
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000808 	.word	0x20000808
 8004954:	20000010 	.word	0x20000010
 8004958:	2000080c 	.word	0x2000080c

0800495c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004960:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004962:	4618      	mov	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
  return SD_disk_initialize (pdrv);
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	4618      	mov	r0, r3
 800497a:	f7fb ffc3 	bl	8000904 <SD_disk_initialize>
 800497e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
  return SD_disk_status (pdrv);
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	4618      	mov	r0, r3
 8004996:	f7fc f89f 	bl	8000ad8 <SD_disk_status>
 800499a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	4603      	mov	r3, r0
 80049b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
  return SD_disk_read (pdrv, buff, sector, count);
 80049b4:	7bf8      	ldrb	r0, [r7, #15]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	f7fc f8a2 	bl	8000b04 <SD_disk_read>
 80049c0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	4603      	mov	r3, r0
 80049d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 80049da:	7bf8      	ldrb	r0, [r7, #15]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	f7fc f8f9 	bl	8000bd8 <SD_disk_write>
 80049e6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	603a      	str	r2, [r7, #0]
 80049fa:	71fb      	strb	r3, [r7, #7]
 80049fc:	460b      	mov	r3, r1
 80049fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004a00:	79b9      	ldrb	r1, [r7, #6]
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fc f96a 	bl	8000ce0 <SD_disk_ioctl>
 8004a0c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <disk_status+0x30>)
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	79fa      	ldrb	r2, [r7, #7]
 8004a30:	4905      	ldr	r1, [pc, #20]	; (8004a48 <disk_status+0x30>)
 8004a32:	440a      	add	r2, r1
 8004a34:	7a12      	ldrb	r2, [r2, #8]
 8004a36:	4610      	mov	r0, r2
 8004a38:	4798      	blx	r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	200002f0 	.word	0x200002f0

08004a4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	4a0d      	ldr	r2, [pc, #52]	; (8004a94 <disk_initialize+0x48>)
 8004a5e:	5cd3      	ldrb	r3, [r2, r3]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d111      	bne.n	8004a88 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	4a0b      	ldr	r2, [pc, #44]	; (8004a94 <disk_initialize+0x48>)
 8004a68:	2101      	movs	r1, #1
 8004a6a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <disk_initialize+0x48>)
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	79fa      	ldrb	r2, [r7, #7]
 8004a7a:	4906      	ldr	r1, [pc, #24]	; (8004a94 <disk_initialize+0x48>)
 8004a7c:	440a      	add	r2, r1
 8004a7e:	7a12      	ldrb	r2, [r2, #8]
 8004a80:	4610      	mov	r0, r2
 8004a82:	4798      	blx	r3
 8004a84:	4603      	mov	r3, r0
 8004a86:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200002f0 	.word	0x200002f0

08004a98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <disk_read+0x3c>)
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	689c      	ldr	r4, [r3, #8]
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	4a07      	ldr	r2, [pc, #28]	; (8004ad4 <disk_read+0x3c>)
 8004ab8:	4413      	add	r3, r2
 8004aba:	7a18      	ldrb	r0, [r3, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	47a0      	blx	r4
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200002f0 	.word	0x200002f0

08004ad8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <disk_write+0x3c>)
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	68dc      	ldr	r4, [r3, #12]
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <disk_write+0x3c>)
 8004af8:	4413      	add	r3, r2
 8004afa:	7a18      	ldrb	r0, [r3, #8]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	47a0      	blx	r4
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd90      	pop	{r4, r7, pc}
 8004b12:	bf00      	nop
 8004b14:	200002f0 	.word	0x200002f0

08004b18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	603a      	str	r2, [r7, #0]
 8004b22:	71fb      	strb	r3, [r7, #7]
 8004b24:	460b      	mov	r3, r1
 8004b26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <disk_ioctl+0x38>)
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	79fa      	ldrb	r2, [r7, #7]
 8004b36:	4906      	ldr	r1, [pc, #24]	; (8004b50 <disk_ioctl+0x38>)
 8004b38:	440a      	add	r2, r1
 8004b3a:	7a10      	ldrb	r0, [r2, #8]
 8004b3c:	79b9      	ldrb	r1, [r7, #6]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	4798      	blx	r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	73fb      	strb	r3, [r7, #15]
  return res;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	200002f0 	.word	0x200002f0

08004b54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004b64:	89fb      	ldrh	r3, [r7, #14]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	b21a      	sxth	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	b21b      	sxth	r3, r3
 8004b70:	4313      	orrs	r3, r2
 8004b72:	b21b      	sxth	r3, r3
 8004b74:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004b76:	89fb      	ldrh	r3, [r7, #14]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3303      	adds	r3, #3
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	3202      	adds	r2, #2
 8004b9c:	7812      	ldrb	r2, [r2, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	3201      	adds	r2, #1
 8004baa:	7812      	ldrb	r2, [r2, #0]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
	return rv;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	887a      	ldrh	r2, [r7, #2]
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	0a1b      	lsrs	r3, r3, #8
 8004be6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	887a      	ldrh	r2, [r7, #2]
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	0a1b      	lsrs	r3, r3, #8
 8004c3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	1c53      	adds	r3, r2, #1
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	6179      	str	r1, [r7, #20]
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f1      	bne.n	8004c72 <mem_cpy+0x1a>
	}
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004c9a:	b480      	push	{r7}
 8004c9c:	b087      	sub	sp, #28
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	617a      	str	r2, [r7, #20]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f3      	bne.n	8004caa <mem_set+0x10>
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004cce:	b480      	push	{r7}
 8004cd0:	b089      	sub	sp, #36	; 0x24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	61fa      	str	r2, [r7, #28]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	61ba      	str	r2, [r7, #24]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	1acb      	subs	r3, r1, r3
 8004cfa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	607b      	str	r3, [r7, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <mem_cmp+0x40>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0eb      	beq.n	8004ce6 <mem_cmp+0x18>

	return r;
 8004d0e:	697b      	ldr	r3, [r7, #20]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3724      	adds	r7, #36	; 0x24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004d26:	e002      	b.n	8004d2e <chk_chr+0x12>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	607b      	str	r3, [r7, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <chk_chr+0x26>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d1f2      	bne.n	8004d28 <chk_chr+0xc>
	return *str;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	781b      	ldrb	r3, [r3, #0]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e029      	b.n	8004dbc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004d68:	4a27      	ldr	r2, [pc, #156]	; (8004e08 <chk_lock+0xb4>)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	4413      	add	r3, r2
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01d      	beq.n	8004db2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d76:	4a24      	ldr	r2, [pc, #144]	; (8004e08 <chk_lock+0xb4>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	4413      	add	r3, r2
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d116      	bne.n	8004db6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004d88:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <chk_lock+0xb4>)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	4413      	add	r3, r2
 8004d90:	3304      	adds	r3, #4
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d10c      	bne.n	8004db6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d9c:	4a1a      	ldr	r2, [pc, #104]	; (8004e08 <chk_lock+0xb4>)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	4413      	add	r3, r2
 8004da4:	3308      	adds	r3, #8
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d102      	bne.n	8004db6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004db0:	e007      	b.n	8004dc2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004db2:	2301      	movs	r3, #1
 8004db4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3301      	adds	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d9d2      	bls.n	8004d68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d109      	bne.n	8004ddc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <chk_lock+0x80>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d101      	bne.n	8004dd8 <chk_lock+0x84>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e010      	b.n	8004dfa <chk_lock+0xa6>
 8004dd8:	2312      	movs	r3, #18
 8004dda:	e00e      	b.n	8004dfa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d108      	bne.n	8004df4 <chk_lock+0xa0>
 8004de2:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <chk_lock+0xb4>)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	4413      	add	r3, r2
 8004dea:	330c      	adds	r3, #12
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df2:	d101      	bne.n	8004df8 <chk_lock+0xa4>
 8004df4:	2310      	movs	r3, #16
 8004df6:	e000      	b.n	8004dfa <chk_lock+0xa6>
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	200000d0 	.word	0x200000d0

08004e0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	e002      	b.n	8004e1e <enq_lock+0x12>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d806      	bhi.n	8004e32 <enq_lock+0x26>
 8004e24:	4a09      	ldr	r2, [pc, #36]	; (8004e4c <enq_lock+0x40>)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	4413      	add	r3, r2
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f2      	bne.n	8004e18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	bf14      	ite	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	2300      	moveq	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	200000d0 	.word	0x200000d0

08004e50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e01f      	b.n	8004ea0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004e60:	4a41      	ldr	r2, [pc, #260]	; (8004f68 <inc_lock+0x118>)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	4413      	add	r3, r2
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d113      	bne.n	8004e9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004e72:	4a3d      	ldr	r2, [pc, #244]	; (8004f68 <inc_lock+0x118>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	4413      	add	r3, r2
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d109      	bne.n	8004e9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004e86:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <inc_lock+0x118>)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3308      	adds	r3, #8
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d006      	beq.n	8004ea8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d9dc      	bls.n	8004e60 <inc_lock+0x10>
 8004ea6:	e000      	b.n	8004eaa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004ea8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d132      	bne.n	8004f16 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e002      	b.n	8004ebc <inc_lock+0x6c>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d806      	bhi.n	8004ed0 <inc_lock+0x80>
 8004ec2:	4a29      	ldr	r2, [pc, #164]	; (8004f68 <inc_lock+0x118>)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	4413      	add	r3, r2
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f2      	bne.n	8004eb6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d101      	bne.n	8004eda <inc_lock+0x8a>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e040      	b.n	8004f5c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4922      	ldr	r1, [pc, #136]	; (8004f68 <inc_lock+0x118>)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	440b      	add	r3, r1
 8004ee6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	491e      	ldr	r1, [pc, #120]	; (8004f68 <inc_lock+0x118>)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	491a      	ldr	r1, [pc, #104]	; (8004f68 <inc_lock+0x118>)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	440b      	add	r3, r1
 8004f04:	3308      	adds	r3, #8
 8004f06:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004f08:	4a17      	ldr	r2, [pc, #92]	; (8004f68 <inc_lock+0x118>)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	4413      	add	r3, r2
 8004f10:	330c      	adds	r3, #12
 8004f12:	2200      	movs	r2, #0
 8004f14:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <inc_lock+0xe0>
 8004f1c:	4a12      	ldr	r2, [pc, #72]	; (8004f68 <inc_lock+0x118>)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	4413      	add	r3, r2
 8004f24:	330c      	adds	r3, #12
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <inc_lock+0xe0>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e015      	b.n	8004f5c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d108      	bne.n	8004f48 <inc_lock+0xf8>
 8004f36:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <inc_lock+0x118>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	4413      	add	r3, r2
 8004f3e:	330c      	adds	r3, #12
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	e001      	b.n	8004f4c <inc_lock+0xfc>
 8004f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f4c:	4906      	ldr	r1, [pc, #24]	; (8004f68 <inc_lock+0x118>)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	440b      	add	r3, r1
 8004f54:	330c      	adds	r3, #12
 8004f56:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3301      	adds	r3, #1
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	200000d0 	.word	0x200000d0

08004f6c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	607b      	str	r3, [r7, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d825      	bhi.n	8004fcc <dec_lock+0x60>
		n = Files[i].ctr;
 8004f80:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <dec_lock+0x74>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	4413      	add	r3, r2
 8004f88:	330c      	adds	r3, #12
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004f8e:	89fb      	ldrh	r3, [r7, #14]
 8004f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f94:	d101      	bne.n	8004f9a <dec_lock+0x2e>
 8004f96:	2300      	movs	r3, #0
 8004f98:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004f9a:	89fb      	ldrh	r3, [r7, #14]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <dec_lock+0x3a>
 8004fa0:	89fb      	ldrh	r3, [r7, #14]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004fa6:	4a0e      	ldr	r2, [pc, #56]	; (8004fe0 <dec_lock+0x74>)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	4413      	add	r3, r2
 8004fae:	330c      	adds	r3, #12
 8004fb0:	89fa      	ldrh	r2, [r7, #14]
 8004fb2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <dec_lock+0x5a>
 8004fba:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <dec_lock+0x74>)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	4413      	add	r3, r2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	737b      	strb	r3, [r7, #13]
 8004fca:	e001      	b.n	8004fd0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004fcc:	2302      	movs	r3, #2
 8004fce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004fd0:	7b7b      	ldrb	r3, [r7, #13]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	200000d0 	.word	0x200000d0

08004fe4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e010      	b.n	8005014 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004ff2:	4a0d      	ldr	r2, [pc, #52]	; (8005028 <clear_lock+0x44>)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	4413      	add	r3, r2
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d105      	bne.n	800500e <clear_lock+0x2a>
 8005002:	4a09      	ldr	r2, [pc, #36]	; (8005028 <clear_lock+0x44>)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	4413      	add	r3, r2
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d9eb      	bls.n	8004ff2 <clear_lock+0xe>
	}
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	200000d0 	.word	0x200000d0

0800502c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d034      	beq.n	80050aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005044:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	7858      	ldrb	r0, [r3, #1]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005050:	2301      	movs	r3, #1
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	f7ff fd40 	bl	8004ad8 <disk_write>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <sync_window+0x38>
			res = FR_DISK_ERR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
 8005062:	e022      	b.n	80050aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	1ad2      	subs	r2, r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	429a      	cmp	r2, r3
 8005078:	d217      	bcs.n	80050aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	789b      	ldrb	r3, [r3, #2]
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	e010      	b.n	80050a4 <sync_window+0x78>
					wsect += fs->fsize;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	7858      	ldrb	r0, [r3, #1]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005096:	2301      	movs	r3, #1
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	f7ff fd1d 	bl	8004ad8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d8eb      	bhi.n	8005082 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d01b      	beq.n	8005104 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ffad 	bl	800502c <sync_window>
 80050d2:	4603      	mov	r3, r0
 80050d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d113      	bne.n	8005104 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	7858      	ldrb	r0, [r3, #1]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050e6:	2301      	movs	r3, #1
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	f7ff fcd5 	bl	8004a98 <disk_read>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80050f4:	f04f 33ff 	mov.w	r3, #4294967295
 80050f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ff87 	bl	800502c <sync_window>
 800511e:	4603      	mov	r3, r0
 8005120:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d159      	bne.n	80051dc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b03      	cmp	r3, #3
 800512e:	d149      	bne.n	80051c4 <sync_fs+0xb4>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	791b      	ldrb	r3, [r3, #4]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d145      	bne.n	80051c4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	899b      	ldrh	r3, [r3, #12]
 8005142:	461a      	mov	r2, r3
 8005144:	2100      	movs	r1, #0
 8005146:	f7ff fda8 	bl	8004c9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3338      	adds	r3, #56	; 0x38
 800514e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005152:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fd37 	bl	8004bca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3338      	adds	r3, #56	; 0x38
 8005160:	4921      	ldr	r1, [pc, #132]	; (80051e8 <sync_fs+0xd8>)
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff fd4c 	bl	8004c00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3338      	adds	r3, #56	; 0x38
 800516c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005170:	491e      	ldr	r1, [pc, #120]	; (80051ec <sync_fs+0xdc>)
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fd44 	bl	8004c00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3338      	adds	r3, #56	; 0x38
 800517c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f7ff fd3a 	bl	8004c00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3338      	adds	r3, #56	; 0x38
 8005190:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f7ff fd30 	bl	8004c00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7858      	ldrb	r0, [r3, #1]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b8:	2301      	movs	r3, #1
 80051ba:	f7ff fc8d 	bl	8004ad8 <disk_write>
			fs->fsi_flag = 0;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2200      	movs	r2, #0
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fca3 	bl	8004b18 <disk_ioctl>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <sync_fs+0xcc>
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	41615252 	.word	0x41615252
 80051ec:	61417272 	.word	0x61417272

080051f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	3b02      	subs	r3, #2
 80051fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	3b02      	subs	r3, #2
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d301      	bcc.n	8005210 <clust2sect+0x20>
 800520c:	2300      	movs	r3, #0
 800520e:	e008      	b.n	8005222 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	895b      	ldrh	r3, [r3, #10]
 8005214:	461a      	mov	r2, r3
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	fb03 f202 	mul.w	r2, r3, r2
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	4413      	add	r3, r2
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b086      	sub	sp, #24
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d904      	bls.n	800524e <get_fat+0x20>
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <get_fat+0x26>
		val = 1;	/* Internal error */
 800524e:	2301      	movs	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	e0b7      	b.n	80053c4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005254:	f04f 33ff 	mov.w	r3, #4294967295
 8005258:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d05a      	beq.n	8005318 <get_fat+0xea>
 8005262:	2b03      	cmp	r3, #3
 8005264:	d07d      	beq.n	8005362 <get_fat+0x134>
 8005266:	2b01      	cmp	r3, #1
 8005268:	f040 80a2 	bne.w	80053b0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	899b      	ldrh	r3, [r3, #12]
 8005282:	4619      	mov	r1, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	fbb3 f3f1 	udiv	r3, r3, r1
 800528a:	4413      	add	r3, r2
 800528c:	4619      	mov	r1, r3
 800528e:	6938      	ldr	r0, [r7, #16]
 8005290:	f7ff ff10 	bl	80050b4 <move_window>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	f040 808d 	bne.w	80053b6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	60fa      	str	r2, [r7, #12]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	8992      	ldrh	r2, [r2, #12]
 80052a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80052aa:	fb02 f201 	mul.w	r2, r2, r1
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4413      	add	r3, r2
 80052b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	899b      	ldrh	r3, [r3, #12]
 80052c2:	4619      	mov	r1, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ca:	4413      	add	r3, r2
 80052cc:	4619      	mov	r1, r3
 80052ce:	6938      	ldr	r0, [r7, #16]
 80052d0:	f7ff fef0 	bl	80050b4 <move_window>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d16f      	bne.n	80053ba <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	899b      	ldrh	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80052e6:	fb02 f201 	mul.w	r2, r2, r1
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4413      	add	r3, r2
 80052f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	461a      	mov	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <get_fat+0xe0>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	e002      	b.n	8005314 <get_fat+0xe6>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005314:	617b      	str	r3, [r7, #20]
			break;
 8005316:	e055      	b.n	80053c4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	899b      	ldrh	r3, [r3, #12]
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	b29b      	uxth	r3, r3
 8005324:	4619      	mov	r1, r3
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	fbb3 f3f1 	udiv	r3, r3, r1
 800532c:	4413      	add	r3, r2
 800532e:	4619      	mov	r1, r3
 8005330:	6938      	ldr	r0, [r7, #16]
 8005332:	f7ff febf 	bl	80050b4 <move_window>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d140      	bne.n	80053be <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	8992      	ldrh	r2, [r2, #12]
 800534a:	fbb3 f0f2 	udiv	r0, r3, r2
 800534e:	fb02 f200 	mul.w	r2, r2, r0
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	440b      	add	r3, r1
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fbfc 	bl	8004b54 <ld_word>
 800535c:	4603      	mov	r3, r0
 800535e:	617b      	str	r3, [r7, #20]
			break;
 8005360:	e030      	b.n	80053c4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	899b      	ldrh	r3, [r3, #12]
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	b29b      	uxth	r3, r3
 800536e:	4619      	mov	r1, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	fbb3 f3f1 	udiv	r3, r3, r1
 8005376:	4413      	add	r3, r2
 8005378:	4619      	mov	r1, r3
 800537a:	6938      	ldr	r0, [r7, #16]
 800537c:	f7ff fe9a 	bl	80050b4 <move_window>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d11d      	bne.n	80053c2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	8992      	ldrh	r2, [r2, #12]
 8005394:	fbb3 f0f2 	udiv	r0, r3, r2
 8005398:	fb02 f200 	mul.w	r2, r2, r0
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	440b      	add	r3, r1
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fbef 	bl	8004b84 <ld_dword>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053ac:	617b      	str	r3, [r7, #20]
			break;
 80053ae:	e009      	b.n	80053c4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80053b0:	2301      	movs	r3, #1
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e006      	b.n	80053c4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053b6:	bf00      	nop
 80053b8:	e004      	b.n	80053c4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80053c2:	bf00      	nop
		}
	}

	return val;
 80053c4:	697b      	ldr	r3, [r7, #20]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80053ce:	b590      	push	{r4, r7, lr}
 80053d0:	b089      	sub	sp, #36	; 0x24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80053da:	2302      	movs	r3, #2
 80053dc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	f240 8106 	bls.w	80055f2 <put_fat+0x224>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	f080 8100 	bcs.w	80055f2 <put_fat+0x224>
		switch (fs->fs_type) {
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	f000 8088 	beq.w	800550c <put_fat+0x13e>
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	f000 80b0 	beq.w	8005562 <put_fat+0x194>
 8005402:	2b01      	cmp	r3, #1
 8005404:	f040 80f5 	bne.w	80055f2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	61bb      	str	r3, [r7, #24]
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4413      	add	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	899b      	ldrh	r3, [r3, #12]
 800541e:	4619      	mov	r1, r3
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	fbb3 f3f1 	udiv	r3, r3, r1
 8005426:	4413      	add	r3, r2
 8005428:	4619      	mov	r1, r3
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff fe42 	bl	80050b4 <move_window>
 8005430:	4603      	mov	r3, r0
 8005432:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005434:	7ffb      	ldrb	r3, [r7, #31]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 80d4 	bne.w	80055e4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	61ba      	str	r2, [r7, #24]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	8992      	ldrh	r2, [r2, #12]
 800544c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005450:	fb02 f200 	mul.w	r2, r2, r0
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	440b      	add	r3, r1
 8005458:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00d      	beq.n	8005480 <put_fat+0xb2>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	b25b      	sxtb	r3, r3
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	b25a      	sxtb	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	b25b      	sxtb	r3, r3
 8005478:	4313      	orrs	r3, r2
 800547a:	b25b      	sxtb	r3, r3
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e001      	b.n	8005484 <put_fat+0xb6>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	899b      	ldrh	r3, [r3, #12]
 8005496:	4619      	mov	r1, r3
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	fbb3 f3f1 	udiv	r3, r3, r1
 800549e:	4413      	add	r3, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff fe06 	bl	80050b4 <move_window>
 80054a8:	4603      	mov	r3, r0
 80054aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054ac:	7ffb      	ldrb	r3, [r7, #31]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f040 809a 	bne.w	80055e8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	899b      	ldrh	r3, [r3, #12]
 80054be:	461a      	mov	r2, r3
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80054c6:	fb02 f200 	mul.w	r2, r2, r0
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	440b      	add	r3, r1
 80054ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <put_fat+0x114>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	e00e      	b.n	8005500 <put_fat+0x132>
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	b25b      	sxtb	r3, r3
 80054e8:	f023 030f 	bic.w	r3, r3, #15
 80054ec:	b25a      	sxtb	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	0a1b      	lsrs	r3, r3, #8
 80054f2:	b25b      	sxtb	r3, r3
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	4313      	orrs	r3, r2
 80054fc:	b25b      	sxtb	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	70da      	strb	r2, [r3, #3]
			break;
 800550a:	e072      	b.n	80055f2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	899b      	ldrh	r3, [r3, #12]
 8005514:	085b      	lsrs	r3, r3, #1
 8005516:	b29b      	uxth	r3, r3
 8005518:	4619      	mov	r1, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005520:	4413      	add	r3, r2
 8005522:	4619      	mov	r1, r3
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff fdc5 	bl	80050b4 <move_window>
 800552a:	4603      	mov	r3, r0
 800552c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800552e:	7ffb      	ldrb	r3, [r7, #31]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d15b      	bne.n	80055ec <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	8992      	ldrh	r2, [r2, #12]
 8005542:	fbb3 f0f2 	udiv	r0, r3, r2
 8005546:	fb02 f200 	mul.w	r2, r2, r0
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	440b      	add	r3, r1
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	b292      	uxth	r2, r2
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff fb38 	bl	8004bca <st_word>
			fs->wflag = 1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	70da      	strb	r2, [r3, #3]
			break;
 8005560:	e047      	b.n	80055f2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	899b      	ldrh	r3, [r3, #12]
 800556a:	089b      	lsrs	r3, r3, #2
 800556c:	b29b      	uxth	r3, r3
 800556e:	4619      	mov	r1, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	fbb3 f3f1 	udiv	r3, r3, r1
 8005576:	4413      	add	r3, r2
 8005578:	4619      	mov	r1, r3
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7ff fd9a 	bl	80050b4 <move_window>
 8005580:	4603      	mov	r3, r0
 8005582:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005584:	7ffb      	ldrb	r3, [r7, #31]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d132      	bne.n	80055f0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	8992      	ldrh	r2, [r2, #12]
 800559e:	fbb3 f0f2 	udiv	r0, r3, r2
 80055a2:	fb02 f200 	mul.w	r2, r2, r0
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	440b      	add	r3, r1
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff faea 	bl	8004b84 <ld_dword>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80055b6:	4323      	orrs	r3, r4
 80055b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	8992      	ldrh	r2, [r2, #12]
 80055c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80055cc:	fb02 f200 	mul.w	r2, r2, r0
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	440b      	add	r3, r1
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fb12 	bl	8004c00 <st_dword>
			fs->wflag = 1;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	70da      	strb	r2, [r3, #3]
			break;
 80055e2:	e006      	b.n	80055f2 <put_fat+0x224>
			if (res != FR_OK) break;
 80055e4:	bf00      	nop
 80055e6:	e004      	b.n	80055f2 <put_fat+0x224>
			if (res != FR_OK) break;
 80055e8:	bf00      	nop
 80055ea:	e002      	b.n	80055f2 <put_fat+0x224>
			if (res != FR_OK) break;
 80055ec:	bf00      	nop
 80055ee:	e000      	b.n	80055f2 <put_fat+0x224>
			if (res != FR_OK) break;
 80055f0:	bf00      	nop
		}
	}
	return res;
 80055f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3724      	adds	r7, #36	; 0x24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd90      	pop	{r4, r7, pc}

080055fc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d904      	bls.n	8005622 <remove_chain+0x26>
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	d301      	bcc.n	8005626 <remove_chain+0x2a>
 8005622:	2302      	movs	r3, #2
 8005624:	e04b      	b.n	80056be <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00c      	beq.n	8005646 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800562c:	f04f 32ff 	mov.w	r2, #4294967295
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	69b8      	ldr	r0, [r7, #24]
 8005634:	f7ff fecb 	bl	80053ce <put_fat>
 8005638:	4603      	mov	r3, r0
 800563a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800563c:	7ffb      	ldrb	r3, [r7, #31]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <remove_chain+0x4a>
 8005642:	7ffb      	ldrb	r3, [r7, #31]
 8005644:	e03b      	b.n	80056be <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff fdf0 	bl	800522e <get_fat>
 800564e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d031      	beq.n	80056ba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <remove_chain+0x64>
 800565c:	2302      	movs	r3, #2
 800565e:	e02e      	b.n	80056be <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d101      	bne.n	800566c <remove_chain+0x70>
 8005668:	2301      	movs	r3, #1
 800566a:	e028      	b.n	80056be <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800566c:	2200      	movs	r2, #0
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	69b8      	ldr	r0, [r7, #24]
 8005672:	f7ff feac 	bl	80053ce <put_fat>
 8005676:	4603      	mov	r3, r0
 8005678:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800567a:	7ffb      	ldrb	r3, [r7, #31]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <remove_chain+0x88>
 8005680:	7ffb      	ldrb	r3, [r7, #31]
 8005682:	e01c      	b.n	80056be <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	3b02      	subs	r3, #2
 800568e:	429a      	cmp	r2, r3
 8005690:	d20b      	bcs.n	80056aa <remove_chain+0xae>
			fs->free_clst++;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	791b      	ldrb	r3, [r3, #4]
 80056a0:	f043 0301 	orr.w	r3, r3, #1
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d3c6      	bcc.n	8005646 <remove_chain+0x4a>
 80056b8:	e000      	b.n	80056bc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80056ba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b088      	sub	sp, #32
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10d      	bne.n	80056f8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <create_chain+0x2c>
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d31b      	bcc.n	800572a <create_chain+0x64>
 80056f2:	2301      	movs	r3, #1
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	e018      	b.n	800572a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff fd97 	bl	800522e <get_fat>
 8005700:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d801      	bhi.n	800570c <create_chain+0x46>
 8005708:	2301      	movs	r3, #1
 800570a:	e070      	b.n	80057ee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d101      	bne.n	8005718 <create_chain+0x52>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	e06a      	b.n	80057ee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	429a      	cmp	r2, r3
 8005720:	d201      	bcs.n	8005726 <create_chain+0x60>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	e063      	b.n	80057ee <create_chain+0x128>
		scl = clst;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	3301      	adds	r3, #1
 8005732:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	429a      	cmp	r2, r3
 800573c:	d307      	bcc.n	800574e <create_chain+0x88>
				ncl = 2;
 800573e:	2302      	movs	r3, #2
 8005740:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	429a      	cmp	r2, r3
 8005748:	d901      	bls.n	800574e <create_chain+0x88>
 800574a:	2300      	movs	r3, #0
 800574c:	e04f      	b.n	80057ee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800574e:	69f9      	ldr	r1, [r7, #28]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff fd6c 	bl	800522e <get_fat>
 8005756:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d003      	beq.n	800576c <create_chain+0xa6>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d101      	bne.n	8005770 <create_chain+0xaa>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	e03e      	b.n	80057ee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	429a      	cmp	r2, r3
 8005776:	d1da      	bne.n	800572e <create_chain+0x68>
 8005778:	2300      	movs	r3, #0
 800577a:	e038      	b.n	80057ee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800577c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800577e:	f04f 32ff 	mov.w	r2, #4294967295
 8005782:	69f9      	ldr	r1, [r7, #28]
 8005784:	6938      	ldr	r0, [r7, #16]
 8005786:	f7ff fe22 	bl	80053ce <put_fat>
 800578a:	4603      	mov	r3, r0
 800578c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <create_chain+0xe2>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d006      	beq.n	80057a8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f7ff fe15 	bl	80053ce <put_fat>
 80057a4:	4603      	mov	r3, r0
 80057a6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d116      	bne.n	80057dc <create_chain+0x116>
		fs->last_clst = ncl;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	3b02      	subs	r3, #2
 80057be:	429a      	cmp	r2, r3
 80057c0:	d804      	bhi.n	80057cc <create_chain+0x106>
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	1e5a      	subs	r2, r3, #1
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	791b      	ldrb	r3, [r3, #4]
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	711a      	strb	r2, [r3, #4]
 80057da:	e007      	b.n	80057ec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d102      	bne.n	80057e8 <create_chain+0x122>
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
 80057e6:	e000      	b.n	80057ea <create_chain+0x124>
 80057e8:	2301      	movs	r3, #1
 80057ea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80057ec:	69fb      	ldr	r3, [r7, #28]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b087      	sub	sp, #28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	3304      	adds	r3, #4
 800580c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	899b      	ldrh	r3, [r3, #12]
 8005812:	461a      	mov	r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	fbb3 f3f2 	udiv	r3, r3, r2
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	8952      	ldrh	r2, [r2, #10]
 800581e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005822:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	613a      	str	r2, [r7, #16]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <clmt_clust+0x42>
 8005834:	2300      	movs	r3, #0
 8005836:	e010      	b.n	800585a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	d307      	bcc.n	8005850 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	3304      	adds	r3, #4
 800584c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800584e:	e7e9      	b.n	8005824 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005850:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	4413      	add	r3, r2
}
 800585a:	4618      	mov	r0, r3
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b086      	sub	sp, #24
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800587c:	d204      	bcs.n	8005888 <dir_sdi+0x22>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <dir_sdi+0x26>
		return FR_INT_ERR;
 8005888:	2302      	movs	r3, #2
 800588a:	e071      	b.n	8005970 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <dir_sdi+0x46>
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d902      	bls.n	80058ac <dir_sdi+0x46>
		clst = fs->dirbase;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10c      	bne.n	80058cc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	8912      	ldrh	r2, [r2, #8]
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d301      	bcc.n	80058c2 <dir_sdi+0x5c>
 80058be:	2302      	movs	r3, #2
 80058c0:	e056      	b.n	8005970 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	61da      	str	r2, [r3, #28]
 80058ca:	e02d      	b.n	8005928 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	895b      	ldrh	r3, [r3, #10]
 80058d0:	461a      	mov	r2, r3
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	899b      	ldrh	r3, [r3, #12]
 80058d6:	fb03 f302 	mul.w	r3, r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80058dc:	e019      	b.n	8005912 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6979      	ldr	r1, [r7, #20]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fca3 	bl	800522e <get_fat>
 80058e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d101      	bne.n	80058f6 <dir_sdi+0x90>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e03c      	b.n	8005970 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d904      	bls.n	8005906 <dir_sdi+0xa0>
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	429a      	cmp	r2, r3
 8005904:	d301      	bcc.n	800590a <dir_sdi+0xa4>
 8005906:	2302      	movs	r3, #2
 8005908:	e032      	b.n	8005970 <dir_sdi+0x10a>
			ofs -= csz;
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	429a      	cmp	r2, r3
 8005918:	d2e1      	bcs.n	80058de <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800591a:	6979      	ldr	r1, [r7, #20]
 800591c:	6938      	ldr	r0, [r7, #16]
 800591e:	f7ff fc67 	bl	80051f0 <clust2sect>
 8005922:	4602      	mov	r2, r0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <dir_sdi+0xd4>
 8005936:	2302      	movs	r3, #2
 8005938:	e01a      	b.n	8005970 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69da      	ldr	r2, [r3, #28]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	899b      	ldrh	r3, [r3, #12]
 8005942:	4619      	mov	r1, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	fbb3 f3f1 	udiv	r3, r3, r1
 800594a:	441a      	add	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	899b      	ldrh	r3, [r3, #12]
 800595a:	461a      	mov	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005962:	fb02 f200 	mul.w	r2, r2, r0
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	18ca      	adds	r2, r1, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	3320      	adds	r3, #32
 800598e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <dir_next+0x28>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800599e:	d301      	bcc.n	80059a4 <dir_next+0x2c>
 80059a0:	2304      	movs	r3, #4
 80059a2:	e0bb      	b.n	8005b1c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	899b      	ldrh	r3, [r3, #12]
 80059a8:	461a      	mov	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80059b0:	fb02 f201 	mul.w	r2, r2, r1
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f040 809d 	bne.w	8005af6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10b      	bne.n	80059e6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	8912      	ldrh	r2, [r2, #8]
 80059d6:	4293      	cmp	r3, r2
 80059d8:	f0c0 808d 	bcc.w	8005af6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	61da      	str	r2, [r3, #28]
 80059e2:	2304      	movs	r3, #4
 80059e4:	e09a      	b.n	8005b1c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	899b      	ldrh	r3, [r3, #12]
 80059ea:	461a      	mov	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	8952      	ldrh	r2, [r2, #10]
 80059f6:	3a01      	subs	r2, #1
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d17b      	bne.n	8005af6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f7ff fc11 	bl	800522e <get_fat>
 8005a0c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d801      	bhi.n	8005a18 <dir_next+0xa0>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e081      	b.n	8005b1c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d101      	bne.n	8005a24 <dir_next+0xac>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e07b      	b.n	8005b1c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d359      	bcc.n	8005ae2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d104      	bne.n	8005a3e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	61da      	str	r2, [r3, #28]
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	e06e      	b.n	8005b1c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f7ff fe3d 	bl	80056c6 <create_chain>
 8005a4c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <dir_next+0xe0>
 8005a54:	2307      	movs	r3, #7
 8005a56:	e061      	b.n	8005b1c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <dir_next+0xea>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e05c      	b.n	8005b1c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d101      	bne.n	8005a6e <dir_next+0xf6>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e056      	b.n	8005b1c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff fadc 	bl	800502c <sync_window>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <dir_next+0x106>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e04e      	b.n	8005b1c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	899b      	ldrh	r3, [r3, #12]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f7ff f905 	bl	8004c9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a90:	2300      	movs	r3, #0
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	6979      	ldr	r1, [r7, #20]
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff fbaa 	bl	80051f0 <clust2sect>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8005aa2:	e012      	b.n	8005aca <dir_next+0x152>
						fs->wflag = 1;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff fabe 	bl	800502c <sync_window>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <dir_next+0x142>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e030      	b.n	8005b1c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	3301      	adds	r3, #1
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	895b      	ldrh	r3, [r3, #10]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d3e6      	bcc.n	8005aa4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad2      	subs	r2, r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005ae8:	6979      	ldr	r1, [r7, #20]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fb80 	bl	80051f0 <clust2sect>
 8005af0:	4602      	mov	r2, r0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	899b      	ldrh	r3, [r3, #12]
 8005b06:	461a      	mov	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b0e:	fb02 f200 	mul.w	r2, r2, r0
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	18ca      	adds	r2, r1, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005b34:	2100      	movs	r1, #0
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fe95 	bl	8005866 <dir_sdi>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d12b      	bne.n	8005b9e <dir_alloc+0x7a>
		n = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff faaf 	bl	80050b4 <move_window>
 8005b56:	4603      	mov	r3, r0
 8005b58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d11d      	bne.n	8005b9c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2be5      	cmp	r3, #229	; 0xe5
 8005b68:	d004      	beq.n	8005b74 <dir_alloc+0x50>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d107      	bne.n	8005b84 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	3301      	adds	r3, #1
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d102      	bne.n	8005b88 <dir_alloc+0x64>
 8005b82:	e00c      	b.n	8005b9e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005b84:	2300      	movs	r3, #0
 8005b86:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005b88:	2101      	movs	r1, #1
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fef4 	bl	8005978 <dir_next>
 8005b90:	4603      	mov	r3, r0
 8005b92:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0d7      	beq.n	8005b4a <dir_alloc+0x26>
 8005b9a:	e000      	b.n	8005b9e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005b9c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d101      	bne.n	8005ba8 <dir_alloc+0x84>
 8005ba4:	2307      	movs	r3, #7
 8005ba6:	75fb      	strb	r3, [r7, #23]
	return res;
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	331a      	adds	r3, #26
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe ffc7 	bl	8004b54 <ld_word>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d109      	bne.n	8005be6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	3314      	adds	r3, #20
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe ffbc 	bl	8004b54 <ld_word>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	041b      	lsls	r3, r3, #16
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	331a      	adds	r3, #26
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	b292      	uxth	r2, r2
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe ffdf 	bl	8004bca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d109      	bne.n	8005c28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f103 0214 	add.w	r2, r3, #20
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	0c1b      	lsrs	r3, r3, #16
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f7fe ffd1 	bl	8004bca <st_word>
	}
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005c30:	b590      	push	{r4, r7, lr}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	331a      	adds	r3, #26
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe ff88 	bl	8004b54 <ld_word>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <cmp_lfn+0x1e>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e059      	b.n	8005d02 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c56:	1e5a      	subs	r2, r3, #1
 8005c58:	4613      	mov	r3, r2
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c64:	2301      	movs	r3, #1
 8005c66:	81fb      	strh	r3, [r7, #14]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	e033      	b.n	8005cd6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005c6e:	4a27      	ldr	r2, [pc, #156]	; (8005d0c <cmp_lfn+0xdc>)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe ff69 	bl	8004b54 <ld_word>
 8005c82:	4603      	mov	r3, r0
 8005c84:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005c86:	89fb      	ldrh	r3, [r7, #14]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01a      	beq.n	8005cc2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2bfe      	cmp	r3, #254	; 0xfe
 8005c90:	d812      	bhi.n	8005cb8 <cmp_lfn+0x88>
 8005c92:	89bb      	ldrh	r3, [r7, #12]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 fd77 	bl	8007788 <ff_wtoupper>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	461c      	mov	r4, r3
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	617a      	str	r2, [r7, #20]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 fd6b 	bl	8007788 <ff_wtoupper>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	429c      	cmp	r4, r3
 8005cb6:	d001      	beq.n	8005cbc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e022      	b.n	8005d02 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005cbc:	89bb      	ldrh	r3, [r7, #12]
 8005cbe:	81fb      	strh	r3, [r7, #14]
 8005cc0:	e006      	b.n	8005cd0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005cc2:	89bb      	ldrh	r3, [r7, #12]
 8005cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d001      	beq.n	8005cd0 <cmp_lfn+0xa0>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e018      	b.n	8005d02 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b0c      	cmp	r3, #12
 8005cda:	d9c8      	bls.n	8005c6e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <cmp_lfn+0xd0>
 8005ce8:	89fb      	ldrh	r3, [r7, #14]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <cmp_lfn+0xd0>
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <cmp_lfn+0xd0>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e000      	b.n	8005d02 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005d00:	2301      	movs	r3, #1
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd90      	pop	{r4, r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	080082f0 	.word	0x080082f0

08005d10 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	460b      	mov	r3, r1
 8005d20:	71fb      	strb	r3, [r7, #7]
 8005d22:	4613      	mov	r3, r2
 8005d24:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	330d      	adds	r3, #13
 8005d2a:	79ba      	ldrb	r2, [r7, #6]
 8005d2c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	330b      	adds	r3, #11
 8005d32:	220f      	movs	r2, #15
 8005d34:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	331a      	adds	r3, #26
 8005d42:	2100      	movs	r1, #0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe ff40 	bl	8004bca <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	1e5a      	subs	r2, r3, #1
 8005d4e:	4613      	mov	r3, r2
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	82fb      	strh	r3, [r7, #22]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005d62:	8afb      	ldrh	r3, [r7, #22]
 8005d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d007      	beq.n	8005d7c <put_lfn+0x6c>
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	61fa      	str	r2, [r7, #28]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005d7c:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <put_lfn+0xcc>)
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	4413      	add	r3, r2
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	8afa      	ldrh	r2, [r7, #22]
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe ff1b 	bl	8004bca <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005d94:	8afb      	ldrh	r3, [r7, #22]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <put_lfn+0x90>
 8005d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d9e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	3301      	adds	r3, #1
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b0c      	cmp	r3, #12
 8005daa:	d9da      	bls.n	8005d62 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005dac:	8afb      	ldrh	r3, [r7, #22]
 8005dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d006      	beq.n	8005dc4 <put_lfn+0xb4>
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d103      	bne.n	8005dcc <put_lfn+0xbc>
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	79fa      	ldrb	r2, [r7, #7]
 8005dd0:	701a      	strb	r2, [r3, #0]
}
 8005dd2:	bf00      	nop
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	080082f0 	.word	0x080082f0

08005de0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	; 0x30
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005dee:	220b      	movs	r2, #11
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f7fe ff30 	bl	8004c58 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d92b      	bls.n	8005e56 <gen_numname+0x76>
		sr = seq;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005e02:	e022      	b.n	8005e4a <gen_numname+0x6a>
			wc = *lfn++;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	1c9a      	adds	r2, r3, #2
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005e0e:	2300      	movs	r3, #0
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e12:	e017      	b.n	8005e44 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	005a      	lsls	r2, r3, #1
 8005e18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	4413      	add	r3, r2
 8005e20:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <gen_numname+0x5e>
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005e38:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005e3c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	3301      	adds	r3, #1
 8005e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	d9e4      	bls.n	8005e14 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1d8      	bne.n	8005e04 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005e56:	2307      	movs	r3, #7
 8005e58:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	3330      	adds	r3, #48	; 0x30
 8005e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e6e:	2b39      	cmp	r3, #57	; 0x39
 8005e70:	d904      	bls.n	8005e7c <gen_numname+0x9c>
 8005e72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e76:	3307      	adds	r3, #7
 8005e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	1e5a      	subs	r2, r3, #1
 8005e80:	62ba      	str	r2, [r7, #40]	; 0x28
 8005e82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005e86:	4413      	add	r3, r2
 8005e88:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005e8c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	091b      	lsrs	r3, r3, #4
 8005e94:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1de      	bne.n	8005e5a <gen_numname+0x7a>
	ns[i] = '~';
 8005e9c:	f107 0214 	add.w	r2, r7, #20
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	4413      	add	r3, r2
 8005ea4:	227e      	movs	r2, #126	; 0x7e
 8005ea6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005eac:	e002      	b.n	8005eb4 <gen_numname+0xd4>
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d205      	bcs.n	8005ec8 <gen_numname+0xe8>
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	4413      	add	r3, r2
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d1f2      	bne.n	8005eae <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	2b07      	cmp	r3, #7
 8005ecc:	d808      	bhi.n	8005ee0 <gen_numname+0x100>
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ed4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005ed8:	4413      	add	r3, r2
 8005eda:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005ede:	e000      	b.n	8005ee2 <gen_numname+0x102>
 8005ee0:	2120      	movs	r1, #32
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	460a      	mov	r2, r1
 8005eee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	2b07      	cmp	r3, #7
 8005ef4:	d9e8      	bls.n	8005ec8 <gen_numname+0xe8>
}
 8005ef6:	bf00      	nop
 8005ef8:	3730      	adds	r7, #48	; 0x30
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005f0a:	230b      	movs	r3, #11
 8005f0c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	0852      	lsrs	r2, r2, #1
 8005f14:	01db      	lsls	r3, r3, #7
 8005f16:	4313      	orrs	r3, r2
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	1c59      	adds	r1, r3, #1
 8005f1e:	6079      	str	r1, [r7, #4]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	4413      	add	r3, r2
 8005f24:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	60bb      	str	r3, [r7, #8]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1ed      	bne.n	8005f0e <sum_sfn+0x10>
	return sum;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005f4e:	2100      	movs	r1, #0
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fc88 	bl	8005866 <dir_sdi>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <dir_find+0x24>
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	e0a9      	b.n	80060b8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f64:	23ff      	movs	r3, #255	; 0xff
 8005f66:	753b      	strb	r3, [r7, #20]
 8005f68:	7d3b      	ldrb	r3, [r7, #20]
 8005f6a:	757b      	strb	r3, [r7, #21]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6938      	ldr	r0, [r7, #16]
 8005f7c:	f7ff f89a 	bl	80050b4 <move_window>
 8005f80:	4603      	mov	r3, r0
 8005f82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f040 8090 	bne.w	80060ac <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005f94:	7dbb      	ldrb	r3, [r7, #22]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <dir_find+0x60>
 8005f9a:	2304      	movs	r3, #4
 8005f9c:	75fb      	strb	r3, [r7, #23]
 8005f9e:	e08a      	b.n	80060b6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	330b      	adds	r3, #11
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fac:	73fb      	strb	r3, [r7, #15]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	7bfa      	ldrb	r2, [r7, #15]
 8005fb2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005fb4:	7dbb      	ldrb	r3, [r7, #22]
 8005fb6:	2be5      	cmp	r3, #229	; 0xe5
 8005fb8:	d007      	beq.n	8005fca <dir_find+0x8a>
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d009      	beq.n	8005fd8 <dir_find+0x98>
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b0f      	cmp	r3, #15
 8005fc8:	d006      	beq.n	8005fd8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005fca:	23ff      	movs	r3, #255	; 0xff
 8005fcc:	757b      	strb	r3, [r7, #21]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8005fd6:	e05e      	b.n	8006096 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b0f      	cmp	r3, #15
 8005fdc:	d136      	bne.n	800604c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d154      	bne.n	8006096 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005fec:	7dbb      	ldrb	r3, [r7, #22]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	7b5b      	ldrb	r3, [r3, #13]
 8005ffc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005ffe:	7dbb      	ldrb	r3, [r7, #22]
 8006000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006004:	75bb      	strb	r3, [r7, #22]
 8006006:	7dbb      	ldrb	r3, [r7, #22]
 8006008:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006012:	7dba      	ldrb	r2, [r7, #22]
 8006014:	7d7b      	ldrb	r3, [r7, #21]
 8006016:	429a      	cmp	r2, r3
 8006018:	d115      	bne.n	8006046 <dir_find+0x106>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	330d      	adds	r3, #13
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	7d3a      	ldrb	r2, [r7, #20]
 8006024:	429a      	cmp	r2, r3
 8006026:	d10e      	bne.n	8006046 <dir_find+0x106>
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f7ff fdfc 	bl	8005c30 <cmp_lfn>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <dir_find+0x106>
 800603e:	7d7b      	ldrb	r3, [r7, #21]
 8006040:	3b01      	subs	r3, #1
 8006042:	b2db      	uxtb	r3, r3
 8006044:	e000      	b.n	8006048 <dir_find+0x108>
 8006046:	23ff      	movs	r3, #255	; 0xff
 8006048:	757b      	strb	r3, [r7, #21]
 800604a:	e024      	b.n	8006096 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800604c:	7d7b      	ldrb	r3, [r7, #21]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <dir_find+0x126>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff ff51 	bl	8005efe <sum_sfn>
 800605c:	4603      	mov	r3, r0
 800605e:	461a      	mov	r2, r3
 8006060:	7d3b      	ldrb	r3, [r7, #20]
 8006062:	4293      	cmp	r3, r2
 8006064:	d024      	beq.n	80060b0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <dir_find+0x14a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a18      	ldr	r0, [r3, #32]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3324      	adds	r3, #36	; 0x24
 800607c:	220b      	movs	r2, #11
 800607e:	4619      	mov	r1, r3
 8006080:	f7fe fe25 	bl	8004cce <mem_cmp>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d014      	beq.n	80060b4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800608a:	23ff      	movs	r3, #255	; 0xff
 800608c:	757b      	strb	r3, [r7, #21]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f04f 32ff 	mov.w	r2, #4294967295
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006096:	2100      	movs	r1, #0
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fc6d 	bl	8005978 <dir_next>
 800609e:	4603      	mov	r3, r0
 80060a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f43f af65 	beq.w	8005f74 <dir_find+0x34>
 80060aa:	e004      	b.n	80060b6 <dir_find+0x176>
		if (res != FR_OK) break;
 80060ac:	bf00      	nop
 80060ae:	e002      	b.n	80060b6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80060b0:	bf00      	nop
 80060b2:	e000      	b.n	80060b6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80060b4:	bf00      	nop

	return res;
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08c      	sub	sp, #48	; 0x30
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80060d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <dir_register+0x20>
 80060dc:	2306      	movs	r3, #6
 80060de:	e0e0      	b.n	80062a2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80060e0:	2300      	movs	r3, #0
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
 80060e4:	e002      	b.n	80060ec <dir_register+0x2c>
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	3301      	adds	r3, #1
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f4      	bne.n	80060e6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006102:	f107 030c 	add.w	r3, r7, #12
 8006106:	220c      	movs	r2, #12
 8006108:	4618      	mov	r0, r3
 800610a:	f7fe fda5 	bl	8004c58 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d032      	beq.n	800617e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2240      	movs	r2, #64	; 0x40
 800611c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006120:	2301      	movs	r3, #1
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
 8006124:	e016      	b.n	8006154 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	f107 010c 	add.w	r1, r7, #12
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	f7ff fe53 	bl	8005de0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff ff00 	bl	8005f40 <dir_find>
 8006140:	4603      	mov	r3, r0
 8006142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	3301      	adds	r3, #1
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	2b63      	cmp	r3, #99	; 0x63
 8006158:	d9e5      	bls.n	8006126 <dir_register+0x66>
 800615a:	e000      	b.n	800615e <dir_register+0x9e>
			if (res != FR_OK) break;
 800615c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	2b64      	cmp	r3, #100	; 0x64
 8006162:	d101      	bne.n	8006168 <dir_register+0xa8>
 8006164:	2307      	movs	r3, #7
 8006166:	e09c      	b.n	80062a2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006168:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800616c:	2b04      	cmp	r3, #4
 800616e:	d002      	beq.n	8006176 <dir_register+0xb6>
 8006170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006174:	e095      	b.n	80062a2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006176:	7dfa      	ldrb	r2, [r7, #23]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <dir_register+0xd8>
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	330c      	adds	r3, #12
 800618c:	4a47      	ldr	r2, [pc, #284]	; (80062ac <dir_register+0x1ec>)
 800618e:	fba2 2303 	umull	r2, r3, r2, r3
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	3301      	adds	r3, #1
 8006196:	e000      	b.n	800619a <dir_register+0xda>
 8006198:	2301      	movs	r3, #1
 800619a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800619c:	6a39      	ldr	r1, [r7, #32]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fcc0 	bl	8005b24 <dir_alloc>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80061aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d148      	bne.n	8006244 <dir_register+0x184>
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	623b      	str	r3, [r7, #32]
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d042      	beq.n	8006244 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	015b      	lsls	r3, r3, #5
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff fb4b 	bl	8005866 <dir_sdi>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80061d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d132      	bne.n	8006244 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3324      	adds	r3, #36	; 0x24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fe8b 	bl	8005efe <sum_sfn>
 80061e8:	4603      	mov	r3, r0
 80061ea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	4619      	mov	r1, r3
 80061f2:	69f8      	ldr	r0, [r7, #28]
 80061f4:	f7fe ff5e 	bl	80050b4 <move_window>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80061fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006202:	2b00      	cmp	r3, #0
 8006204:	d11d      	bne.n	8006242 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	6918      	ldr	r0, [r3, #16]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a19      	ldr	r1, [r3, #32]
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	b2da      	uxtb	r2, r3
 8006212:	7efb      	ldrb	r3, [r7, #27]
 8006214:	f7ff fd7c 	bl	8005d10 <put_lfn>
				fs->wflag = 1;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2201      	movs	r2, #1
 800621c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800621e:	2100      	movs	r1, #0
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff fba9 	bl	8005978 <dir_next>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800622c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006230:	2b00      	cmp	r3, #0
 8006232:	d107      	bne.n	8006244 <dir_register+0x184>
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	3b01      	subs	r3, #1
 8006238:	623b      	str	r3, [r7, #32]
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1d5      	bne.n	80061ec <dir_register+0x12c>
 8006240:	e000      	b.n	8006244 <dir_register+0x184>
				if (res != FR_OK) break;
 8006242:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006248:	2b00      	cmp	r3, #0
 800624a:	d128      	bne.n	800629e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	4619      	mov	r1, r3
 8006252:	69f8      	ldr	r0, [r7, #28]
 8006254:	f7fe ff2e 	bl	80050b4 <move_window>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800625e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006262:	2b00      	cmp	r3, #0
 8006264:	d11b      	bne.n	800629e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	2220      	movs	r2, #32
 800626c:	2100      	movs	r1, #0
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fd13 	bl	8004c9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a18      	ldr	r0, [r3, #32]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3324      	adds	r3, #36	; 0x24
 800627c:	220b      	movs	r2, #11
 800627e:	4619      	mov	r1, r3
 8006280:	f7fe fcea 	bl	8004c58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	330c      	adds	r3, #12
 8006290:	f002 0218 	and.w	r2, r2, #24
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2201      	movs	r2, #1
 800629c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800629e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3730      	adds	r7, #48	; 0x30
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	4ec4ec4f 	.word	0x4ec4ec4f

080062b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	61ba      	str	r2, [r7, #24]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4413      	add	r3, r2
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80062de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062e0:	2b1f      	cmp	r3, #31
 80062e2:	d940      	bls.n	8006366 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80062e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062e6:	2b2f      	cmp	r3, #47	; 0x2f
 80062e8:	d006      	beq.n	80062f8 <create_name+0x48>
 80062ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ec:	2b5c      	cmp	r3, #92	; 0x5c
 80062ee:	d110      	bne.n	8006312 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80062f0:	e002      	b.n	80062f8 <create_name+0x48>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	3301      	adds	r3, #1
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	4413      	add	r3, r2
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b2f      	cmp	r3, #47	; 0x2f
 8006302:	d0f6      	beq.n	80062f2 <create_name+0x42>
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	4413      	add	r3, r2
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b5c      	cmp	r3, #92	; 0x5c
 800630e:	d0f0      	beq.n	80062f2 <create_name+0x42>
			break;
 8006310:	e02a      	b.n	8006368 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2bfe      	cmp	r3, #254	; 0xfe
 8006316:	d901      	bls.n	800631c <create_name+0x6c>
 8006318:	2306      	movs	r3, #6
 800631a:	e177      	b.n	800660c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800631c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800631e:	b2db      	uxtb	r3, r3
 8006320:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006324:	2101      	movs	r1, #1
 8006326:	4618      	mov	r0, r3
 8006328:	f001 f9f2 	bl	8007710 <ff_convert>
 800632c:	4603      	mov	r3, r0
 800632e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <create_name+0x8a>
 8006336:	2306      	movs	r3, #6
 8006338:	e168      	b.n	800660c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800633a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800633c:	2b7f      	cmp	r3, #127	; 0x7f
 800633e:	d809      	bhi.n	8006354 <create_name+0xa4>
 8006340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006342:	4619      	mov	r1, r3
 8006344:	48b3      	ldr	r0, [pc, #716]	; (8006614 <create_name+0x364>)
 8006346:	f7fe fce9 	bl	8004d1c <chk_chr>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <create_name+0xa4>
 8006350:	2306      	movs	r3, #6
 8006352:	e15b      	b.n	800660c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	617a      	str	r2, [r7, #20]
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006362:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006364:	e7b4      	b.n	80062d0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006366:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	441a      	add	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006374:	2b1f      	cmp	r3, #31
 8006376:	d801      	bhi.n	800637c <create_name+0xcc>
 8006378:	2304      	movs	r3, #4
 800637a:	e000      	b.n	800637e <create_name+0xce>
 800637c:	2300      	movs	r3, #0
 800637e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006382:	e011      	b.n	80063a8 <create_name+0xf8>
		w = lfn[di - 1];
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800638a:	3b01      	subs	r3, #1
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006398:	2b20      	cmp	r3, #32
 800639a:	d002      	beq.n	80063a2 <create_name+0xf2>
 800639c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800639e:	2b2e      	cmp	r3, #46	; 0x2e
 80063a0:	d106      	bne.n	80063b0 <create_name+0x100>
		di--;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1ea      	bne.n	8006384 <create_name+0xd4>
 80063ae:	e000      	b.n	80063b2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80063b0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	2200      	movs	r2, #0
 80063bc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <create_name+0x118>
 80063c4:	2306      	movs	r3, #6
 80063c6:	e121      	b.n	800660c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3324      	adds	r3, #36	; 0x24
 80063cc:	220b      	movs	r2, #11
 80063ce:	2120      	movs	r1, #32
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fc62 	bl	8004c9a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80063d6:	2300      	movs	r3, #0
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	e002      	b.n	80063e2 <create_name+0x132>
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	3301      	adds	r3, #1
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d0f5      	beq.n	80063dc <create_name+0x12c>
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	2b2e      	cmp	r3, #46	; 0x2e
 80063fc:	d0ee      	beq.n	80063dc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d009      	beq.n	8006418 <create_name+0x168>
 8006404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006408:	f043 0303 	orr.w	r3, r3, #3
 800640c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006410:	e002      	b.n	8006418 <create_name+0x168>
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	3b01      	subs	r3, #1
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <create_name+0x182>
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006424:	3b01      	subs	r3, #1
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	2b2e      	cmp	r3, #46	; 0x2e
 8006430:	d1ef      	bne.n	8006412 <create_name+0x162>

	i = b = 0; ni = 8;
 8006432:	2300      	movs	r3, #0
 8006434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006438:	2300      	movs	r3, #0
 800643a:	623b      	str	r3, [r7, #32]
 800643c:	2308      	movs	r3, #8
 800643e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	61ba      	str	r2, [r7, #24]
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 8090 	beq.w	8006578 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800645a:	2b20      	cmp	r3, #32
 800645c:	d006      	beq.n	800646c <create_name+0x1bc>
 800645e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006460:	2b2e      	cmp	r3, #46	; 0x2e
 8006462:	d10a      	bne.n	800647a <create_name+0x1ca>
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	429a      	cmp	r2, r3
 800646a:	d006      	beq.n	800647a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800646c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006470:	f043 0303 	orr.w	r3, r3, #3
 8006474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006478:	e07d      	b.n	8006576 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	429a      	cmp	r2, r3
 8006480:	d203      	bcs.n	800648a <create_name+0x1da>
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	429a      	cmp	r2, r3
 8006488:	d123      	bne.n	80064d2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b0b      	cmp	r3, #11
 800648e:	d106      	bne.n	800649e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006494:	f043 0303 	orr.w	r3, r3, #3
 8006498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800649c:	e06f      	b.n	800657e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d005      	beq.n	80064b2 <create_name+0x202>
 80064a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064aa:	f043 0303 	orr.w	r3, r3, #3
 80064ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d860      	bhi.n	800657c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	2308      	movs	r3, #8
 80064c0:	623b      	str	r3, [r7, #32]
 80064c2:	230b      	movs	r3, #11
 80064c4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80064c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80064d0:	e051      	b.n	8006576 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80064d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d4:	2b7f      	cmp	r3, #127	; 0x7f
 80064d6:	d914      	bls.n	8006502 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80064d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064da:	2100      	movs	r1, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	f001 f917 	bl	8007710 <ff_convert>
 80064e2:	4603      	mov	r3, r0
 80064e4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80064e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <create_name+0x246>
 80064ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064ee:	3b80      	subs	r3, #128	; 0x80
 80064f0:	4a49      	ldr	r2, [pc, #292]	; (8006618 <create_name+0x368>)
 80064f2:	5cd3      	ldrb	r3, [r2, r3]
 80064f4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80064f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064fa:	f043 0302 	orr.w	r3, r3, #2
 80064fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <create_name+0x268>
 8006508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800650a:	4619      	mov	r1, r3
 800650c:	4843      	ldr	r0, [pc, #268]	; (800661c <create_name+0x36c>)
 800650e:	f7fe fc05 	bl	8004d1c <chk_chr>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d008      	beq.n	800652a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006518:	235f      	movs	r3, #95	; 0x5f
 800651a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800651c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006520:	f043 0303 	orr.w	r3, r3, #3
 8006524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006528:	e01b      	b.n	8006562 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800652a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800652c:	2b40      	cmp	r3, #64	; 0x40
 800652e:	d909      	bls.n	8006544 <create_name+0x294>
 8006530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006532:	2b5a      	cmp	r3, #90	; 0x5a
 8006534:	d806      	bhi.n	8006544 <create_name+0x294>
					b |= 2;
 8006536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800653a:	f043 0302 	orr.w	r3, r3, #2
 800653e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006542:	e00e      	b.n	8006562 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006546:	2b60      	cmp	r3, #96	; 0x60
 8006548:	d90b      	bls.n	8006562 <create_name+0x2b2>
 800654a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800654c:	2b7a      	cmp	r3, #122	; 0x7a
 800654e:	d808      	bhi.n	8006562 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006550:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006554:	f043 0301 	orr.w	r3, r3, #1
 8006558:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800655c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800655e:	3b20      	subs	r3, #32
 8006560:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	623a      	str	r2, [r7, #32]
 8006568:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800656a:	b2d1      	uxtb	r1, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	4413      	add	r3, r2
 8006570:	460a      	mov	r2, r1
 8006572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006576:	e763      	b.n	8006440 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006578:	bf00      	nop
 800657a:	e000      	b.n	800657e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800657c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006584:	2be5      	cmp	r3, #229	; 0xe5
 8006586:	d103      	bne.n	8006590 <create_name+0x2e0>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2205      	movs	r2, #5
 800658c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b08      	cmp	r3, #8
 8006594:	d104      	bne.n	80065a0 <create_name+0x2f0>
 8006596:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80065a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065a4:	f003 030c 	and.w	r3, r3, #12
 80065a8:	2b0c      	cmp	r3, #12
 80065aa:	d005      	beq.n	80065b8 <create_name+0x308>
 80065ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d105      	bne.n	80065c4 <create_name+0x314>
 80065b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065bc:	f043 0302 	orr.w	r3, r3, #2
 80065c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80065c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d117      	bne.n	8006600 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80065d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d105      	bne.n	80065e8 <create_name+0x338>
 80065dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065e0:	f043 0310 	orr.w	r3, r3, #16
 80065e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80065e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065ec:	f003 030c 	and.w	r3, r3, #12
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d105      	bne.n	8006600 <create_name+0x350>
 80065f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f8:	f043 0308 	orr.w	r3, r3, #8
 80065fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006606:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800660a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800660c:	4618      	mov	r0, r3
 800660e:	3728      	adds	r7, #40	; 0x28
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	08008218 	.word	0x08008218
 8006618:	08008270 	.word	0x08008270
 800661c:	08008224 	.word	0x08008224

08006620 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006634:	e002      	b.n	800663c <follow_path+0x1c>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b2f      	cmp	r3, #47	; 0x2f
 8006642:	d0f8      	beq.n	8006636 <follow_path+0x16>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b5c      	cmp	r3, #92	; 0x5c
 800664a:	d0f4      	beq.n	8006636 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2200      	movs	r2, #0
 8006650:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b1f      	cmp	r3, #31
 8006658:	d80a      	bhi.n	8006670 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2280      	movs	r2, #128	; 0x80
 800665e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006662:	2100      	movs	r1, #0
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff f8fe 	bl	8005866 <dir_sdi>
 800666a:	4603      	mov	r3, r0
 800666c:	75fb      	strb	r3, [r7, #23]
 800666e:	e048      	b.n	8006702 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006670:	463b      	mov	r3, r7
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff fe1b 	bl	80062b0 <create_name>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d139      	bne.n	80066f8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff fc5b 	bl	8005f40 <dir_find>
 800668a:	4603      	mov	r3, r0
 800668c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006694:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d12c      	bne.n	80066fc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d127      	bne.n	80066fc <follow_path+0xdc>
 80066ac:	2305      	movs	r3, #5
 80066ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80066b0:	e024      	b.n	80066fc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80066b2:	7afb      	ldrb	r3, [r7, #11]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d121      	bne.n	8006700 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	799b      	ldrb	r3, [r3, #6]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 80066c8:	2305      	movs	r3, #5
 80066ca:	75fb      	strb	r3, [r7, #23]
 80066cc:	e019      	b.n	8006702 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	8992      	ldrh	r2, [r2, #12]
 80066dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80066e0:	fb02 f200 	mul.w	r2, r2, r0
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	440b      	add	r3, r1
 80066e8:	4619      	mov	r1, r3
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff fa61 	bl	8005bb2 <ld_clust>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066f6:	e7bb      	b.n	8006670 <follow_path+0x50>
			if (res != FR_OK) break;
 80066f8:	bf00      	nop
 80066fa:	e002      	b.n	8006702 <follow_path+0xe2>
				break;
 80066fc:	bf00      	nop
 80066fe:	e000      	b.n	8006702 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006700:	bf00      	nop
			}
		}
	}

	return res;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006714:	f04f 33ff 	mov.w	r3, #4294967295
 8006718:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d031      	beq.n	8006786 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	e002      	b.n	8006730 <get_ldnumber+0x24>
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	3301      	adds	r3, #1
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b1f      	cmp	r3, #31
 8006736:	d903      	bls.n	8006740 <get_ldnumber+0x34>
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b3a      	cmp	r3, #58	; 0x3a
 800673e:	d1f4      	bne.n	800672a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b3a      	cmp	r3, #58	; 0x3a
 8006746:	d11c      	bne.n	8006782 <get_ldnumber+0x76>
			tp = *path;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	60fa      	str	r2, [r7, #12]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	3b30      	subs	r3, #48	; 0x30
 8006758:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b09      	cmp	r3, #9
 800675e:	d80e      	bhi.n	800677e <get_ldnumber+0x72>
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	429a      	cmp	r2, r3
 8006766:	d10a      	bne.n	800677e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <get_ldnumber+0x72>
					vol = (int)i;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	3301      	adds	r3, #1
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	e002      	b.n	8006788 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006782:	2300      	movs	r3, #0
 8006784:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006786:	693b      	ldr	r3, [r7, #16]
}
 8006788:	4618      	mov	r0, r3
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	70da      	strb	r2, [r3, #3]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f04f 32ff 	mov.w	r2, #4294967295
 80067aa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7fe fc80 	bl	80050b4 <move_window>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <check_fs+0x2a>
 80067ba:	2304      	movs	r3, #4
 80067bc:	e038      	b.n	8006830 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3338      	adds	r3, #56	; 0x38
 80067c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe f9c4 	bl	8004b54 <ld_word>
 80067cc:	4603      	mov	r3, r0
 80067ce:	461a      	mov	r2, r3
 80067d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d001      	beq.n	80067dc <check_fs+0x48>
 80067d8:	2303      	movs	r3, #3
 80067da:	e029      	b.n	8006830 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067e2:	2be9      	cmp	r3, #233	; 0xe9
 80067e4:	d009      	beq.n	80067fa <check_fs+0x66>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067ec:	2beb      	cmp	r3, #235	; 0xeb
 80067ee:	d11e      	bne.n	800682e <check_fs+0x9a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067f6:	2b90      	cmp	r3, #144	; 0x90
 80067f8:	d119      	bne.n	800682e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3338      	adds	r3, #56	; 0x38
 80067fe:	3336      	adds	r3, #54	; 0x36
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe f9bf 	bl	8004b84 <ld_dword>
 8006806:	4603      	mov	r3, r0
 8006808:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800680c:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <check_fs+0xa4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <check_fs+0x82>
 8006812:	2300      	movs	r3, #0
 8006814:	e00c      	b.n	8006830 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3338      	adds	r3, #56	; 0x38
 800681a:	3352      	adds	r3, #82	; 0x52
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe f9b1 	bl	8004b84 <ld_dword>
 8006822:	4602      	mov	r2, r0
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <check_fs+0xa8>)
 8006826:	429a      	cmp	r2, r3
 8006828:	d101      	bne.n	800682e <check_fs+0x9a>
 800682a:	2300      	movs	r3, #0
 800682c:	e000      	b.n	8006830 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800682e:	2302      	movs	r3, #2
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	00544146 	.word	0x00544146
 800683c:	33544146 	.word	0x33544146

08006840 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b096      	sub	sp, #88	; 0x58
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff ff59 	bl	800670c <get_ldnumber>
 800685a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800685c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685e:	2b00      	cmp	r3, #0
 8006860:	da01      	bge.n	8006866 <find_volume+0x26>
 8006862:	230b      	movs	r3, #11
 8006864:	e268      	b.n	8006d38 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006866:	4ab0      	ldr	r2, [pc, #704]	; (8006b28 <find_volume+0x2e8>)
 8006868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <find_volume+0x3a>
 8006876:	230c      	movs	r3, #12
 8006878:	e25e      	b.n	8006d38 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800687e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01a      	beq.n	80068c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe f8bf 	bl	8004a18 <disk_status>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80068a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10c      	bne.n	80068c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <find_volume+0x82>
 80068b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80068be:	230a      	movs	r3, #10
 80068c0:	e23a      	b.n	8006d38 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80068c2:	2300      	movs	r3, #0
 80068c4:	e238      	b.n	8006d38 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	2200      	movs	r2, #0
 80068ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80068cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe f8b7 	bl	8004a4c <disk_initialize>
 80068de:	4603      	mov	r3, r0
 80068e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80068e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80068f0:	2303      	movs	r3, #3
 80068f2:	e221      	b.n	8006d38 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <find_volume+0xca>
 80068fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006906:	230a      	movs	r3, #10
 8006908:	e216      	b.n	8006d38 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800690a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690c:	7858      	ldrb	r0, [r3, #1]
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	330c      	adds	r3, #12
 8006912:	461a      	mov	r2, r3
 8006914:	2102      	movs	r1, #2
 8006916:	f7fe f8ff 	bl	8004b18 <disk_ioctl>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <find_volume+0xe4>
 8006920:	2301      	movs	r3, #1
 8006922:	e209      	b.n	8006d38 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	899b      	ldrh	r3, [r3, #12]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692c:	d80d      	bhi.n	800694a <find_volume+0x10a>
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	899b      	ldrh	r3, [r3, #12]
 8006932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006936:	d308      	bcc.n	800694a <find_volume+0x10a>
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	899b      	ldrh	r3, [r3, #12]
 800693c:	461a      	mov	r2, r3
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	899b      	ldrh	r3, [r3, #12]
 8006942:	3b01      	subs	r3, #1
 8006944:	4013      	ands	r3, r2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <find_volume+0x10e>
 800694a:	2301      	movs	r3, #1
 800694c:	e1f4      	b.n	8006d38 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006952:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006954:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006956:	f7ff ff1d 	bl	8006794 <check_fs>
 800695a:	4603      	mov	r3, r0
 800695c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006960:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006964:	2b02      	cmp	r3, #2
 8006966:	d14b      	bne.n	8006a00 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006968:	2300      	movs	r3, #0
 800696a:	643b      	str	r3, [r7, #64]	; 0x40
 800696c:	e01f      	b.n	80069ae <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800697c:	4413      	add	r3, r2
 800697e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	3304      	adds	r3, #4
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d006      	beq.n	8006998 <find_volume+0x158>
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	3308      	adds	r3, #8
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe f8f8 	bl	8004b84 <ld_dword>
 8006994:	4602      	mov	r2, r0
 8006996:	e000      	b.n	800699a <find_volume+0x15a>
 8006998:	2200      	movs	r2, #0
 800699a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80069a2:	440b      	add	r3, r1
 80069a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80069a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069aa:	3301      	adds	r3, #1
 80069ac:	643b      	str	r3, [r7, #64]	; 0x40
 80069ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d9dc      	bls.n	800696e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80069b4:	2300      	movs	r3, #0
 80069b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80069b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <find_volume+0x184>
 80069be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c0:	3b01      	subs	r3, #1
 80069c2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80069c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80069cc:	4413      	add	r3, r2
 80069ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80069d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80069d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d005      	beq.n	80069e6 <find_volume+0x1a6>
 80069da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069de:	f7ff fed9 	bl	8006794 <check_fs>
 80069e2:	4603      	mov	r3, r0
 80069e4:	e000      	b.n	80069e8 <find_volume+0x1a8>
 80069e6:	2303      	movs	r3, #3
 80069e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80069ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d905      	bls.n	8006a00 <find_volume+0x1c0>
 80069f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f6:	3301      	adds	r3, #1
 80069f8:	643b      	str	r3, [r7, #64]	; 0x40
 80069fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d9e1      	bls.n	80069c4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d101      	bne.n	8006a0c <find_volume+0x1cc>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e195      	b.n	8006d38 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d901      	bls.n	8006a18 <find_volume+0x1d8>
 8006a14:	230d      	movs	r3, #13
 8006a16:	e18f      	b.n	8006d38 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	3338      	adds	r3, #56	; 0x38
 8006a1c:	330b      	adds	r3, #11
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe f898 	bl	8004b54 <ld_word>
 8006a24:	4603      	mov	r3, r0
 8006a26:	461a      	mov	r2, r3
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	899b      	ldrh	r3, [r3, #12]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d001      	beq.n	8006a34 <find_volume+0x1f4>
 8006a30:	230d      	movs	r3, #13
 8006a32:	e181      	b.n	8006d38 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	3338      	adds	r3, #56	; 0x38
 8006a38:	3316      	adds	r3, #22
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe f88a 	bl	8004b54 <ld_word>
 8006a40:	4603      	mov	r3, r0
 8006a42:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <find_volume+0x218>
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	3338      	adds	r3, #56	; 0x38
 8006a4e:	3324      	adds	r3, #36	; 0x24
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fe f897 	bl	8004b84 <ld_dword>
 8006a56:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a5c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	789b      	ldrb	r3, [r3, #2]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d005      	beq.n	8006a7c <find_volume+0x23c>
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	789b      	ldrb	r3, [r3, #2]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d001      	beq.n	8006a7c <find_volume+0x23c>
 8006a78:	230d      	movs	r3, #13
 8006a7a:	e15d      	b.n	8006d38 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	789b      	ldrb	r3, [r3, #2]
 8006a80:	461a      	mov	r2, r3
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	fb02 f303 	mul.w	r3, r2, r3
 8006a88:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	895b      	ldrh	r3, [r3, #10]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d008      	beq.n	8006ab0 <find_volume+0x270>
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa0:	895b      	ldrh	r3, [r3, #10]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	895b      	ldrh	r3, [r3, #10]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <find_volume+0x274>
 8006ab0:	230d      	movs	r3, #13
 8006ab2:	e141      	b.n	8006d38 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	3338      	adds	r3, #56	; 0x38
 8006ab8:	3311      	adds	r3, #17
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe f84a 	bl	8004b54 <ld_word>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	891b      	ldrh	r3, [r3, #8]
 8006acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ace:	8992      	ldrh	r2, [r2, #12]
 8006ad0:	0952      	lsrs	r2, r2, #5
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ad8:	fb02 f201 	mul.w	r2, r2, r1
 8006adc:	1a9b      	subs	r3, r3, r2
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <find_volume+0x2a8>
 8006ae4:	230d      	movs	r3, #13
 8006ae6:	e127      	b.n	8006d38 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	3338      	adds	r3, #56	; 0x38
 8006aec:	3313      	adds	r3, #19
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe f830 	bl	8004b54 <ld_word>
 8006af4:	4603      	mov	r3, r0
 8006af6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <find_volume+0x2cc>
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	3338      	adds	r3, #56	; 0x38
 8006b02:	3320      	adds	r3, #32
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fe f83d 	bl	8004b84 <ld_dword>
 8006b0a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	3338      	adds	r3, #56	; 0x38
 8006b10:	330e      	adds	r3, #14
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe f81e 	bl	8004b54 <ld_word>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006b1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <find_volume+0x2ec>
 8006b22:	230d      	movs	r3, #13
 8006b24:	e108      	b.n	8006d38 <find_volume+0x4f8>
 8006b26:	bf00      	nop
 8006b28:	200000c8 	.word	0x200000c8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006b2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b30:	4413      	add	r3, r2
 8006b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b34:	8911      	ldrh	r1, [r2, #8]
 8006b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b38:	8992      	ldrh	r2, [r2, #12]
 8006b3a:	0952      	lsrs	r2, r2, #5
 8006b3c:	b292      	uxth	r2, r2
 8006b3e:	fbb1 f2f2 	udiv	r2, r1, r2
 8006b42:	b292      	uxth	r2, r2
 8006b44:	4413      	add	r3, r2
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d201      	bcs.n	8006b54 <find_volume+0x314>
 8006b50:	230d      	movs	r3, #13
 8006b52:	e0f1      	b.n	8006d38 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b5c:	8952      	ldrh	r2, [r2, #10]
 8006b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <find_volume+0x32e>
 8006b6a:	230d      	movs	r3, #13
 8006b6c:	e0e4      	b.n	8006d38 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d802      	bhi.n	8006b84 <find_volume+0x344>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d802      	bhi.n	8006b94 <find_volume+0x354>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	1c9a      	adds	r2, r3, #2
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ba2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba6:	441a      	add	r2, r3
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006bac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	441a      	add	r2, r3
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006bb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d11e      	bne.n	8006bfc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	3338      	adds	r3, #56	; 0x38
 8006bc2:	332a      	adds	r3, #42	; 0x2a
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fd ffc5 	bl	8004b54 <ld_word>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <find_volume+0x394>
 8006bd0:	230d      	movs	r3, #13
 8006bd2:	e0b1      	b.n	8006d38 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	891b      	ldrh	r3, [r3, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <find_volume+0x3a0>
 8006bdc:	230d      	movs	r3, #13
 8006bde:	e0ab      	b.n	8006d38 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	3338      	adds	r3, #56	; 0x38
 8006be4:	332c      	adds	r3, #44	; 0x2c
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fd ffcc 	bl	8004b84 <ld_dword>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8006bfa:	e01f      	b.n	8006c3c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	891b      	ldrh	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <find_volume+0x3c8>
 8006c04:	230d      	movs	r3, #13
 8006c06:	e097      	b.n	8006d38 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0e:	441a      	add	r2, r3
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d103      	bne.n	8006c24 <find_volume+0x3e4>
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	e00a      	b.n	8006c3a <find_volume+0x3fa>
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	4413      	add	r3, r2
 8006c2e:	085a      	lsrs	r2, r3, #1
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006c3a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	6a1a      	ldr	r2, [r3, #32]
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	899b      	ldrh	r3, [r3, #12]
 8006c44:	4619      	mov	r1, r3
 8006c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c48:	440b      	add	r3, r1
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c4e:	8989      	ldrh	r1, [r1, #12]
 8006c50:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d201      	bcs.n	8006c5c <find_volume+0x41c>
 8006c58:	230d      	movs	r3, #13
 8006c5a:	e06d      	b.n	8006d38 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c62:	619a      	str	r2, [r3, #24]
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	699a      	ldr	r2, [r3, #24]
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	2280      	movs	r2, #128	; 0x80
 8006c70:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006c72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d149      	bne.n	8006d0e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7c:	3338      	adds	r3, #56	; 0x38
 8006c7e:	3330      	adds	r3, #48	; 0x30
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fd ff67 	bl	8004b54 <ld_word>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d140      	bne.n	8006d0e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c8e:	3301      	adds	r3, #1
 8006c90:	4619      	mov	r1, r3
 8006c92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c94:	f7fe fa0e 	bl	80050b4 <move_window>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d137      	bne.n	8006d0e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	3338      	adds	r3, #56	; 0x38
 8006ca8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fd ff51 	bl	8004b54 <ld_word>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d127      	bne.n	8006d0e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	3338      	adds	r3, #56	; 0x38
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fd ff5e 	bl	8004b84 <ld_dword>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <find_volume+0x500>)
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d11e      	bne.n	8006d0e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	3338      	adds	r3, #56	; 0x38
 8006cd4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fd ff53 	bl	8004b84 <ld_dword>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <find_volume+0x504>)
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d113      	bne.n	8006d0e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	3338      	adds	r3, #56	; 0x38
 8006cea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fd ff48 	bl	8004b84 <ld_dword>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfc:	3338      	adds	r3, #56	; 0x38
 8006cfe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fd ff3e 	bl	8004b84 <ld_dword>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006d14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006d16:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <find_volume+0x508>)
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <find_volume+0x508>)
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <find_volume+0x508>)
 8006d24:	881a      	ldrh	r2, [r3, #0]
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	4a07      	ldr	r2, [pc, #28]	; (8006d4c <find_volume+0x50c>)
 8006d2e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006d30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d32:	f7fe f957 	bl	8004fe4 <clear_lock>
#endif
	return FR_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3758      	adds	r7, #88	; 0x58
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	41615252 	.word	0x41615252
 8006d44:	61417272 	.word	0x61417272
 8006d48:	200000cc 	.word	0x200000cc
 8006d4c:	200000f0 	.word	0x200000f0

08006d50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006d5a:	2309      	movs	r3, #9
 8006d5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01c      	beq.n	8006d9e <validate+0x4e>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d018      	beq.n	8006d9e <validate+0x4e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d013      	beq.n	8006d9e <validate+0x4e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	889a      	ldrh	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	88db      	ldrh	r3, [r3, #6]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d10c      	bne.n	8006d9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fd fe44 	bl	8004a18 <disk_status>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <validate+0x4e>
			res = FR_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d102      	bne.n	8006daa <validate+0x5a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	e000      	b.n	8006dac <validate+0x5c>
 8006daa:	2300      	movs	r3, #0
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	6013      	str	r3, [r2, #0]
	return res;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b088      	sub	sp, #32
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006dce:	f107 0310 	add.w	r3, r7, #16
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff fc9a 	bl	800670c <get_ldnumber>
 8006dd8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	da01      	bge.n	8006de4 <f_mount+0x28>
 8006de0:	230b      	movs	r3, #11
 8006de2:	e02b      	b.n	8006e3c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006de4:	4a17      	ldr	r2, [pc, #92]	; (8006e44 <f_mount+0x88>)
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006df4:	69b8      	ldr	r0, [r7, #24]
 8006df6:	f7fe f8f5 	bl	8004fe4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	490d      	ldr	r1, [pc, #52]	; (8006e44 <f_mount+0x88>)
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <f_mount+0x66>
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d001      	beq.n	8006e26 <f_mount+0x6a>
 8006e22:	2300      	movs	r3, #0
 8006e24:	e00a      	b.n	8006e3c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006e26:	f107 010c 	add.w	r1, r7, #12
 8006e2a:	f107 0308 	add.w	r3, r7, #8
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff fd05 	bl	8006840 <find_volume>
 8006e36:	4603      	mov	r3, r0
 8006e38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3720      	adds	r7, #32
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	200000c8 	.word	0x200000c8

08006e48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b09a      	sub	sp, #104	; 0x68
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <f_open+0x18>
 8006e5c:	2309      	movs	r3, #9
 8006e5e:	e1bb      	b.n	80071d8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006e68:	79fa      	ldrb	r2, [r7, #7]
 8006e6a:	f107 0114 	add.w	r1, r7, #20
 8006e6e:	f107 0308 	add.w	r3, r7, #8
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff fce4 	bl	8006840 <find_volume>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006e7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 819f 	bne.w	80071c6 <f_open+0x37e>
		dj.obj.fs = fs;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	f107 0318 	add.w	r3, r7, #24
 8006e92:	4611      	mov	r1, r2
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff fbc3 	bl	8006620 <follow_path>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d11a      	bne.n	8006ede <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006ea8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	da03      	bge.n	8006eba <f_open+0x72>
				res = FR_INVALID_NAME;
 8006eb2:	2306      	movs	r3, #6
 8006eb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006eb8:	e011      	b.n	8006ede <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	f023 0301 	bic.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	bf14      	ite	ne
 8006ec4:	2301      	movne	r3, #1
 8006ec6:	2300      	moveq	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f107 0318 	add.w	r3, r7, #24
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fd ff3e 	bl	8004d54 <chk_lock>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	f003 031c 	and.w	r3, r3, #28
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d07f      	beq.n	8006fe8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006ee8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d017      	beq.n	8006f20 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006ef0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d10e      	bne.n	8006f16 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006ef8:	f7fd ff88 	bl	8004e0c <enq_lock>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d006      	beq.n	8006f10 <f_open+0xc8>
 8006f02:	f107 0318 	add.w	r3, r7, #24
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff f8da 	bl	80060c0 <dir_register>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	e000      	b.n	8006f12 <f_open+0xca>
 8006f10:	2312      	movs	r3, #18
 8006f12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	f043 0308 	orr.w	r3, r3, #8
 8006f1c:	71fb      	strb	r3, [r7, #7]
 8006f1e:	e010      	b.n	8006f42 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f20:	7fbb      	ldrb	r3, [r7, #30]
 8006f22:	f003 0311 	and.w	r3, r3, #17
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <f_open+0xea>
					res = FR_DENIED;
 8006f2a:	2307      	movs	r3, #7
 8006f2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006f30:	e007      	b.n	8006f42 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <f_open+0xfa>
 8006f3c:	2308      	movs	r3, #8
 8006f3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006f42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d168      	bne.n	800701c <f_open+0x1d4>
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d063      	beq.n	800701c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006f54:	f7fd fd02 	bl	800495c <get_fattime>
 8006f58:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	330e      	adds	r3, #14
 8006f5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fd fe4d 	bl	8004c00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	3316      	adds	r3, #22
 8006f6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fd fe47 	bl	8004c00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	330b      	adds	r3, #11
 8006f76:	2220      	movs	r2, #32
 8006f78:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe fe16 	bl	8005bb2 <ld_clust>
 8006f86:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe fe2e 	bl	8005bf0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	331c      	adds	r3, #28
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fd fe30 	bl	8004c00 <st_dword>
					fs->wflag = 1;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d037      	beq.n	800701c <f_open+0x1d4>
						dw = fs->winsect;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006fb2:	f107 0318 	add.w	r3, r7, #24
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fb1e 	bl	80055fc <remove_chain>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006fc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d126      	bne.n	800701c <f_open+0x1d4>
							res = move_window(fs, dw);
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe f86e 	bl	80050b4 <move_window>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fe2:	3a01      	subs	r2, #1
 8006fe4:	615a      	str	r2, [r3, #20]
 8006fe6:	e019      	b.n	800701c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006fe8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d115      	bne.n	800701c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006ff0:	7fbb      	ldrb	r3, [r7, #30]
 8006ff2:	f003 0310 	and.w	r3, r3, #16
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007000:	e00c      	b.n	800701c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d007      	beq.n	800701c <f_open+0x1d4>
 800700c:	7fbb      	ldrb	r3, [r7, #30]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <f_open+0x1d4>
						res = FR_DENIED;
 8007016:	2307      	movs	r3, #7
 8007018:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800701c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007020:	2b00      	cmp	r3, #0
 8007022:	d128      	bne.n	8007076 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007034:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800703e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	f023 0301 	bic.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	f107 0318 	add.w	r3, r7, #24
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f7fd fef7 	bl	8004e50 <inc_lock>
 8007062:	4602      	mov	r2, r0
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <f_open+0x22e>
 8007070:	2302      	movs	r3, #2
 8007072:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007076:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800707a:	2b00      	cmp	r3, #0
 800707c:	f040 80a3 	bne.w	80071c6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007084:	4611      	mov	r1, r2
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fd93 	bl	8005bb2 <ld_clust>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	331c      	adds	r3, #28
 8007096:	4618      	mov	r0, r3
 8007098:	f7fd fd74 	bl	8004b84 <ld_dword>
 800709c:	4602      	mov	r2, r0
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	88da      	ldrh	r2, [r3, #6]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	79fa      	ldrb	r2, [r7, #7]
 80070ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3330      	adds	r3, #48	; 0x30
 80070d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070d6:	2100      	movs	r1, #0
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fd fdde 	bl	8004c9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d06e      	beq.n	80071c6 <f_open+0x37e>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d06a      	beq.n	80071c6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	895b      	ldrh	r3, [r3, #10]
 80070fc:	461a      	mov	r2, r3
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	899b      	ldrh	r3, [r3, #12]
 8007102:	fb03 f302 	mul.w	r3, r3, r2
 8007106:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007114:	e016      	b.n	8007144 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe f887 	bl	800522e <get_fat>
 8007120:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007124:	2b01      	cmp	r3, #1
 8007126:	d802      	bhi.n	800712e <f_open+0x2e6>
 8007128:	2302      	movs	r3, #2
 800712a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800712e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007134:	d102      	bne.n	800713c <f_open+0x2f4>
 8007136:	2301      	movs	r3, #1
 8007138:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800713c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800713e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007144:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007148:	2b00      	cmp	r3, #0
 800714a:	d103      	bne.n	8007154 <f_open+0x30c>
 800714c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800714e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007150:	429a      	cmp	r2, r3
 8007152:	d8e0      	bhi.n	8007116 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007158:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800715a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800715e:	2b00      	cmp	r3, #0
 8007160:	d131      	bne.n	80071c6 <f_open+0x37e>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	899b      	ldrh	r3, [r3, #12]
 8007166:	461a      	mov	r2, r3
 8007168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800716a:	fbb3 f1f2 	udiv	r1, r3, r2
 800716e:	fb02 f201 	mul.w	r2, r2, r1
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d026      	beq.n	80071c6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe f837 	bl	80051f0 <clust2sect>
 8007182:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007186:	2b00      	cmp	r3, #0
 8007188:	d103      	bne.n	8007192 <f_open+0x34a>
						res = FR_INT_ERR;
 800718a:	2302      	movs	r3, #2
 800718c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007190:	e019      	b.n	80071c6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	899b      	ldrh	r3, [r3, #12]
 8007196:	461a      	mov	r2, r3
 8007198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800719a:	fbb3 f2f2 	udiv	r2, r3, r2
 800719e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a0:	441a      	add	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	7858      	ldrb	r0, [r3, #1]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a1a      	ldr	r2, [r3, #32]
 80071b4:	2301      	movs	r3, #1
 80071b6:	f7fd fc6f 	bl	8004a98 <disk_read>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <f_open+0x37e>
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80071c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <f_open+0x38c>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80071d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3768      	adds	r7, #104	; 0x68
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08c      	sub	sp, #48	; 0x30
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f107 0210 	add.w	r2, r7, #16
 80071fe:	4611      	mov	r1, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff fda5 	bl	8006d50 <validate>
 8007206:	4603      	mov	r3, r0
 8007208:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800720c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007210:	2b00      	cmp	r3, #0
 8007212:	d107      	bne.n	8007224 <f_write+0x44>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	7d5b      	ldrb	r3, [r3, #21]
 8007218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800721c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <f_write+0x4a>
 8007224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007228:	e16a      	b.n	8007500 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	7d1b      	ldrb	r3, [r3, #20]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <f_write+0x5a>
 8007236:	2307      	movs	r3, #7
 8007238:	e162      	b.n	8007500 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	441a      	add	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	429a      	cmp	r2, r3
 8007248:	f080 814c 	bcs.w	80074e4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	43db      	mvns	r3, r3
 8007252:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007254:	e146      	b.n	80074e4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	8992      	ldrh	r2, [r2, #12]
 800725e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007262:	fb02 f201 	mul.w	r2, r2, r1
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	2b00      	cmp	r3, #0
 800726a:	f040 80f1 	bne.w	8007450 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	8992      	ldrh	r2, [r2, #12]
 8007276:	fbb3 f3f2 	udiv	r3, r3, r2
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	8952      	ldrh	r2, [r2, #10]
 800727e:	3a01      	subs	r2, #1
 8007280:	4013      	ands	r3, r2
 8007282:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d143      	bne.n	8007312 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	d11a      	bne.n	80072d4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fa0f 	bl	80056c6 <create_chain>
 80072a8:	62b8      	str	r0, [r7, #40]	; 0x28
 80072aa:	e013      	b.n	80072d4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	4619      	mov	r1, r3
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7fe fa9b 	bl	80057f6 <clmt_clust>
 80072c0:	62b8      	str	r0, [r7, #40]	; 0x28
 80072c2:	e007      	b.n	80072d4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fe f9fa 	bl	80056c6 <create_chain>
 80072d2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 8109 	beq.w	80074ee <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d104      	bne.n	80072ec <f_write+0x10c>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2202      	movs	r2, #2
 80072e6:	755a      	strb	r2, [r3, #21]
 80072e8:	2302      	movs	r3, #2
 80072ea:	e109      	b.n	8007500 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f2:	d104      	bne.n	80072fe <f_write+0x11e>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2201      	movs	r2, #1
 80072f8:	755a      	strb	r2, [r3, #21]
 80072fa:	2301      	movs	r3, #1
 80072fc:	e100      	b.n	8007500 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007302:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <f_write+0x132>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007310:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	7d1b      	ldrb	r3, [r3, #20]
 8007316:	b25b      	sxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	da18      	bge.n	800734e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	7858      	ldrb	r0, [r3, #1]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a1a      	ldr	r2, [r3, #32]
 800732a:	2301      	movs	r3, #1
 800732c:	f7fd fbd4 	bl	8004ad8 <disk_write>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d004      	beq.n	8007340 <f_write+0x160>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	755a      	strb	r2, [r3, #21]
 800733c:	2301      	movs	r3, #1
 800733e:	e0df      	b.n	8007500 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	7d1b      	ldrb	r3, [r3, #20]
 8007344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007348:	b2da      	uxtb	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	4619      	mov	r1, r3
 8007356:	4610      	mov	r0, r2
 8007358:	f7fd ff4a 	bl	80051f0 <clust2sect>
 800735c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <f_write+0x18e>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2202      	movs	r2, #2
 8007368:	755a      	strb	r2, [r3, #21]
 800736a:	2302      	movs	r3, #2
 800736c:	e0c8      	b.n	8007500 <f_write+0x320>
			sect += csect;
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	4413      	add	r3, r2
 8007374:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	899b      	ldrh	r3, [r3, #12]
 800737a:	461a      	mov	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007382:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d043      	beq.n	8007412 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	4413      	add	r3, r2
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	8952      	ldrh	r2, [r2, #10]
 8007394:	4293      	cmp	r3, r2
 8007396:	d905      	bls.n	80073a4 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	895b      	ldrh	r3, [r3, #10]
 800739c:	461a      	mov	r2, r3
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	7858      	ldrb	r0, [r3, #1]
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	69f9      	ldr	r1, [r7, #28]
 80073ae:	f7fd fb93 	bl	8004ad8 <disk_write>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d004      	beq.n	80073c2 <f_write+0x1e2>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	755a      	strb	r2, [r3, #21]
 80073be:	2301      	movs	r3, #1
 80073c0:	e09e      	b.n	8007500 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a1a      	ldr	r2, [r3, #32]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	6a3a      	ldr	r2, [r7, #32]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d918      	bls.n	8007402 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1a      	ldr	r2, [r3, #32]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	8992      	ldrh	r2, [r2, #12]
 80073e2:	fb02 f303 	mul.w	r3, r2, r3
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	18d1      	adds	r1, r2, r3
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	899b      	ldrh	r3, [r3, #12]
 80073ee:	461a      	mov	r2, r3
 80073f0:	f7fd fc32 	bl	8004c58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	7d1b      	ldrb	r3, [r3, #20]
 80073f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	899b      	ldrh	r3, [r3, #12]
 8007406:	461a      	mov	r2, r3
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	fb02 f303 	mul.w	r3, r2, r3
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007410:	e04b      	b.n	80074aa <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	429a      	cmp	r2, r3
 800741a:	d016      	beq.n	800744a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	699a      	ldr	r2, [r3, #24]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007424:	429a      	cmp	r2, r3
 8007426:	d210      	bcs.n	800744a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	7858      	ldrb	r0, [r3, #1]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007432:	2301      	movs	r3, #1
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	f7fd fb2f 	bl	8004a98 <disk_read>
 800743a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	755a      	strb	r2, [r3, #21]
 8007446:	2301      	movs	r3, #1
 8007448:	e05a      	b.n	8007500 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	899b      	ldrh	r3, [r3, #12]
 8007454:	4618      	mov	r0, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	8992      	ldrh	r2, [r2, #12]
 800745e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007462:	fb02 f201 	mul.w	r2, r2, r1
 8007466:	1a9b      	subs	r3, r3, r2
 8007468:	1ac3      	subs	r3, r0, r3
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800746c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	429a      	cmp	r2, r3
 8007472:	d901      	bls.n	8007478 <f_write+0x298>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	8992      	ldrh	r2, [r2, #12]
 8007486:	fbb3 f0f2 	udiv	r0, r3, r2
 800748a:	fb02 f200 	mul.w	r2, r2, r0
 800748e:	1a9b      	subs	r3, r3, r2
 8007490:	440b      	add	r3, r1
 8007492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007494:	69f9      	ldr	r1, [r7, #28]
 8007496:	4618      	mov	r0, r3
 8007498:	f7fd fbde 	bl	8004c58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	7d1b      	ldrb	r3, [r3, #20]
 80074a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	4413      	add	r3, r2
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	441a      	add	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	619a      	str	r2, [r3, #24]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	bf38      	it	cc
 80074ca:	461a      	movcc	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	60da      	str	r2, [r3, #12]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	441a      	add	r2, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f47f aeb5 	bne.w	8007256 <f_write+0x76>
 80074ec:	e000      	b.n	80074f0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80074ee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	7d1b      	ldrb	r3, [r3, #20]
 80074f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3730      	adds	r7, #48	; 0x30
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f107 0208 	add.w	r2, r7, #8
 8007516:	4611      	mov	r1, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff fc19 	bl	8006d50 <validate>
 800751e:	4603      	mov	r3, r0
 8007520:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d168      	bne.n	80075fa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	7d1b      	ldrb	r3, [r3, #20]
 800752c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d062      	beq.n	80075fa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7d1b      	ldrb	r3, [r3, #20]
 8007538:	b25b      	sxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	da15      	bge.n	800756a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	7858      	ldrb	r0, [r3, #1]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a1a      	ldr	r2, [r3, #32]
 800754c:	2301      	movs	r3, #1
 800754e:	f7fd fac3 	bl	8004ad8 <disk_write>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <f_sync+0x54>
 8007558:	2301      	movs	r3, #1
 800755a:	e04f      	b.n	80075fc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	7d1b      	ldrb	r3, [r3, #20]
 8007560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007564:	b2da      	uxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800756a:	f7fd f9f7 	bl	800495c <get_fattime>
 800756e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f7fd fd9b 	bl	80050b4 <move_window>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d138      	bne.n	80075fa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	330b      	adds	r3, #11
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	330b      	adds	r3, #11
 8007598:	f042 0220 	orr.w	r2, r2, #32
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	461a      	mov	r2, r3
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	f7fe fb20 	bl	8005bf0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f103 021c 	add.w	r2, r3, #28
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	4619      	mov	r1, r3
 80075bc:	4610      	mov	r0, r2
 80075be:	f7fd fb1f 	bl	8004c00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3316      	adds	r3, #22
 80075c6:	6939      	ldr	r1, [r7, #16]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fd fb19 	bl	8004c00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3312      	adds	r3, #18
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fd faf8 	bl	8004bca <st_word>
					fs->wflag = 1;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2201      	movs	r2, #1
 80075de:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fd fd94 	bl	8005110 <sync_fs>
 80075e8:	4603      	mov	r3, r0
 80075ea:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7d1b      	ldrb	r3, [r3, #20]
 80075f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff ff7b 	bl	8007508 <f_sync>
 8007612:	4603      	mov	r3, r0
 8007614:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d118      	bne.n	800764e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f107 0208 	add.w	r2, r7, #8
 8007622:	4611      	mov	r1, r2
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fb93 	bl	8006d50 <validate>
 800762a:	4603      	mov	r3, r0
 800762c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10c      	bne.n	800764e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	4618      	mov	r0, r3
 800763a:	f7fd fc97 	bl	8004f6c <dec_lock>
 800763e:	4603      	mov	r3, r0
 8007640:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d102      	bne.n	800764e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007666:	2301      	movs	r3, #1
 8007668:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800766e:	4b1f      	ldr	r3, [pc, #124]	; (80076ec <FATFS_LinkDriverEx+0x94>)
 8007670:	7a5b      	ldrb	r3, [r3, #9]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d131      	bne.n	80076dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007678:	4b1c      	ldr	r3, [pc, #112]	; (80076ec <FATFS_LinkDriverEx+0x94>)
 800767a:	7a5b      	ldrb	r3, [r3, #9]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	461a      	mov	r2, r3
 8007680:	4b1a      	ldr	r3, [pc, #104]	; (80076ec <FATFS_LinkDriverEx+0x94>)
 8007682:	2100      	movs	r1, #0
 8007684:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007686:	4b19      	ldr	r3, [pc, #100]	; (80076ec <FATFS_LinkDriverEx+0x94>)
 8007688:	7a5b      	ldrb	r3, [r3, #9]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	4a17      	ldr	r2, [pc, #92]	; (80076ec <FATFS_LinkDriverEx+0x94>)
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007696:	4b15      	ldr	r3, [pc, #84]	; (80076ec <FATFS_LinkDriverEx+0x94>)
 8007698:	7a5b      	ldrb	r3, [r3, #9]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	461a      	mov	r2, r3
 800769e:	4b13      	ldr	r3, [pc, #76]	; (80076ec <FATFS_LinkDriverEx+0x94>)
 80076a0:	4413      	add	r3, r2
 80076a2:	79fa      	ldrb	r2, [r7, #7]
 80076a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80076a6:	4b11      	ldr	r3, [pc, #68]	; (80076ec <FATFS_LinkDriverEx+0x94>)
 80076a8:	7a5b      	ldrb	r3, [r3, #9]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	b2d1      	uxtb	r1, r2
 80076b0:	4a0e      	ldr	r2, [pc, #56]	; (80076ec <FATFS_LinkDriverEx+0x94>)
 80076b2:	7251      	strb	r1, [r2, #9]
 80076b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80076b6:	7dbb      	ldrb	r3, [r7, #22]
 80076b8:	3330      	adds	r3, #48	; 0x30
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	3301      	adds	r3, #1
 80076c4:	223a      	movs	r2, #58	; 0x3a
 80076c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	3302      	adds	r3, #2
 80076cc:	222f      	movs	r2, #47	; 0x2f
 80076ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	3303      	adds	r3, #3
 80076d4:	2200      	movs	r2, #0
 80076d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	200002f0 	.word	0x200002f0

080076f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80076fa:	2200      	movs	r2, #0
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff ffaa 	bl	8007658 <FATFS_LinkDriverEx>
 8007704:	4603      	mov	r3, r0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	6039      	str	r1, [r7, #0]
 800771a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800771c:	88fb      	ldrh	r3, [r7, #6]
 800771e:	2b7f      	cmp	r3, #127	; 0x7f
 8007720:	d802      	bhi.n	8007728 <ff_convert+0x18>
		c = chr;
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	81fb      	strh	r3, [r7, #14]
 8007726:	e025      	b.n	8007774 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	2bff      	cmp	r3, #255	; 0xff
 8007732:	d805      	bhi.n	8007740 <ff_convert+0x30>
 8007734:	88fb      	ldrh	r3, [r7, #6]
 8007736:	3b80      	subs	r3, #128	; 0x80
 8007738:	4a12      	ldr	r2, [pc, #72]	; (8007784 <ff_convert+0x74>)
 800773a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800773e:	e000      	b.n	8007742 <ff_convert+0x32>
 8007740:	2300      	movs	r3, #0
 8007742:	81fb      	strh	r3, [r7, #14]
 8007744:	e016      	b.n	8007774 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007746:	2300      	movs	r3, #0
 8007748:	81fb      	strh	r3, [r7, #14]
 800774a:	e009      	b.n	8007760 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800774c:	89fb      	ldrh	r3, [r7, #14]
 800774e:	4a0d      	ldr	r2, [pc, #52]	; (8007784 <ff_convert+0x74>)
 8007750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	429a      	cmp	r2, r3
 8007758:	d006      	beq.n	8007768 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800775a:	89fb      	ldrh	r3, [r7, #14]
 800775c:	3301      	adds	r3, #1
 800775e:	81fb      	strh	r3, [r7, #14]
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	2b7f      	cmp	r3, #127	; 0x7f
 8007764:	d9f2      	bls.n	800774c <ff_convert+0x3c>
 8007766:	e000      	b.n	800776a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007768:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	3380      	adds	r3, #128	; 0x80
 800776e:	b29b      	uxth	r3, r3
 8007770:	b2db      	uxtb	r3, r3
 8007772:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007774:	89fb      	ldrh	r3, [r7, #14]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	08008300 	.word	0x08008300

08007788 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007798:	d201      	bcs.n	800779e <ff_wtoupper+0x16>
 800779a:	4b3e      	ldr	r3, [pc, #248]	; (8007894 <ff_wtoupper+0x10c>)
 800779c:	e000      	b.n	80077a0 <ff_wtoupper+0x18>
 800779e:	4b3e      	ldr	r3, [pc, #248]	; (8007898 <ff_wtoupper+0x110>)
 80077a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	1c9a      	adds	r2, r3, #2
 80077a6:	617a      	str	r2, [r7, #20]
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80077ac:	8a7b      	ldrh	r3, [r7, #18]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d068      	beq.n	8007884 <ff_wtoupper+0xfc>
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	8a7b      	ldrh	r3, [r7, #18]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d364      	bcc.n	8007884 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	1c9a      	adds	r2, r3, #2
 80077be:	617a      	str	r2, [r7, #20]
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	823b      	strh	r3, [r7, #16]
 80077c4:	8a3b      	ldrh	r3, [r7, #16]
 80077c6:	0a1b      	lsrs	r3, r3, #8
 80077c8:	81fb      	strh	r3, [r7, #14]
 80077ca:	8a3b      	ldrh	r3, [r7, #16]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80077d0:	88fa      	ldrh	r2, [r7, #6]
 80077d2:	8a79      	ldrh	r1, [r7, #18]
 80077d4:	8a3b      	ldrh	r3, [r7, #16]
 80077d6:	440b      	add	r3, r1
 80077d8:	429a      	cmp	r2, r3
 80077da:	da49      	bge.n	8007870 <ff_wtoupper+0xe8>
			switch (cmd) {
 80077dc:	89fb      	ldrh	r3, [r7, #14]
 80077de:	2b08      	cmp	r3, #8
 80077e0:	d84f      	bhi.n	8007882 <ff_wtoupper+0xfa>
 80077e2:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <ff_wtoupper+0x60>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	0800781f 	.word	0x0800781f
 80077f0:	08007835 	.word	0x08007835
 80077f4:	0800783d 	.word	0x0800783d
 80077f8:	08007845 	.word	0x08007845
 80077fc:	0800784d 	.word	0x0800784d
 8007800:	08007855 	.word	0x08007855
 8007804:	0800785d 	.word	0x0800785d
 8007808:	08007865 	.word	0x08007865
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800780c:	88fa      	ldrh	r2, [r7, #6]
 800780e:	8a7b      	ldrh	r3, [r7, #18]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4413      	add	r3, r2
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	80fb      	strh	r3, [r7, #6]
 800781c:	e027      	b.n	800786e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800781e:	88fa      	ldrh	r2, [r7, #6]
 8007820:	8a7b      	ldrh	r3, [r7, #18]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	b29b      	uxth	r3, r3
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	b29b      	uxth	r3, r3
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	80fb      	strh	r3, [r7, #6]
 8007832:	e01c      	b.n	800786e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007834:	88fb      	ldrh	r3, [r7, #6]
 8007836:	3b10      	subs	r3, #16
 8007838:	80fb      	strh	r3, [r7, #6]
 800783a:	e018      	b.n	800786e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800783c:	88fb      	ldrh	r3, [r7, #6]
 800783e:	3b20      	subs	r3, #32
 8007840:	80fb      	strh	r3, [r7, #6]
 8007842:	e014      	b.n	800786e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	3b30      	subs	r3, #48	; 0x30
 8007848:	80fb      	strh	r3, [r7, #6]
 800784a:	e010      	b.n	800786e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800784c:	88fb      	ldrh	r3, [r7, #6]
 800784e:	3b1a      	subs	r3, #26
 8007850:	80fb      	strh	r3, [r7, #6]
 8007852:	e00c      	b.n	800786e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	3308      	adds	r3, #8
 8007858:	80fb      	strh	r3, [r7, #6]
 800785a:	e008      	b.n	800786e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	3b50      	subs	r3, #80	; 0x50
 8007860:	80fb      	strh	r3, [r7, #6]
 8007862:	e004      	b.n	800786e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800786a:	80fb      	strh	r3, [r7, #6]
 800786c:	bf00      	nop
			}
			break;
 800786e:	e008      	b.n	8007882 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007870:	89fb      	ldrh	r3, [r7, #14]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d195      	bne.n	80077a2 <ff_wtoupper+0x1a>
 8007876:	8a3b      	ldrh	r3, [r7, #16]
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4413      	add	r3, r2
 800787e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007880:	e78f      	b.n	80077a2 <ff_wtoupper+0x1a>
			break;
 8007882:	bf00      	nop
	}

	return chr;
 8007884:	88fb      	ldrh	r3, [r7, #6]
}
 8007886:	4618      	mov	r0, r3
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	08008400 	.word	0x08008400
 8007898:	080085f4 	.word	0x080085f4

0800789c <__errno>:
 800789c:	4b01      	ldr	r3, [pc, #4]	; (80078a4 <__errno+0x8>)
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	20000024 	.word	0x20000024

080078a8 <__libc_init_array>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	4e0d      	ldr	r6, [pc, #52]	; (80078e0 <__libc_init_array+0x38>)
 80078ac:	4c0d      	ldr	r4, [pc, #52]	; (80078e4 <__libc_init_array+0x3c>)
 80078ae:	1ba4      	subs	r4, r4, r6
 80078b0:	10a4      	asrs	r4, r4, #2
 80078b2:	2500      	movs	r5, #0
 80078b4:	42a5      	cmp	r5, r4
 80078b6:	d109      	bne.n	80078cc <__libc_init_array+0x24>
 80078b8:	4e0b      	ldr	r6, [pc, #44]	; (80078e8 <__libc_init_array+0x40>)
 80078ba:	4c0c      	ldr	r4, [pc, #48]	; (80078ec <__libc_init_array+0x44>)
 80078bc:	f000 fc52 	bl	8008164 <_init>
 80078c0:	1ba4      	subs	r4, r4, r6
 80078c2:	10a4      	asrs	r4, r4, #2
 80078c4:	2500      	movs	r5, #0
 80078c6:	42a5      	cmp	r5, r4
 80078c8:	d105      	bne.n	80078d6 <__libc_init_array+0x2e>
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078d0:	4798      	blx	r3
 80078d2:	3501      	adds	r5, #1
 80078d4:	e7ee      	b.n	80078b4 <__libc_init_array+0xc>
 80078d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078da:	4798      	blx	r3
 80078dc:	3501      	adds	r5, #1
 80078de:	e7f2      	b.n	80078c6 <__libc_init_array+0x1e>
 80078e0:	080086ec 	.word	0x080086ec
 80078e4:	080086ec 	.word	0x080086ec
 80078e8:	080086ec 	.word	0x080086ec
 80078ec:	080086f0 	.word	0x080086f0

080078f0 <memset>:
 80078f0:	4402      	add	r2, r0
 80078f2:	4603      	mov	r3, r0
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d100      	bne.n	80078fa <memset+0xa>
 80078f8:	4770      	bx	lr
 80078fa:	f803 1b01 	strb.w	r1, [r3], #1
 80078fe:	e7f9      	b.n	80078f4 <memset+0x4>

08007900 <sniprintf>:
 8007900:	b40c      	push	{r2, r3}
 8007902:	b530      	push	{r4, r5, lr}
 8007904:	4b17      	ldr	r3, [pc, #92]	; (8007964 <sniprintf+0x64>)
 8007906:	1e0c      	subs	r4, r1, #0
 8007908:	b09d      	sub	sp, #116	; 0x74
 800790a:	681d      	ldr	r5, [r3, #0]
 800790c:	da08      	bge.n	8007920 <sniprintf+0x20>
 800790e:	238b      	movs	r3, #139	; 0x8b
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	f04f 30ff 	mov.w	r0, #4294967295
 8007916:	b01d      	add	sp, #116	; 0x74
 8007918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800791c:	b002      	add	sp, #8
 800791e:	4770      	bx	lr
 8007920:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007924:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007928:	bf14      	ite	ne
 800792a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800792e:	4623      	moveq	r3, r4
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	9307      	str	r3, [sp, #28]
 8007934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007938:	9002      	str	r0, [sp, #8]
 800793a:	9006      	str	r0, [sp, #24]
 800793c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007940:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007942:	ab21      	add	r3, sp, #132	; 0x84
 8007944:	a902      	add	r1, sp, #8
 8007946:	4628      	mov	r0, r5
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	f000 f87f 	bl	8007a4c <_svfiprintf_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	bfbc      	itt	lt
 8007952:	238b      	movlt	r3, #139	; 0x8b
 8007954:	602b      	strlt	r3, [r5, #0]
 8007956:	2c00      	cmp	r4, #0
 8007958:	d0dd      	beq.n	8007916 <sniprintf+0x16>
 800795a:	9b02      	ldr	r3, [sp, #8]
 800795c:	2200      	movs	r2, #0
 800795e:	701a      	strb	r2, [r3, #0]
 8007960:	e7d9      	b.n	8007916 <sniprintf+0x16>
 8007962:	bf00      	nop
 8007964:	20000024 	.word	0x20000024

08007968 <strcat>:
 8007968:	b510      	push	{r4, lr}
 800796a:	4603      	mov	r3, r0
 800796c:	781a      	ldrb	r2, [r3, #0]
 800796e:	1c5c      	adds	r4, r3, #1
 8007970:	b93a      	cbnz	r2, 8007982 <strcat+0x1a>
 8007972:	3b01      	subs	r3, #1
 8007974:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007978:	f803 2f01 	strb.w	r2, [r3, #1]!
 800797c:	2a00      	cmp	r2, #0
 800797e:	d1f9      	bne.n	8007974 <strcat+0xc>
 8007980:	bd10      	pop	{r4, pc}
 8007982:	4623      	mov	r3, r4
 8007984:	e7f2      	b.n	800796c <strcat+0x4>

08007986 <strcpy>:
 8007986:	4603      	mov	r3, r0
 8007988:	f811 2b01 	ldrb.w	r2, [r1], #1
 800798c:	f803 2b01 	strb.w	r2, [r3], #1
 8007990:	2a00      	cmp	r2, #0
 8007992:	d1f9      	bne.n	8007988 <strcpy+0x2>
 8007994:	4770      	bx	lr

08007996 <__ssputs_r>:
 8007996:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799a:	688e      	ldr	r6, [r1, #8]
 800799c:	429e      	cmp	r6, r3
 800799e:	4682      	mov	sl, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	4690      	mov	r8, r2
 80079a4:	4699      	mov	r9, r3
 80079a6:	d837      	bhi.n	8007a18 <__ssputs_r+0x82>
 80079a8:	898a      	ldrh	r2, [r1, #12]
 80079aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079ae:	d031      	beq.n	8007a14 <__ssputs_r+0x7e>
 80079b0:	6825      	ldr	r5, [r4, #0]
 80079b2:	6909      	ldr	r1, [r1, #16]
 80079b4:	1a6f      	subs	r7, r5, r1
 80079b6:	6965      	ldr	r5, [r4, #20]
 80079b8:	2302      	movs	r3, #2
 80079ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079be:	fb95 f5f3 	sdiv	r5, r5, r3
 80079c2:	f109 0301 	add.w	r3, r9, #1
 80079c6:	443b      	add	r3, r7
 80079c8:	429d      	cmp	r5, r3
 80079ca:	bf38      	it	cc
 80079cc:	461d      	movcc	r5, r3
 80079ce:	0553      	lsls	r3, r2, #21
 80079d0:	d530      	bpl.n	8007a34 <__ssputs_r+0x9e>
 80079d2:	4629      	mov	r1, r5
 80079d4:	f000 fb2c 	bl	8008030 <_malloc_r>
 80079d8:	4606      	mov	r6, r0
 80079da:	b950      	cbnz	r0, 80079f2 <__ssputs_r+0x5c>
 80079dc:	230c      	movs	r3, #12
 80079de:	f8ca 3000 	str.w	r3, [sl]
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e8:	81a3      	strh	r3, [r4, #12]
 80079ea:	f04f 30ff 	mov.w	r0, #4294967295
 80079ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f2:	463a      	mov	r2, r7
 80079f4:	6921      	ldr	r1, [r4, #16]
 80079f6:	f000 faa9 	bl	8007f4c <memcpy>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a04:	81a3      	strh	r3, [r4, #12]
 8007a06:	6126      	str	r6, [r4, #16]
 8007a08:	6165      	str	r5, [r4, #20]
 8007a0a:	443e      	add	r6, r7
 8007a0c:	1bed      	subs	r5, r5, r7
 8007a0e:	6026      	str	r6, [r4, #0]
 8007a10:	60a5      	str	r5, [r4, #8]
 8007a12:	464e      	mov	r6, r9
 8007a14:	454e      	cmp	r6, r9
 8007a16:	d900      	bls.n	8007a1a <__ssputs_r+0x84>
 8007a18:	464e      	mov	r6, r9
 8007a1a:	4632      	mov	r2, r6
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	f000 fa9f 	bl	8007f62 <memmove>
 8007a24:	68a3      	ldr	r3, [r4, #8]
 8007a26:	1b9b      	subs	r3, r3, r6
 8007a28:	60a3      	str	r3, [r4, #8]
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	441e      	add	r6, r3
 8007a2e:	6026      	str	r6, [r4, #0]
 8007a30:	2000      	movs	r0, #0
 8007a32:	e7dc      	b.n	80079ee <__ssputs_r+0x58>
 8007a34:	462a      	mov	r2, r5
 8007a36:	f000 fb55 	bl	80080e4 <_realloc_r>
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d1e2      	bne.n	8007a06 <__ssputs_r+0x70>
 8007a40:	6921      	ldr	r1, [r4, #16]
 8007a42:	4650      	mov	r0, sl
 8007a44:	f000 faa6 	bl	8007f94 <_free_r>
 8007a48:	e7c8      	b.n	80079dc <__ssputs_r+0x46>
	...

08007a4c <_svfiprintf_r>:
 8007a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a50:	461d      	mov	r5, r3
 8007a52:	898b      	ldrh	r3, [r1, #12]
 8007a54:	061f      	lsls	r7, r3, #24
 8007a56:	b09d      	sub	sp, #116	; 0x74
 8007a58:	4680      	mov	r8, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	d50f      	bpl.n	8007a80 <_svfiprintf_r+0x34>
 8007a60:	690b      	ldr	r3, [r1, #16]
 8007a62:	b96b      	cbnz	r3, 8007a80 <_svfiprintf_r+0x34>
 8007a64:	2140      	movs	r1, #64	; 0x40
 8007a66:	f000 fae3 	bl	8008030 <_malloc_r>
 8007a6a:	6020      	str	r0, [r4, #0]
 8007a6c:	6120      	str	r0, [r4, #16]
 8007a6e:	b928      	cbnz	r0, 8007a7c <_svfiprintf_r+0x30>
 8007a70:	230c      	movs	r3, #12
 8007a72:	f8c8 3000 	str.w	r3, [r8]
 8007a76:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7a:	e0c8      	b.n	8007c0e <_svfiprintf_r+0x1c2>
 8007a7c:	2340      	movs	r3, #64	; 0x40
 8007a7e:	6163      	str	r3, [r4, #20]
 8007a80:	2300      	movs	r3, #0
 8007a82:	9309      	str	r3, [sp, #36]	; 0x24
 8007a84:	2320      	movs	r3, #32
 8007a86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a8a:	2330      	movs	r3, #48	; 0x30
 8007a8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a90:	9503      	str	r5, [sp, #12]
 8007a92:	f04f 0b01 	mov.w	fp, #1
 8007a96:	4637      	mov	r7, r6
 8007a98:	463d      	mov	r5, r7
 8007a9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a9e:	b10b      	cbz	r3, 8007aa4 <_svfiprintf_r+0x58>
 8007aa0:	2b25      	cmp	r3, #37	; 0x25
 8007aa2:	d13e      	bne.n	8007b22 <_svfiprintf_r+0xd6>
 8007aa4:	ebb7 0a06 	subs.w	sl, r7, r6
 8007aa8:	d00b      	beq.n	8007ac2 <_svfiprintf_r+0x76>
 8007aaa:	4653      	mov	r3, sl
 8007aac:	4632      	mov	r2, r6
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	f7ff ff70 	bl	8007996 <__ssputs_r>
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f000 80a4 	beq.w	8007c04 <_svfiprintf_r+0x1b8>
 8007abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abe:	4453      	add	r3, sl
 8007ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac2:	783b      	ldrb	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 809d 	beq.w	8007c04 <_svfiprintf_r+0x1b8>
 8007aca:	2300      	movs	r3, #0
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	9307      	str	r3, [sp, #28]
 8007ad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007adc:	931a      	str	r3, [sp, #104]	; 0x68
 8007ade:	462f      	mov	r7, r5
 8007ae0:	2205      	movs	r2, #5
 8007ae2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007ae6:	4850      	ldr	r0, [pc, #320]	; (8007c28 <_svfiprintf_r+0x1dc>)
 8007ae8:	f7f8 fb82 	bl	80001f0 <memchr>
 8007aec:	9b04      	ldr	r3, [sp, #16]
 8007aee:	b9d0      	cbnz	r0, 8007b26 <_svfiprintf_r+0xda>
 8007af0:	06d9      	lsls	r1, r3, #27
 8007af2:	bf44      	itt	mi
 8007af4:	2220      	movmi	r2, #32
 8007af6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007afa:	071a      	lsls	r2, r3, #28
 8007afc:	bf44      	itt	mi
 8007afe:	222b      	movmi	r2, #43	; 0x2b
 8007b00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b04:	782a      	ldrb	r2, [r5, #0]
 8007b06:	2a2a      	cmp	r2, #42	; 0x2a
 8007b08:	d015      	beq.n	8007b36 <_svfiprintf_r+0xea>
 8007b0a:	9a07      	ldr	r2, [sp, #28]
 8007b0c:	462f      	mov	r7, r5
 8007b0e:	2000      	movs	r0, #0
 8007b10:	250a      	movs	r5, #10
 8007b12:	4639      	mov	r1, r7
 8007b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b18:	3b30      	subs	r3, #48	; 0x30
 8007b1a:	2b09      	cmp	r3, #9
 8007b1c:	d94d      	bls.n	8007bba <_svfiprintf_r+0x16e>
 8007b1e:	b1b8      	cbz	r0, 8007b50 <_svfiprintf_r+0x104>
 8007b20:	e00f      	b.n	8007b42 <_svfiprintf_r+0xf6>
 8007b22:	462f      	mov	r7, r5
 8007b24:	e7b8      	b.n	8007a98 <_svfiprintf_r+0x4c>
 8007b26:	4a40      	ldr	r2, [pc, #256]	; (8007c28 <_svfiprintf_r+0x1dc>)
 8007b28:	1a80      	subs	r0, r0, r2
 8007b2a:	fa0b f000 	lsl.w	r0, fp, r0
 8007b2e:	4318      	orrs	r0, r3
 8007b30:	9004      	str	r0, [sp, #16]
 8007b32:	463d      	mov	r5, r7
 8007b34:	e7d3      	b.n	8007ade <_svfiprintf_r+0x92>
 8007b36:	9a03      	ldr	r2, [sp, #12]
 8007b38:	1d11      	adds	r1, r2, #4
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	9103      	str	r1, [sp, #12]
 8007b3e:	2a00      	cmp	r2, #0
 8007b40:	db01      	blt.n	8007b46 <_svfiprintf_r+0xfa>
 8007b42:	9207      	str	r2, [sp, #28]
 8007b44:	e004      	b.n	8007b50 <_svfiprintf_r+0x104>
 8007b46:	4252      	negs	r2, r2
 8007b48:	f043 0302 	orr.w	r3, r3, #2
 8007b4c:	9207      	str	r2, [sp, #28]
 8007b4e:	9304      	str	r3, [sp, #16]
 8007b50:	783b      	ldrb	r3, [r7, #0]
 8007b52:	2b2e      	cmp	r3, #46	; 0x2e
 8007b54:	d10c      	bne.n	8007b70 <_svfiprintf_r+0x124>
 8007b56:	787b      	ldrb	r3, [r7, #1]
 8007b58:	2b2a      	cmp	r3, #42	; 0x2a
 8007b5a:	d133      	bne.n	8007bc4 <_svfiprintf_r+0x178>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	1d1a      	adds	r2, r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	9203      	str	r2, [sp, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bfb8      	it	lt
 8007b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b6c:	3702      	adds	r7, #2
 8007b6e:	9305      	str	r3, [sp, #20]
 8007b70:	4d2e      	ldr	r5, [pc, #184]	; (8007c2c <_svfiprintf_r+0x1e0>)
 8007b72:	7839      	ldrb	r1, [r7, #0]
 8007b74:	2203      	movs	r2, #3
 8007b76:	4628      	mov	r0, r5
 8007b78:	f7f8 fb3a 	bl	80001f0 <memchr>
 8007b7c:	b138      	cbz	r0, 8007b8e <_svfiprintf_r+0x142>
 8007b7e:	2340      	movs	r3, #64	; 0x40
 8007b80:	1b40      	subs	r0, r0, r5
 8007b82:	fa03 f000 	lsl.w	r0, r3, r0
 8007b86:	9b04      	ldr	r3, [sp, #16]
 8007b88:	4303      	orrs	r3, r0
 8007b8a:	3701      	adds	r7, #1
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	7839      	ldrb	r1, [r7, #0]
 8007b90:	4827      	ldr	r0, [pc, #156]	; (8007c30 <_svfiprintf_r+0x1e4>)
 8007b92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b96:	2206      	movs	r2, #6
 8007b98:	1c7e      	adds	r6, r7, #1
 8007b9a:	f7f8 fb29 	bl	80001f0 <memchr>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d038      	beq.n	8007c14 <_svfiprintf_r+0x1c8>
 8007ba2:	4b24      	ldr	r3, [pc, #144]	; (8007c34 <_svfiprintf_r+0x1e8>)
 8007ba4:	bb13      	cbnz	r3, 8007bec <_svfiprintf_r+0x1a0>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	3307      	adds	r3, #7
 8007baa:	f023 0307 	bic.w	r3, r3, #7
 8007bae:	3308      	adds	r3, #8
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb4:	444b      	add	r3, r9
 8007bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb8:	e76d      	b.n	8007a96 <_svfiprintf_r+0x4a>
 8007bba:	fb05 3202 	mla	r2, r5, r2, r3
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	460f      	mov	r7, r1
 8007bc2:	e7a6      	b.n	8007b12 <_svfiprintf_r+0xc6>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	3701      	adds	r7, #1
 8007bc8:	9305      	str	r3, [sp, #20]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	250a      	movs	r5, #10
 8007bce:	4638      	mov	r0, r7
 8007bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd4:	3a30      	subs	r2, #48	; 0x30
 8007bd6:	2a09      	cmp	r2, #9
 8007bd8:	d903      	bls.n	8007be2 <_svfiprintf_r+0x196>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0c8      	beq.n	8007b70 <_svfiprintf_r+0x124>
 8007bde:	9105      	str	r1, [sp, #20]
 8007be0:	e7c6      	b.n	8007b70 <_svfiprintf_r+0x124>
 8007be2:	fb05 2101 	mla	r1, r5, r1, r2
 8007be6:	2301      	movs	r3, #1
 8007be8:	4607      	mov	r7, r0
 8007bea:	e7f0      	b.n	8007bce <_svfiprintf_r+0x182>
 8007bec:	ab03      	add	r3, sp, #12
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <_svfiprintf_r+0x1ec>)
 8007bf4:	a904      	add	r1, sp, #16
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	f3af 8000 	nop.w
 8007bfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c00:	4681      	mov	r9, r0
 8007c02:	d1d6      	bne.n	8007bb2 <_svfiprintf_r+0x166>
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	065b      	lsls	r3, r3, #25
 8007c08:	f53f af35 	bmi.w	8007a76 <_svfiprintf_r+0x2a>
 8007c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c0e:	b01d      	add	sp, #116	; 0x74
 8007c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c14:	ab03      	add	r3, sp, #12
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	4622      	mov	r2, r4
 8007c1a:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <_svfiprintf_r+0x1ec>)
 8007c1c:	a904      	add	r1, sp, #16
 8007c1e:	4640      	mov	r0, r8
 8007c20:	f000 f882 	bl	8007d28 <_printf_i>
 8007c24:	e7ea      	b.n	8007bfc <_svfiprintf_r+0x1b0>
 8007c26:	bf00      	nop
 8007c28:	080086b0 	.word	0x080086b0
 8007c2c:	080086b6 	.word	0x080086b6
 8007c30:	080086ba 	.word	0x080086ba
 8007c34:	00000000 	.word	0x00000000
 8007c38:	08007997 	.word	0x08007997

08007c3c <_printf_common>:
 8007c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	4691      	mov	r9, r2
 8007c42:	461f      	mov	r7, r3
 8007c44:	688a      	ldr	r2, [r1, #8]
 8007c46:	690b      	ldr	r3, [r1, #16]
 8007c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	bfb8      	it	lt
 8007c50:	4613      	movlt	r3, r2
 8007c52:	f8c9 3000 	str.w	r3, [r9]
 8007c56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	b112      	cbz	r2, 8007c66 <_printf_common+0x2a>
 8007c60:	3301      	adds	r3, #1
 8007c62:	f8c9 3000 	str.w	r3, [r9]
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	0699      	lsls	r1, r3, #26
 8007c6a:	bf42      	ittt	mi
 8007c6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c70:	3302      	addmi	r3, #2
 8007c72:	f8c9 3000 	strmi.w	r3, [r9]
 8007c76:	6825      	ldr	r5, [r4, #0]
 8007c78:	f015 0506 	ands.w	r5, r5, #6
 8007c7c:	d107      	bne.n	8007c8e <_printf_common+0x52>
 8007c7e:	f104 0a19 	add.w	sl, r4, #25
 8007c82:	68e3      	ldr	r3, [r4, #12]
 8007c84:	f8d9 2000 	ldr.w	r2, [r9]
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	42ab      	cmp	r3, r5
 8007c8c:	dc28      	bgt.n	8007ce0 <_printf_common+0xa4>
 8007c8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007c92:	6822      	ldr	r2, [r4, #0]
 8007c94:	3300      	adds	r3, #0
 8007c96:	bf18      	it	ne
 8007c98:	2301      	movne	r3, #1
 8007c9a:	0692      	lsls	r2, r2, #26
 8007c9c:	d42d      	bmi.n	8007cfa <_printf_common+0xbe>
 8007c9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	47c0      	blx	r8
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d020      	beq.n	8007cee <_printf_common+0xb2>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	68e5      	ldr	r5, [r4, #12]
 8007cb0:	f8d9 2000 	ldr.w	r2, [r9]
 8007cb4:	f003 0306 	and.w	r3, r3, #6
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	bf08      	it	eq
 8007cbc:	1aad      	subeq	r5, r5, r2
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	6922      	ldr	r2, [r4, #16]
 8007cc2:	bf0c      	ite	eq
 8007cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc8:	2500      	movne	r5, #0
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	bfc4      	itt	gt
 8007cce:	1a9b      	subgt	r3, r3, r2
 8007cd0:	18ed      	addgt	r5, r5, r3
 8007cd2:	f04f 0900 	mov.w	r9, #0
 8007cd6:	341a      	adds	r4, #26
 8007cd8:	454d      	cmp	r5, r9
 8007cda:	d11a      	bne.n	8007d12 <_printf_common+0xd6>
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e008      	b.n	8007cf2 <_printf_common+0xb6>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	4639      	mov	r1, r7
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	47c0      	blx	r8
 8007cea:	3001      	adds	r0, #1
 8007cec:	d103      	bne.n	8007cf6 <_printf_common+0xba>
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf6:	3501      	adds	r5, #1
 8007cf8:	e7c3      	b.n	8007c82 <_printf_common+0x46>
 8007cfa:	18e1      	adds	r1, r4, r3
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	2030      	movs	r0, #48	; 0x30
 8007d00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d04:	4422      	add	r2, r4
 8007d06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d0e:	3302      	adds	r3, #2
 8007d10:	e7c5      	b.n	8007c9e <_printf_common+0x62>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4622      	mov	r2, r4
 8007d16:	4639      	mov	r1, r7
 8007d18:	4630      	mov	r0, r6
 8007d1a:	47c0      	blx	r8
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d0e6      	beq.n	8007cee <_printf_common+0xb2>
 8007d20:	f109 0901 	add.w	r9, r9, #1
 8007d24:	e7d8      	b.n	8007cd8 <_printf_common+0x9c>
	...

08007d28 <_printf_i>:
 8007d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d30:	460c      	mov	r4, r1
 8007d32:	7e09      	ldrb	r1, [r1, #24]
 8007d34:	b085      	sub	sp, #20
 8007d36:	296e      	cmp	r1, #110	; 0x6e
 8007d38:	4617      	mov	r7, r2
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	4698      	mov	r8, r3
 8007d3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d40:	f000 80b3 	beq.w	8007eaa <_printf_i+0x182>
 8007d44:	d822      	bhi.n	8007d8c <_printf_i+0x64>
 8007d46:	2963      	cmp	r1, #99	; 0x63
 8007d48:	d036      	beq.n	8007db8 <_printf_i+0x90>
 8007d4a:	d80a      	bhi.n	8007d62 <_printf_i+0x3a>
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	f000 80b9 	beq.w	8007ec4 <_printf_i+0x19c>
 8007d52:	2958      	cmp	r1, #88	; 0x58
 8007d54:	f000 8083 	beq.w	8007e5e <_printf_i+0x136>
 8007d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007d60:	e032      	b.n	8007dc8 <_printf_i+0xa0>
 8007d62:	2964      	cmp	r1, #100	; 0x64
 8007d64:	d001      	beq.n	8007d6a <_printf_i+0x42>
 8007d66:	2969      	cmp	r1, #105	; 0x69
 8007d68:	d1f6      	bne.n	8007d58 <_printf_i+0x30>
 8007d6a:	6820      	ldr	r0, [r4, #0]
 8007d6c:	6813      	ldr	r3, [r2, #0]
 8007d6e:	0605      	lsls	r5, r0, #24
 8007d70:	f103 0104 	add.w	r1, r3, #4
 8007d74:	d52a      	bpl.n	8007dcc <_printf_i+0xa4>
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6011      	str	r1, [r2, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	da03      	bge.n	8007d86 <_printf_i+0x5e>
 8007d7e:	222d      	movs	r2, #45	; 0x2d
 8007d80:	425b      	negs	r3, r3
 8007d82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007d86:	486f      	ldr	r0, [pc, #444]	; (8007f44 <_printf_i+0x21c>)
 8007d88:	220a      	movs	r2, #10
 8007d8a:	e039      	b.n	8007e00 <_printf_i+0xd8>
 8007d8c:	2973      	cmp	r1, #115	; 0x73
 8007d8e:	f000 809d 	beq.w	8007ecc <_printf_i+0x1a4>
 8007d92:	d808      	bhi.n	8007da6 <_printf_i+0x7e>
 8007d94:	296f      	cmp	r1, #111	; 0x6f
 8007d96:	d020      	beq.n	8007dda <_printf_i+0xb2>
 8007d98:	2970      	cmp	r1, #112	; 0x70
 8007d9a:	d1dd      	bne.n	8007d58 <_printf_i+0x30>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	f043 0320 	orr.w	r3, r3, #32
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	e003      	b.n	8007dae <_printf_i+0x86>
 8007da6:	2975      	cmp	r1, #117	; 0x75
 8007da8:	d017      	beq.n	8007dda <_printf_i+0xb2>
 8007daa:	2978      	cmp	r1, #120	; 0x78
 8007dac:	d1d4      	bne.n	8007d58 <_printf_i+0x30>
 8007dae:	2378      	movs	r3, #120	; 0x78
 8007db0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007db4:	4864      	ldr	r0, [pc, #400]	; (8007f48 <_printf_i+0x220>)
 8007db6:	e055      	b.n	8007e64 <_printf_i+0x13c>
 8007db8:	6813      	ldr	r3, [r2, #0]
 8007dba:	1d19      	adds	r1, r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6011      	str	r1, [r2, #0]
 8007dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e08c      	b.n	8007ee6 <_printf_i+0x1be>
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6011      	str	r1, [r2, #0]
 8007dd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dd4:	bf18      	it	ne
 8007dd6:	b21b      	sxthne	r3, r3
 8007dd8:	e7cf      	b.n	8007d7a <_printf_i+0x52>
 8007dda:	6813      	ldr	r3, [r2, #0]
 8007ddc:	6825      	ldr	r5, [r4, #0]
 8007dde:	1d18      	adds	r0, r3, #4
 8007de0:	6010      	str	r0, [r2, #0]
 8007de2:	0628      	lsls	r0, r5, #24
 8007de4:	d501      	bpl.n	8007dea <_printf_i+0xc2>
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	e002      	b.n	8007df0 <_printf_i+0xc8>
 8007dea:	0668      	lsls	r0, r5, #25
 8007dec:	d5fb      	bpl.n	8007de6 <_printf_i+0xbe>
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	4854      	ldr	r0, [pc, #336]	; (8007f44 <_printf_i+0x21c>)
 8007df2:	296f      	cmp	r1, #111	; 0x6f
 8007df4:	bf14      	ite	ne
 8007df6:	220a      	movne	r2, #10
 8007df8:	2208      	moveq	r2, #8
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e00:	6865      	ldr	r5, [r4, #4]
 8007e02:	60a5      	str	r5, [r4, #8]
 8007e04:	2d00      	cmp	r5, #0
 8007e06:	f2c0 8095 	blt.w	8007f34 <_printf_i+0x20c>
 8007e0a:	6821      	ldr	r1, [r4, #0]
 8007e0c:	f021 0104 	bic.w	r1, r1, #4
 8007e10:	6021      	str	r1, [r4, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d13d      	bne.n	8007e92 <_printf_i+0x16a>
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	f040 808e 	bne.w	8007f38 <_printf_i+0x210>
 8007e1c:	4665      	mov	r5, ip
 8007e1e:	2a08      	cmp	r2, #8
 8007e20:	d10b      	bne.n	8007e3a <_printf_i+0x112>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	07db      	lsls	r3, r3, #31
 8007e26:	d508      	bpl.n	8007e3a <_printf_i+0x112>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	6862      	ldr	r2, [r4, #4]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	bfde      	ittt	le
 8007e30:	2330      	movle	r3, #48	; 0x30
 8007e32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e3a:	ebac 0305 	sub.w	r3, ip, r5
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	f8cd 8000 	str.w	r8, [sp]
 8007e44:	463b      	mov	r3, r7
 8007e46:	aa03      	add	r2, sp, #12
 8007e48:	4621      	mov	r1, r4
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f7ff fef6 	bl	8007c3c <_printf_common>
 8007e50:	3001      	adds	r0, #1
 8007e52:	d14d      	bne.n	8007ef0 <_printf_i+0x1c8>
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295
 8007e58:	b005      	add	sp, #20
 8007e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e5e:	4839      	ldr	r0, [pc, #228]	; (8007f44 <_printf_i+0x21c>)
 8007e60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007e64:	6813      	ldr	r3, [r2, #0]
 8007e66:	6821      	ldr	r1, [r4, #0]
 8007e68:	1d1d      	adds	r5, r3, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6015      	str	r5, [r2, #0]
 8007e6e:	060a      	lsls	r2, r1, #24
 8007e70:	d50b      	bpl.n	8007e8a <_printf_i+0x162>
 8007e72:	07ca      	lsls	r2, r1, #31
 8007e74:	bf44      	itt	mi
 8007e76:	f041 0120 	orrmi.w	r1, r1, #32
 8007e7a:	6021      	strmi	r1, [r4, #0]
 8007e7c:	b91b      	cbnz	r3, 8007e86 <_printf_i+0x15e>
 8007e7e:	6822      	ldr	r2, [r4, #0]
 8007e80:	f022 0220 	bic.w	r2, r2, #32
 8007e84:	6022      	str	r2, [r4, #0]
 8007e86:	2210      	movs	r2, #16
 8007e88:	e7b7      	b.n	8007dfa <_printf_i+0xd2>
 8007e8a:	064d      	lsls	r5, r1, #25
 8007e8c:	bf48      	it	mi
 8007e8e:	b29b      	uxthmi	r3, r3
 8007e90:	e7ef      	b.n	8007e72 <_printf_i+0x14a>
 8007e92:	4665      	mov	r5, ip
 8007e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e98:	fb02 3311 	mls	r3, r2, r1, r3
 8007e9c:	5cc3      	ldrb	r3, [r0, r3]
 8007e9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	d1f5      	bne.n	8007e94 <_printf_i+0x16c>
 8007ea8:	e7b9      	b.n	8007e1e <_printf_i+0xf6>
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	6825      	ldr	r5, [r4, #0]
 8007eae:	6961      	ldr	r1, [r4, #20]
 8007eb0:	1d18      	adds	r0, r3, #4
 8007eb2:	6010      	str	r0, [r2, #0]
 8007eb4:	0628      	lsls	r0, r5, #24
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	d501      	bpl.n	8007ebe <_printf_i+0x196>
 8007eba:	6019      	str	r1, [r3, #0]
 8007ebc:	e002      	b.n	8007ec4 <_printf_i+0x19c>
 8007ebe:	066a      	lsls	r2, r5, #25
 8007ec0:	d5fb      	bpl.n	8007eba <_printf_i+0x192>
 8007ec2:	8019      	strh	r1, [r3, #0]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	4665      	mov	r5, ip
 8007eca:	e7b9      	b.n	8007e40 <_printf_i+0x118>
 8007ecc:	6813      	ldr	r3, [r2, #0]
 8007ece:	1d19      	adds	r1, r3, #4
 8007ed0:	6011      	str	r1, [r2, #0]
 8007ed2:	681d      	ldr	r5, [r3, #0]
 8007ed4:	6862      	ldr	r2, [r4, #4]
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f7f8 f989 	bl	80001f0 <memchr>
 8007ede:	b108      	cbz	r0, 8007ee4 <_printf_i+0x1bc>
 8007ee0:	1b40      	subs	r0, r0, r5
 8007ee2:	6060      	str	r0, [r4, #4]
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	6123      	str	r3, [r4, #16]
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eee:	e7a7      	b.n	8007e40 <_printf_i+0x118>
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	47c0      	blx	r8
 8007efa:	3001      	adds	r0, #1
 8007efc:	d0aa      	beq.n	8007e54 <_printf_i+0x12c>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	079b      	lsls	r3, r3, #30
 8007f02:	d413      	bmi.n	8007f2c <_printf_i+0x204>
 8007f04:	68e0      	ldr	r0, [r4, #12]
 8007f06:	9b03      	ldr	r3, [sp, #12]
 8007f08:	4298      	cmp	r0, r3
 8007f0a:	bfb8      	it	lt
 8007f0c:	4618      	movlt	r0, r3
 8007f0e:	e7a3      	b.n	8007e58 <_printf_i+0x130>
 8007f10:	2301      	movs	r3, #1
 8007f12:	464a      	mov	r2, r9
 8007f14:	4639      	mov	r1, r7
 8007f16:	4630      	mov	r0, r6
 8007f18:	47c0      	blx	r8
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d09a      	beq.n	8007e54 <_printf_i+0x12c>
 8007f1e:	3501      	adds	r5, #1
 8007f20:	68e3      	ldr	r3, [r4, #12]
 8007f22:	9a03      	ldr	r2, [sp, #12]
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	42ab      	cmp	r3, r5
 8007f28:	dcf2      	bgt.n	8007f10 <_printf_i+0x1e8>
 8007f2a:	e7eb      	b.n	8007f04 <_printf_i+0x1dc>
 8007f2c:	2500      	movs	r5, #0
 8007f2e:	f104 0919 	add.w	r9, r4, #25
 8007f32:	e7f5      	b.n	8007f20 <_printf_i+0x1f8>
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1ac      	bne.n	8007e92 <_printf_i+0x16a>
 8007f38:	7803      	ldrb	r3, [r0, #0]
 8007f3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f42:	e76c      	b.n	8007e1e <_printf_i+0xf6>
 8007f44:	080086c1 	.word	0x080086c1
 8007f48:	080086d2 	.word	0x080086d2

08007f4c <memcpy>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	1e43      	subs	r3, r0, #1
 8007f50:	440a      	add	r2, r1
 8007f52:	4291      	cmp	r1, r2
 8007f54:	d100      	bne.n	8007f58 <memcpy+0xc>
 8007f56:	bd10      	pop	{r4, pc}
 8007f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f60:	e7f7      	b.n	8007f52 <memcpy+0x6>

08007f62 <memmove>:
 8007f62:	4288      	cmp	r0, r1
 8007f64:	b510      	push	{r4, lr}
 8007f66:	eb01 0302 	add.w	r3, r1, r2
 8007f6a:	d807      	bhi.n	8007f7c <memmove+0x1a>
 8007f6c:	1e42      	subs	r2, r0, #1
 8007f6e:	4299      	cmp	r1, r3
 8007f70:	d00a      	beq.n	8007f88 <memmove+0x26>
 8007f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f7a:	e7f8      	b.n	8007f6e <memmove+0xc>
 8007f7c:	4283      	cmp	r3, r0
 8007f7e:	d9f5      	bls.n	8007f6c <memmove+0xa>
 8007f80:	1881      	adds	r1, r0, r2
 8007f82:	1ad2      	subs	r2, r2, r3
 8007f84:	42d3      	cmn	r3, r2
 8007f86:	d100      	bne.n	8007f8a <memmove+0x28>
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f92:	e7f7      	b.n	8007f84 <memmove+0x22>

08007f94 <_free_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4605      	mov	r5, r0
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	d045      	beq.n	8008028 <_free_r+0x94>
 8007f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa0:	1f0c      	subs	r4, r1, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	bfb8      	it	lt
 8007fa6:	18e4      	addlt	r4, r4, r3
 8007fa8:	f000 f8d2 	bl	8008150 <__malloc_lock>
 8007fac:	4a1f      	ldr	r2, [pc, #124]	; (800802c <_free_r+0x98>)
 8007fae:	6813      	ldr	r3, [r2, #0]
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	b933      	cbnz	r3, 8007fc2 <_free_r+0x2e>
 8007fb4:	6063      	str	r3, [r4, #4]
 8007fb6:	6014      	str	r4, [r2, #0]
 8007fb8:	4628      	mov	r0, r5
 8007fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fbe:	f000 b8c8 	b.w	8008152 <__malloc_unlock>
 8007fc2:	42a3      	cmp	r3, r4
 8007fc4:	d90c      	bls.n	8007fe0 <_free_r+0x4c>
 8007fc6:	6821      	ldr	r1, [r4, #0]
 8007fc8:	1862      	adds	r2, r4, r1
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	bf04      	itt	eq
 8007fce:	681a      	ldreq	r2, [r3, #0]
 8007fd0:	685b      	ldreq	r3, [r3, #4]
 8007fd2:	6063      	str	r3, [r4, #4]
 8007fd4:	bf04      	itt	eq
 8007fd6:	1852      	addeq	r2, r2, r1
 8007fd8:	6022      	streq	r2, [r4, #0]
 8007fda:	6004      	str	r4, [r0, #0]
 8007fdc:	e7ec      	b.n	8007fb8 <_free_r+0x24>
 8007fde:	4613      	mov	r3, r2
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	b10a      	cbz	r2, 8007fe8 <_free_r+0x54>
 8007fe4:	42a2      	cmp	r2, r4
 8007fe6:	d9fa      	bls.n	8007fde <_free_r+0x4a>
 8007fe8:	6819      	ldr	r1, [r3, #0]
 8007fea:	1858      	adds	r0, r3, r1
 8007fec:	42a0      	cmp	r0, r4
 8007fee:	d10b      	bne.n	8008008 <_free_r+0x74>
 8007ff0:	6820      	ldr	r0, [r4, #0]
 8007ff2:	4401      	add	r1, r0
 8007ff4:	1858      	adds	r0, r3, r1
 8007ff6:	4282      	cmp	r2, r0
 8007ff8:	6019      	str	r1, [r3, #0]
 8007ffa:	d1dd      	bne.n	8007fb8 <_free_r+0x24>
 8007ffc:	6810      	ldr	r0, [r2, #0]
 8007ffe:	6852      	ldr	r2, [r2, #4]
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	4401      	add	r1, r0
 8008004:	6019      	str	r1, [r3, #0]
 8008006:	e7d7      	b.n	8007fb8 <_free_r+0x24>
 8008008:	d902      	bls.n	8008010 <_free_r+0x7c>
 800800a:	230c      	movs	r3, #12
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	e7d3      	b.n	8007fb8 <_free_r+0x24>
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	1821      	adds	r1, r4, r0
 8008014:	428a      	cmp	r2, r1
 8008016:	bf04      	itt	eq
 8008018:	6811      	ldreq	r1, [r2, #0]
 800801a:	6852      	ldreq	r2, [r2, #4]
 800801c:	6062      	str	r2, [r4, #4]
 800801e:	bf04      	itt	eq
 8008020:	1809      	addeq	r1, r1, r0
 8008022:	6021      	streq	r1, [r4, #0]
 8008024:	605c      	str	r4, [r3, #4]
 8008026:	e7c7      	b.n	8007fb8 <_free_r+0x24>
 8008028:	bd38      	pop	{r3, r4, r5, pc}
 800802a:	bf00      	nop
 800802c:	200002fc 	.word	0x200002fc

08008030 <_malloc_r>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	1ccd      	adds	r5, r1, #3
 8008034:	f025 0503 	bic.w	r5, r5, #3
 8008038:	3508      	adds	r5, #8
 800803a:	2d0c      	cmp	r5, #12
 800803c:	bf38      	it	cc
 800803e:	250c      	movcc	r5, #12
 8008040:	2d00      	cmp	r5, #0
 8008042:	4606      	mov	r6, r0
 8008044:	db01      	blt.n	800804a <_malloc_r+0x1a>
 8008046:	42a9      	cmp	r1, r5
 8008048:	d903      	bls.n	8008052 <_malloc_r+0x22>
 800804a:	230c      	movs	r3, #12
 800804c:	6033      	str	r3, [r6, #0]
 800804e:	2000      	movs	r0, #0
 8008050:	bd70      	pop	{r4, r5, r6, pc}
 8008052:	f000 f87d 	bl	8008150 <__malloc_lock>
 8008056:	4a21      	ldr	r2, [pc, #132]	; (80080dc <_malloc_r+0xac>)
 8008058:	6814      	ldr	r4, [r2, #0]
 800805a:	4621      	mov	r1, r4
 800805c:	b991      	cbnz	r1, 8008084 <_malloc_r+0x54>
 800805e:	4c20      	ldr	r4, [pc, #128]	; (80080e0 <_malloc_r+0xb0>)
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	b91b      	cbnz	r3, 800806c <_malloc_r+0x3c>
 8008064:	4630      	mov	r0, r6
 8008066:	f000 f863 	bl	8008130 <_sbrk_r>
 800806a:	6020      	str	r0, [r4, #0]
 800806c:	4629      	mov	r1, r5
 800806e:	4630      	mov	r0, r6
 8008070:	f000 f85e 	bl	8008130 <_sbrk_r>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d124      	bne.n	80080c2 <_malloc_r+0x92>
 8008078:	230c      	movs	r3, #12
 800807a:	6033      	str	r3, [r6, #0]
 800807c:	4630      	mov	r0, r6
 800807e:	f000 f868 	bl	8008152 <__malloc_unlock>
 8008082:	e7e4      	b.n	800804e <_malloc_r+0x1e>
 8008084:	680b      	ldr	r3, [r1, #0]
 8008086:	1b5b      	subs	r3, r3, r5
 8008088:	d418      	bmi.n	80080bc <_malloc_r+0x8c>
 800808a:	2b0b      	cmp	r3, #11
 800808c:	d90f      	bls.n	80080ae <_malloc_r+0x7e>
 800808e:	600b      	str	r3, [r1, #0]
 8008090:	50cd      	str	r5, [r1, r3]
 8008092:	18cc      	adds	r4, r1, r3
 8008094:	4630      	mov	r0, r6
 8008096:	f000 f85c 	bl	8008152 <__malloc_unlock>
 800809a:	f104 000b 	add.w	r0, r4, #11
 800809e:	1d23      	adds	r3, r4, #4
 80080a0:	f020 0007 	bic.w	r0, r0, #7
 80080a4:	1ac3      	subs	r3, r0, r3
 80080a6:	d0d3      	beq.n	8008050 <_malloc_r+0x20>
 80080a8:	425a      	negs	r2, r3
 80080aa:	50e2      	str	r2, [r4, r3]
 80080ac:	e7d0      	b.n	8008050 <_malloc_r+0x20>
 80080ae:	428c      	cmp	r4, r1
 80080b0:	684b      	ldr	r3, [r1, #4]
 80080b2:	bf16      	itet	ne
 80080b4:	6063      	strne	r3, [r4, #4]
 80080b6:	6013      	streq	r3, [r2, #0]
 80080b8:	460c      	movne	r4, r1
 80080ba:	e7eb      	b.n	8008094 <_malloc_r+0x64>
 80080bc:	460c      	mov	r4, r1
 80080be:	6849      	ldr	r1, [r1, #4]
 80080c0:	e7cc      	b.n	800805c <_malloc_r+0x2c>
 80080c2:	1cc4      	adds	r4, r0, #3
 80080c4:	f024 0403 	bic.w	r4, r4, #3
 80080c8:	42a0      	cmp	r0, r4
 80080ca:	d005      	beq.n	80080d8 <_malloc_r+0xa8>
 80080cc:	1a21      	subs	r1, r4, r0
 80080ce:	4630      	mov	r0, r6
 80080d0:	f000 f82e 	bl	8008130 <_sbrk_r>
 80080d4:	3001      	adds	r0, #1
 80080d6:	d0cf      	beq.n	8008078 <_malloc_r+0x48>
 80080d8:	6025      	str	r5, [r4, #0]
 80080da:	e7db      	b.n	8008094 <_malloc_r+0x64>
 80080dc:	200002fc 	.word	0x200002fc
 80080e0:	20000300 	.word	0x20000300

080080e4 <_realloc_r>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	4607      	mov	r7, r0
 80080e8:	4614      	mov	r4, r2
 80080ea:	460e      	mov	r6, r1
 80080ec:	b921      	cbnz	r1, 80080f8 <_realloc_r+0x14>
 80080ee:	4611      	mov	r1, r2
 80080f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80080f4:	f7ff bf9c 	b.w	8008030 <_malloc_r>
 80080f8:	b922      	cbnz	r2, 8008104 <_realloc_r+0x20>
 80080fa:	f7ff ff4b 	bl	8007f94 <_free_r>
 80080fe:	4625      	mov	r5, r4
 8008100:	4628      	mov	r0, r5
 8008102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008104:	f000 f826 	bl	8008154 <_malloc_usable_size_r>
 8008108:	42a0      	cmp	r0, r4
 800810a:	d20f      	bcs.n	800812c <_realloc_r+0x48>
 800810c:	4621      	mov	r1, r4
 800810e:	4638      	mov	r0, r7
 8008110:	f7ff ff8e 	bl	8008030 <_malloc_r>
 8008114:	4605      	mov	r5, r0
 8008116:	2800      	cmp	r0, #0
 8008118:	d0f2      	beq.n	8008100 <_realloc_r+0x1c>
 800811a:	4631      	mov	r1, r6
 800811c:	4622      	mov	r2, r4
 800811e:	f7ff ff15 	bl	8007f4c <memcpy>
 8008122:	4631      	mov	r1, r6
 8008124:	4638      	mov	r0, r7
 8008126:	f7ff ff35 	bl	8007f94 <_free_r>
 800812a:	e7e9      	b.n	8008100 <_realloc_r+0x1c>
 800812c:	4635      	mov	r5, r6
 800812e:	e7e7      	b.n	8008100 <_realloc_r+0x1c>

08008130 <_sbrk_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4c06      	ldr	r4, [pc, #24]	; (800814c <_sbrk_r+0x1c>)
 8008134:	2300      	movs	r3, #0
 8008136:	4605      	mov	r5, r0
 8008138:	4608      	mov	r0, r1
 800813a:	6023      	str	r3, [r4, #0]
 800813c:	f7f9 fcae 	bl	8001a9c <_sbrk>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_sbrk_r+0x1a>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	b103      	cbz	r3, 800814a <_sbrk_r+0x1a>
 8008148:	602b      	str	r3, [r5, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	20002878 	.word	0x20002878

08008150 <__malloc_lock>:
 8008150:	4770      	bx	lr

08008152 <__malloc_unlock>:
 8008152:	4770      	bx	lr

08008154 <_malloc_usable_size_r>:
 8008154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008158:	1f18      	subs	r0, r3, #4
 800815a:	2b00      	cmp	r3, #0
 800815c:	bfbc      	itt	lt
 800815e:	580b      	ldrlt	r3, [r1, r0]
 8008160:	18c0      	addlt	r0, r0, r3
 8008162:	4770      	bx	lr

08008164 <_init>:
 8008164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008166:	bf00      	nop
 8008168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816a:	bc08      	pop	{r3}
 800816c:	469e      	mov	lr, r3
 800816e:	4770      	bx	lr

08008170 <_fini>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr
